
Task6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003630  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  080037c0  080037c0  000137c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039f8  080039f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080039f8  080039f8  000139f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a00  08003a00  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a00  08003a00  00013a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a04  08003a04  00013a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000d8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000148  20000148  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c241  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018fd  00000000  00000000  0002c2e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000920  00000000  00000000  0002dbe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008b0  00000000  00000000  0002e500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002091b  00000000  00000000  0002edb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bfe4  00000000  00000000  0004f6cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5239  00000000  00000000  0005b6af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001208e8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c78  00000000  00000000  0012093c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080037a8 	.word	0x080037a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080037a8 	.word	0x080037a8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <parse_command>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void parse_command(uint8_t *command) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af02      	add	r7, sp, #8
 800057e:	6078      	str	r0, [r7, #4]
	uint8_t channel = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	73fb      	strb	r3, [r7, #15]
	uint8_t duty = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	73bb      	strb	r3, [r7, #14]
	uint8_t offset = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	737b      	strb	r3, [r7, #13]

	if(strstr((const char *)command, "disable all"))
 800058c:	4918      	ldr	r1, [pc, #96]	; (80005f0 <parse_command+0x78>)
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f002 fb66 	bl	8002c60 <strstr>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d002      	beq.n	80005a0 <parse_command+0x28>
	{
		pca9685_DisableALL();
 800059a:	f002 fadf 	bl	8002b5c <pca9685_DisableALL>
 800059e:	e023      	b.n	80005e8 <parse_command+0x70>
		return;
	}

	sscanf((const char*) command, "set %c, %c, %c", &channel, &duty, &offset);
 80005a0:	f107 010e 	add.w	r1, r7, #14
 80005a4:	f107 020f 	add.w	r2, r7, #15
 80005a8:	f107 030d 	add.w	r3, r7, #13
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	460b      	mov	r3, r1
 80005b0:	4910      	ldr	r1, [pc, #64]	; (80005f4 <parse_command+0x7c>)
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f002 fb26 	bl	8002c04 <siscanf>

	duty = (duty == 'a') ? 100 : (duty - '0');
 80005b8:	7bbb      	ldrb	r3, [r7, #14]
 80005ba:	2b61      	cmp	r3, #97	; 0x61
 80005bc:	d003      	beq.n	80005c6 <parse_command+0x4e>
 80005be:	7bbb      	ldrb	r3, [r7, #14]
 80005c0:	3b30      	subs	r3, #48	; 0x30
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	e000      	b.n	80005c8 <parse_command+0x50>
 80005c6:	2364      	movs	r3, #100	; 0x64
 80005c8:	73bb      	strb	r3, [r7, #14]
	pca9685_SetDutyCycle(channel - '0', duty * 10, offset - '0');
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
 80005cc:	3b30      	subs	r3, #48	; 0x30
 80005ce:	b2d8      	uxtb	r0, r3
 80005d0:	7bbb      	ldrb	r3, [r7, #14]
 80005d2:	461a      	mov	r2, r3
 80005d4:	0092      	lsls	r2, r2, #2
 80005d6:	4413      	add	r3, r2
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	b2d9      	uxtb	r1, r3
 80005dc:	7b7b      	ldrb	r3, [r7, #13]
 80005de:	3b30      	subs	r3, #48	; 0x30
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	461a      	mov	r2, r3
 80005e4:	f002 fa72 	bl	8002acc <pca9685_SetDutyCycle>
}
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	080037c0 	.word	0x080037c0
 80005f4:	080037cc 	.word	0x080037cc

080005f8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b0a0      	sub	sp, #128	; 0x80
 80005fc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005fe:	f000 faa1 	bl	8000b44 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000602:	f000 f835 	bl	8000670 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000606:	f000 f8e9 	bl	80007dc <MX_GPIO_Init>
	MX_I2C1_Init();
 800060a:	f000 f88f 	bl	800072c <MX_I2C1_Init>
	MX_USART3_UART_Init();
 800060e:	f000 f8bb 	bl	8000788 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	uint8_t start_msg[] = "\r\nUsage:\r\n> set c, d, o\r\n\tc - channel(0-15)\r\n\td - duty cycle (0 - 9, a - 100%)\r\n\to - offset\r\n> disable all\r\n";
 8000612:	4a14      	ldr	r2, [pc, #80]	; (8000664 <main+0x6c>)
 8000614:	f107 0310 	add.w	r3, r7, #16
 8000618:	4611      	mov	r1, r2
 800061a:	226d      	movs	r2, #109	; 0x6d
 800061c:	4618      	mov	r0, r3
 800061e:	f002 fadb 	bl	8002bd8 <memcpy>
	HAL_UART_Transmit(&huart3, start_msg, sizeof(start_msg), 10);
 8000622:	f107 0110 	add.w	r1, r7, #16
 8000626:	230a      	movs	r3, #10
 8000628:	226d      	movs	r2, #109	; 0x6d
 800062a:	480f      	ldr	r0, [pc, #60]	; (8000668 <main+0x70>)
 800062c:	f001 fe9d 	bl	800236a <HAL_UART_Transmit>
	HAL_Delay(100);
 8000630:	2064      	movs	r0, #100	; 0x64
 8000632:	f000 faf9 	bl	8000c28 <HAL_Delay>

	pca9685_Init(&hi2c1);
 8000636:	480d      	ldr	r0, [pc, #52]	; (800066c <main+0x74>)
 8000638:	f002 fa2e 	bl	8002a98 <pca9685_Init>

	pca9685_DisableALL();
 800063c:	f002 fa8e 	bl	8002b5c <pca9685_DisableALL>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_StatusTypeDef result;
		uint8_t rcvBuf[RECIEVE_BUF_SIZE];
		result = HAL_UART_Receive(&huart3, rcvBuf, sizeof(rcvBuf), 10);
 8000640:	1d39      	adds	r1, r7, #4
 8000642:	230a      	movs	r3, #10
 8000644:	220b      	movs	r2, #11
 8000646:	4808      	ldr	r0, [pc, #32]	; (8000668 <main+0x70>)
 8000648:	f001 ff21 	bl	800248e <HAL_UART_Receive>
 800064c:	4603      	mov	r3, r0
 800064e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (result == HAL_OK) {
 8000652:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000656:	2b00      	cmp	r3, #0
 8000658:	d1f2      	bne.n	8000640 <main+0x48>
			parse_command(rcvBuf);
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ff8b 	bl	8000578 <parse_command>
	while (1) {
 8000662:	e7ed      	b.n	8000640 <main+0x48>
 8000664:	080037dc 	.word	0x080037dc
 8000668:	20000098 	.word	0x20000098
 800066c:	200000dc 	.word	0x200000dc

08000670 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b094      	sub	sp, #80	; 0x50
 8000674:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000676:	f107 0320 	add.w	r3, r7, #32
 800067a:	2230      	movs	r2, #48	; 0x30
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f002 fab8 	bl	8002bf4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000694:	2300      	movs	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	4b22      	ldr	r3, [pc, #136]	; (8000724 <SystemClock_Config+0xb4>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	4a21      	ldr	r2, [pc, #132]	; (8000724 <SystemClock_Config+0xb4>)
 800069e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a2:	6413      	str	r3, [r2, #64]	; 0x40
 80006a4:	4b1f      	ldr	r3, [pc, #124]	; (8000724 <SystemClock_Config+0xb4>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b0:	2300      	movs	r3, #0
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <SystemClock_Config+0xb8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a1b      	ldr	r2, [pc, #108]	; (8000728 <SystemClock_Config+0xb8>)
 80006ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006be:	6013      	str	r3, [r2, #0]
 80006c0:	4b19      	ldr	r3, [pc, #100]	; (8000728 <SystemClock_Config+0xb8>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006cc:	2302      	movs	r3, #2
 80006ce:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d0:	2301      	movs	r3, #1
 80006d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d4:	2310      	movs	r3, #16
 80006d6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d8:	2300      	movs	r3, #0
 80006da:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 f9ad 	bl	8001a40 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x80>
		Error_Handler();
 80006ec:	f000 f8d0 	bl	8000890 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f001 fc10 	bl	8001f30 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xaa>
		Error_Handler();
 8000716:	f000 f8bb 	bl	8000890 <Error_Handler>
	}
}
 800071a:	bf00      	nop
 800071c:	3750      	adds	r7, #80	; 0x50
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000730:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_I2C1_Init+0x54>)
 8000732:	4a14      	ldr	r2, [pc, #80]	; (8000784 <MX_I2C1_Init+0x58>)
 8000734:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 50000;
 8000736:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MX_I2C1_Init+0x54>)
 8000738:	f24c 3250 	movw	r2, #50000	; 0xc350
 800073c:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <MX_I2C1_Init+0x54>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000744:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_I2C1_Init+0x54>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <MX_I2C1_Init+0x54>)
 800074c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000750:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_I2C1_Init+0x54>)
 8000754:	2200      	movs	r2, #0
 8000756:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_I2C1_Init+0x54>)
 800075a:	2200      	movs	r2, #0
 800075c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_I2C1_Init+0x54>)
 8000760:	2200      	movs	r2, #0
 8000762:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_I2C1_Init+0x54>)
 8000766:	2200      	movs	r2, #0
 8000768:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_I2C1_Init+0x54>)
 800076c:	f000 fd1c 	bl	80011a8 <HAL_I2C_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_I2C1_Init+0x4e>
		Error_Handler();
 8000776:	f000 f88b 	bl	8000890 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200000dc 	.word	0x200000dc
 8000784:	40005400 	.word	0x40005400

08000788 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_USART3_UART_Init+0x4c>)
 800078e:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <MX_USART3_UART_Init+0x50>)
 8000790:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_USART3_UART_Init+0x4c>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_USART3_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_USART3_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_USART3_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_USART3_UART_Init+0x4c>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_USART3_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_USART3_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_USART3_UART_Init+0x4c>)
 80007c0:	f001 fd86 	bl	80022d0 <HAL_UART_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_USART3_UART_Init+0x46>
		Error_Handler();
 80007ca:	f000 f861 	bl	8000890 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000098 	.word	0x20000098
 80007d8:	40004800 	.word	0x40004800

080007dc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	4b23      	ldr	r3, [pc, #140]	; (8000884 <MX_GPIO_Init+0xa8>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a22      	ldr	r2, [pc, #136]	; (8000884 <MX_GPIO_Init+0xa8>)
 80007fc:	f043 0308 	orr.w	r3, r3, #8
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b20      	ldr	r3, [pc, #128]	; (8000884 <MX_GPIO_Init+0xa8>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0308 	and.w	r3, r3, #8
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <MX_GPIO_Init+0xa8>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a1b      	ldr	r2, [pc, #108]	; (8000884 <MX_GPIO_Init+0xa8>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b19      	ldr	r3, [pc, #100]	; (8000884 <MX_GPIO_Init+0xa8>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000830:	4815      	ldr	r0, [pc, #84]	; (8000888 <MX_GPIO_Init+0xac>)
 8000832:	f000 fc9f 	bl	8001174 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2180      	movs	r1, #128	; 0x80
 800083a:	4814      	ldr	r0, [pc, #80]	; (800088c <MX_GPIO_Init+0xb0>)
 800083c:	f000 fc9a 	bl	8001174 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PD15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000840:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000844:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	4619      	mov	r1, r3
 8000858:	480b      	ldr	r0, [pc, #44]	; (8000888 <MX_GPIO_Init+0xac>)
 800085a:	f000 faef 	bl	8000e3c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 800085e:	2380      	movs	r3, #128	; 0x80
 8000860:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000862:	2301      	movs	r3, #1
 8000864:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	4619      	mov	r1, r3
 8000874:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_GPIO_Init+0xb0>)
 8000876:	f000 fae1 	bl	8000e3c <HAL_GPIO_Init>

}
 800087a:	bf00      	nop
 800087c:	3720      	adds	r7, #32
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800
 8000888:	40020c00 	.word	0x40020c00
 800088c:	40020400 	.word	0x40020400

08000890 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000898:	e7fe      	b.n	8000898 <Error_Handler+0x8>
	...

0800089c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <HAL_MspInit+0x4c>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	4a0f      	ldr	r2, [pc, #60]	; (80008e8 <HAL_MspInit+0x4c>)
 80008ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b0:	6453      	str	r3, [r2, #68]	; 0x44
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <HAL_MspInit+0x4c>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <HAL_MspInit+0x4c>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <HAL_MspInit+0x4c>)
 80008c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008cc:	6413      	str	r3, [r2, #64]	; 0x40
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_MspInit+0x4c>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a19      	ldr	r2, [pc, #100]	; (8000970 <HAL_I2C_MspInit+0x84>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d12c      	bne.n	8000968 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	4b18      	ldr	r3, [pc, #96]	; (8000974 <HAL_I2C_MspInit+0x88>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a17      	ldr	r2, [pc, #92]	; (8000974 <HAL_I2C_MspInit+0x88>)
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <HAL_I2C_MspInit+0x88>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800092a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800092e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000930:	2312      	movs	r3, #18
 8000932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000938:	2303      	movs	r3, #3
 800093a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800093c:	2304      	movs	r3, #4
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4619      	mov	r1, r3
 8000946:	480c      	ldr	r0, [pc, #48]	; (8000978 <HAL_I2C_MspInit+0x8c>)
 8000948:	f000 fa78 	bl	8000e3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <HAL_I2C_MspInit+0x88>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	4a07      	ldr	r2, [pc, #28]	; (8000974 <HAL_I2C_MspInit+0x88>)
 8000956:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800095a:	6413      	str	r3, [r2, #64]	; 0x40
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <HAL_I2C_MspInit+0x88>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000968:	bf00      	nop
 800096a:	3728      	adds	r7, #40	; 0x28
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40005400 	.word	0x40005400
 8000974:	40023800 	.word	0x40023800
 8000978:	40020400 	.word	0x40020400

0800097c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a19      	ldr	r2, [pc, #100]	; (8000a00 <HAL_UART_MspInit+0x84>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d12c      	bne.n	80009f8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	4a17      	ldr	r2, [pc, #92]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009ac:	6413      	str	r3, [r2, #64]	; 0x40
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a10      	ldr	r2, [pc, #64]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009c4:	f043 0308 	orr.w	r3, r3, #8
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0308 	and.w	r3, r3, #8
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e4:	2303      	movs	r3, #3
 80009e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009e8:	2307      	movs	r3, #7
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4619      	mov	r1, r3
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <HAL_UART_MspInit+0x8c>)
 80009f4:	f000 fa22 	bl	8000e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009f8:	bf00      	nop
 80009fa:	3728      	adds	r7, #40	; 0x28
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40004800 	.word	0x40004800
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020c00 	.word	0x40020c00

08000a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <NMI_Handler+0x4>

08000a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <HardFault_Handler+0x4>

08000a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <MemManage_Handler+0x4>

08000a1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <BusFault_Handler+0x4>

08000a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <UsageFault_Handler+0x4>

08000a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a58:	f000 f8c6 	bl	8000be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a68:	4a14      	ldr	r2, [pc, #80]	; (8000abc <_sbrk+0x5c>)
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <_sbrk+0x60>)
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a74:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <_sbrk+0x64>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d102      	bne.n	8000a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <_sbrk+0x64>)
 8000a7e:	4a12      	ldr	r2, [pc, #72]	; (8000ac8 <_sbrk+0x68>)
 8000a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <_sbrk+0x64>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4413      	add	r3, r2
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d207      	bcs.n	8000aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a90:	f002 f878 	bl	8002b84 <__errno>
 8000a94:	4603      	mov	r3, r0
 8000a96:	220c      	movs	r2, #12
 8000a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9e:	e009      	b.n	8000ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <_sbrk+0x64>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aa6:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <_sbrk+0x64>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	4a05      	ldr	r2, [pc, #20]	; (8000ac4 <_sbrk+0x64>)
 8000ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3718      	adds	r7, #24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20020000 	.word	0x20020000
 8000ac0:	00000400 	.word	0x00000400
 8000ac4:	2000008c 	.word	0x2000008c
 8000ac8:	20000148 	.word	0x20000148

08000acc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <SystemInit+0x20>)
 8000ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad6:	4a05      	ldr	r2, [pc, #20]	; (8000aec <SystemInit+0x20>)
 8000ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000af0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000af4:	480d      	ldr	r0, [pc, #52]	; (8000b2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000af6:	490e      	ldr	r1, [pc, #56]	; (8000b30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000af8:	4a0e      	ldr	r2, [pc, #56]	; (8000b34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000afc:	e002      	b.n	8000b04 <LoopCopyDataInit>

08000afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b02:	3304      	adds	r3, #4

08000b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b08:	d3f9      	bcc.n	8000afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0a:	4a0b      	ldr	r2, [pc, #44]	; (8000b38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b0c:	4c0b      	ldr	r4, [pc, #44]	; (8000b3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b10:	e001      	b.n	8000b16 <LoopFillZerobss>

08000b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b14:	3204      	adds	r2, #4

08000b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b18:	d3fb      	bcc.n	8000b12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b1a:	f7ff ffd7 	bl	8000acc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b1e:	f002 f837 	bl	8002b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b22:	f7ff fd69 	bl	80005f8 <main>
  bx  lr    
 8000b26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b30:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b34:	08003a08 	.word	0x08003a08
  ldr r2, =_sbss
 8000b38:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b3c:	20000148 	.word	0x20000148

08000b40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b40:	e7fe      	b.n	8000b40 <ADC_IRQHandler>
	...

08000b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <HAL_Init+0x40>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0d      	ldr	r2, [pc, #52]	; (8000b84 <HAL_Init+0x40>)
 8000b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b54:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <HAL_Init+0x40>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <HAL_Init+0x40>)
 8000b5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <HAL_Init+0x40>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <HAL_Init+0x40>)
 8000b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6c:	2003      	movs	r0, #3
 8000b6e:	f000 f931 	bl	8000dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b72:	200f      	movs	r0, #15
 8000b74:	f000 f808 	bl	8000b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b78:	f7ff fe90 	bl	800089c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40023c00 	.word	0x40023c00

08000b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_InitTick+0x54>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <HAL_InitTick+0x58>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 f93b 	bl	8000e22 <HAL_SYSTICK_Config>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e00e      	b.n	8000bd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b0f      	cmp	r3, #15
 8000bba:	d80a      	bhi.n	8000bd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	f000 f911 	bl	8000dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc8:	4a06      	ldr	r2, [pc, #24]	; (8000be4 <HAL_InitTick+0x5c>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e000      	b.n	8000bd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000008 	.word	0x20000008
 8000be4:	20000004 	.word	0x20000004

08000be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_IncTick+0x20>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_IncTick+0x24>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <HAL_IncTick+0x24>)
 8000bfa:	6013      	str	r3, [r2, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	20000130 	.word	0x20000130

08000c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return uwTick;
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <HAL_GetTick+0x14>)
 8000c16:	681b      	ldr	r3, [r3, #0]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000130 	.word	0x20000130

08000c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c30:	f7ff ffee 	bl	8000c10 <HAL_GetTick>
 8000c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c40:	d005      	beq.n	8000c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c42:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <HAL_Delay+0x44>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c4e:	bf00      	nop
 8000c50:	f7ff ffde 	bl	8000c10 <HAL_GetTick>
 8000c54:	4602      	mov	r2, r0
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d8f7      	bhi.n	8000c50 <HAL_Delay+0x28>
  {
  }
}
 8000c60:	bf00      	nop
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000008 	.word	0x20000008

08000c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca2:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	60d3      	str	r3, [r2, #12]
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	0a1b      	lsrs	r3, r3, #8
 8000cc2:	f003 0307 	and.w	r3, r3, #7
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	6039      	str	r1, [r7, #0]
 8000cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db0a      	blt.n	8000cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	490c      	ldr	r1, [pc, #48]	; (8000d20 <__NVIC_SetPriority+0x4c>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	0112      	lsls	r2, r2, #4
 8000cf4:	b2d2      	uxtb	r2, r2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cfc:	e00a      	b.n	8000d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4908      	ldr	r1, [pc, #32]	; (8000d24 <__NVIC_SetPriority+0x50>)
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	f003 030f 	and.w	r3, r3, #15
 8000d0a:	3b04      	subs	r3, #4
 8000d0c:	0112      	lsls	r2, r2, #4
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	440b      	add	r3, r1
 8000d12:	761a      	strb	r2, [r3, #24]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000e100 	.word	0xe000e100
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b089      	sub	sp, #36	; 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f1c3 0307 	rsb	r3, r3, #7
 8000d42:	2b04      	cmp	r3, #4
 8000d44:	bf28      	it	cs
 8000d46:	2304      	movcs	r3, #4
 8000d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	2b06      	cmp	r3, #6
 8000d50:	d902      	bls.n	8000d58 <NVIC_EncodePriority+0x30>
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3b03      	subs	r3, #3
 8000d56:	e000      	b.n	8000d5a <NVIC_EncodePriority+0x32>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43da      	mvns	r2, r3
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d70:	f04f 31ff 	mov.w	r1, #4294967295
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7a:	43d9      	mvns	r1, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	4313      	orrs	r3, r2
         );
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3724      	adds	r7, #36	; 0x24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
	...

08000d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000da0:	d301      	bcc.n	8000da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da2:	2301      	movs	r3, #1
 8000da4:	e00f      	b.n	8000dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da6:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <SysTick_Config+0x40>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dae:	210f      	movs	r1, #15
 8000db0:	f04f 30ff 	mov.w	r0, #4294967295
 8000db4:	f7ff ff8e 	bl	8000cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <SysTick_Config+0x40>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dbe:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <SysTick_Config+0x40>)
 8000dc0:	2207      	movs	r2, #7
 8000dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	e000e010 	.word	0xe000e010

08000dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff ff47 	bl	8000c70 <__NVIC_SetPriorityGrouping>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b086      	sub	sp, #24
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	4603      	mov	r3, r0
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
 8000df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dfc:	f7ff ff5c 	bl	8000cb8 <__NVIC_GetPriorityGrouping>
 8000e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	68b9      	ldr	r1, [r7, #8]
 8000e06:	6978      	ldr	r0, [r7, #20]
 8000e08:	f7ff ff8e 	bl	8000d28 <NVIC_EncodePriority>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e12:	4611      	mov	r1, r2
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff5d 	bl	8000cd4 <__NVIC_SetPriority>
}
 8000e1a:	bf00      	nop
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff ffb0 	bl	8000d90 <SysTick_Config>
 8000e30:	4603      	mov	r3, r0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
 8000e56:	e16b      	b.n	8001130 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e58:	2201      	movs	r2, #1
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	f040 815a 	bne.w	800112a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d005      	beq.n	8000e8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d130      	bne.n	8000ef0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	2203      	movs	r2, #3
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	68da      	ldr	r2, [r3, #12]
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	091b      	lsrs	r3, r3, #4
 8000eda:	f003 0201 	and.w	r2, r3, #1
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	d017      	beq.n	8000f2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	2203      	movs	r2, #3
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	689a      	ldr	r2, [r3, #8]
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d123      	bne.n	8000f80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	08da      	lsrs	r2, r3, #3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3208      	adds	r2, #8
 8000f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	f003 0307 	and.w	r3, r3, #7
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	220f      	movs	r2, #15
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	691a      	ldr	r2, [r3, #16]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	08da      	lsrs	r2, r3, #3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3208      	adds	r2, #8
 8000f7a:	69b9      	ldr	r1, [r7, #24]
 8000f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0203 	and.w	r2, r3, #3
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 80b4 	beq.w	800112a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b60      	ldr	r3, [pc, #384]	; (8001148 <HAL_GPIO_Init+0x30c>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	4a5f      	ldr	r2, [pc, #380]	; (8001148 <HAL_GPIO_Init+0x30c>)
 8000fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd2:	4b5d      	ldr	r3, [pc, #372]	; (8001148 <HAL_GPIO_Init+0x30c>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fde:	4a5b      	ldr	r2, [pc, #364]	; (800114c <HAL_GPIO_Init+0x310>)
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	089b      	lsrs	r3, r3, #2
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	220f      	movs	r2, #15
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4013      	ands	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a52      	ldr	r2, [pc, #328]	; (8001150 <HAL_GPIO_Init+0x314>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d02b      	beq.n	8001062 <HAL_GPIO_Init+0x226>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a51      	ldr	r2, [pc, #324]	; (8001154 <HAL_GPIO_Init+0x318>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d025      	beq.n	800105e <HAL_GPIO_Init+0x222>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a50      	ldr	r2, [pc, #320]	; (8001158 <HAL_GPIO_Init+0x31c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d01f      	beq.n	800105a <HAL_GPIO_Init+0x21e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4f      	ldr	r2, [pc, #316]	; (800115c <HAL_GPIO_Init+0x320>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d019      	beq.n	8001056 <HAL_GPIO_Init+0x21a>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4e      	ldr	r2, [pc, #312]	; (8001160 <HAL_GPIO_Init+0x324>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d013      	beq.n	8001052 <HAL_GPIO_Init+0x216>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a4d      	ldr	r2, [pc, #308]	; (8001164 <HAL_GPIO_Init+0x328>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d00d      	beq.n	800104e <HAL_GPIO_Init+0x212>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a4c      	ldr	r2, [pc, #304]	; (8001168 <HAL_GPIO_Init+0x32c>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d007      	beq.n	800104a <HAL_GPIO_Init+0x20e>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4b      	ldr	r2, [pc, #300]	; (800116c <HAL_GPIO_Init+0x330>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d101      	bne.n	8001046 <HAL_GPIO_Init+0x20a>
 8001042:	2307      	movs	r3, #7
 8001044:	e00e      	b.n	8001064 <HAL_GPIO_Init+0x228>
 8001046:	2308      	movs	r3, #8
 8001048:	e00c      	b.n	8001064 <HAL_GPIO_Init+0x228>
 800104a:	2306      	movs	r3, #6
 800104c:	e00a      	b.n	8001064 <HAL_GPIO_Init+0x228>
 800104e:	2305      	movs	r3, #5
 8001050:	e008      	b.n	8001064 <HAL_GPIO_Init+0x228>
 8001052:	2304      	movs	r3, #4
 8001054:	e006      	b.n	8001064 <HAL_GPIO_Init+0x228>
 8001056:	2303      	movs	r3, #3
 8001058:	e004      	b.n	8001064 <HAL_GPIO_Init+0x228>
 800105a:	2302      	movs	r3, #2
 800105c:	e002      	b.n	8001064 <HAL_GPIO_Init+0x228>
 800105e:	2301      	movs	r3, #1
 8001060:	e000      	b.n	8001064 <HAL_GPIO_Init+0x228>
 8001062:	2300      	movs	r3, #0
 8001064:	69fa      	ldr	r2, [r7, #28]
 8001066:	f002 0203 	and.w	r2, r2, #3
 800106a:	0092      	lsls	r2, r2, #2
 800106c:	4093      	lsls	r3, r2
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001074:	4935      	ldr	r1, [pc, #212]	; (800114c <HAL_GPIO_Init+0x310>)
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	089b      	lsrs	r3, r3, #2
 800107a:	3302      	adds	r3, #2
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001082:	4b3b      	ldr	r3, [pc, #236]	; (8001170 <HAL_GPIO_Init+0x334>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010a6:	4a32      	ldr	r2, [pc, #200]	; (8001170 <HAL_GPIO_Init+0x334>)
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010ac:	4b30      	ldr	r3, [pc, #192]	; (8001170 <HAL_GPIO_Init+0x334>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010d0:	4a27      	ldr	r2, [pc, #156]	; (8001170 <HAL_GPIO_Init+0x334>)
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010d6:	4b26      	ldr	r3, [pc, #152]	; (8001170 <HAL_GPIO_Init+0x334>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010fa:	4a1d      	ldr	r2, [pc, #116]	; (8001170 <HAL_GPIO_Init+0x334>)
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001100:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <HAL_GPIO_Init+0x334>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001124:	4a12      	ldr	r2, [pc, #72]	; (8001170 <HAL_GPIO_Init+0x334>)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3301      	adds	r3, #1
 800112e:	61fb      	str	r3, [r7, #28]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	2b0f      	cmp	r3, #15
 8001134:	f67f ae90 	bls.w	8000e58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3724      	adds	r7, #36	; 0x24
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800
 800114c:	40013800 	.word	0x40013800
 8001150:	40020000 	.word	0x40020000
 8001154:	40020400 	.word	0x40020400
 8001158:	40020800 	.word	0x40020800
 800115c:	40020c00 	.word	0x40020c00
 8001160:	40021000 	.word	0x40021000
 8001164:	40021400 	.word	0x40021400
 8001168:	40021800 	.word	0x40021800
 800116c:	40021c00 	.word	0x40021c00
 8001170:	40013c00 	.word	0x40013c00

08001174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	807b      	strh	r3, [r7, #2]
 8001180:	4613      	mov	r3, r2
 8001182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001184:	787b      	ldrb	r3, [r7, #1]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800118a:	887a      	ldrh	r2, [r7, #2]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001190:	e003      	b.n	800119a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001192:	887b      	ldrh	r3, [r7, #2]
 8001194:	041a      	lsls	r2, r3, #16
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	619a      	str	r2, [r3, #24]
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d101      	bne.n	80011ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e12b      	b.n	8001412 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d106      	bne.n	80011d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff fb8c 	bl	80008ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2224      	movs	r2, #36	; 0x24
 80011d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0201 	bic.w	r2, r2, #1
 80011ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800120a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800120c:	f001 f838 	bl	8002280 <HAL_RCC_GetPCLK1Freq>
 8001210:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	4a81      	ldr	r2, [pc, #516]	; (800141c <HAL_I2C_Init+0x274>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d807      	bhi.n	800122c <HAL_I2C_Init+0x84>
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4a80      	ldr	r2, [pc, #512]	; (8001420 <HAL_I2C_Init+0x278>)
 8001220:	4293      	cmp	r3, r2
 8001222:	bf94      	ite	ls
 8001224:	2301      	movls	r3, #1
 8001226:	2300      	movhi	r3, #0
 8001228:	b2db      	uxtb	r3, r3
 800122a:	e006      	b.n	800123a <HAL_I2C_Init+0x92>
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4a7d      	ldr	r2, [pc, #500]	; (8001424 <HAL_I2C_Init+0x27c>)
 8001230:	4293      	cmp	r3, r2
 8001232:	bf94      	ite	ls
 8001234:	2301      	movls	r3, #1
 8001236:	2300      	movhi	r3, #0
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e0e7      	b.n	8001412 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	4a78      	ldr	r2, [pc, #480]	; (8001428 <HAL_I2C_Init+0x280>)
 8001246:	fba2 2303 	umull	r2, r3, r2, r3
 800124a:	0c9b      	lsrs	r3, r3, #18
 800124c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	68ba      	ldr	r2, [r7, #8]
 800125e:	430a      	orrs	r2, r1
 8001260:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	4a6a      	ldr	r2, [pc, #424]	; (800141c <HAL_I2C_Init+0x274>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d802      	bhi.n	800127c <HAL_I2C_Init+0xd4>
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	3301      	adds	r3, #1
 800127a:	e009      	b.n	8001290 <HAL_I2C_Init+0xe8>
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001282:	fb02 f303 	mul.w	r3, r2, r3
 8001286:	4a69      	ldr	r2, [pc, #420]	; (800142c <HAL_I2C_Init+0x284>)
 8001288:	fba2 2303 	umull	r2, r3, r2, r3
 800128c:	099b      	lsrs	r3, r3, #6
 800128e:	3301      	adds	r3, #1
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	6812      	ldr	r2, [r2, #0]
 8001294:	430b      	orrs	r3, r1
 8001296:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80012a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	495c      	ldr	r1, [pc, #368]	; (800141c <HAL_I2C_Init+0x274>)
 80012ac:	428b      	cmp	r3, r1
 80012ae:	d819      	bhi.n	80012e4 <HAL_I2C_Init+0x13c>
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	1e59      	subs	r1, r3, #1
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80012be:	1c59      	adds	r1, r3, #1
 80012c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80012c4:	400b      	ands	r3, r1
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d00a      	beq.n	80012e0 <HAL_I2C_Init+0x138>
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	1e59      	subs	r1, r3, #1
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80012d8:	3301      	adds	r3, #1
 80012da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012de:	e051      	b.n	8001384 <HAL_I2C_Init+0x1dc>
 80012e0:	2304      	movs	r3, #4
 80012e2:	e04f      	b.n	8001384 <HAL_I2C_Init+0x1dc>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d111      	bne.n	8001310 <HAL_I2C_Init+0x168>
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	1e58      	subs	r0, r3, #1
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6859      	ldr	r1, [r3, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	440b      	add	r3, r1
 80012fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80012fe:	3301      	adds	r3, #1
 8001300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001304:	2b00      	cmp	r3, #0
 8001306:	bf0c      	ite	eq
 8001308:	2301      	moveq	r3, #1
 800130a:	2300      	movne	r3, #0
 800130c:	b2db      	uxtb	r3, r3
 800130e:	e012      	b.n	8001336 <HAL_I2C_Init+0x18e>
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	1e58      	subs	r0, r3, #1
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6859      	ldr	r1, [r3, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	440b      	add	r3, r1
 800131e:	0099      	lsls	r1, r3, #2
 8001320:	440b      	add	r3, r1
 8001322:	fbb0 f3f3 	udiv	r3, r0, r3
 8001326:	3301      	adds	r3, #1
 8001328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800132c:	2b00      	cmp	r3, #0
 800132e:	bf0c      	ite	eq
 8001330:	2301      	moveq	r3, #1
 8001332:	2300      	movne	r3, #0
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_I2C_Init+0x196>
 800133a:	2301      	movs	r3, #1
 800133c:	e022      	b.n	8001384 <HAL_I2C_Init+0x1dc>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d10e      	bne.n	8001364 <HAL_I2C_Init+0x1bc>
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	1e58      	subs	r0, r3, #1
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6859      	ldr	r1, [r3, #4]
 800134e:	460b      	mov	r3, r1
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	440b      	add	r3, r1
 8001354:	fbb0 f3f3 	udiv	r3, r0, r3
 8001358:	3301      	adds	r3, #1
 800135a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800135e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001362:	e00f      	b.n	8001384 <HAL_I2C_Init+0x1dc>
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	1e58      	subs	r0, r3, #1
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6859      	ldr	r1, [r3, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	440b      	add	r3, r1
 8001372:	0099      	lsls	r1, r3, #2
 8001374:	440b      	add	r3, r1
 8001376:	fbb0 f3f3 	udiv	r3, r0, r3
 800137a:	3301      	adds	r3, #1
 800137c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001380:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001384:	6879      	ldr	r1, [r7, #4]
 8001386:	6809      	ldr	r1, [r1, #0]
 8001388:	4313      	orrs	r3, r2
 800138a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69da      	ldr	r2, [r3, #28]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a1b      	ldr	r3, [r3, #32]
 800139e:	431a      	orrs	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	430a      	orrs	r2, r1
 80013a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80013b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6911      	ldr	r1, [r2, #16]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	68d2      	ldr	r2, [r2, #12]
 80013be:	4311      	orrs	r1, r2
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	6812      	ldr	r2, [r2, #0]
 80013c4:	430b      	orrs	r3, r1
 80013c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	695a      	ldr	r2, [r3, #20]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	431a      	orrs	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	430a      	orrs	r2, r1
 80013e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f042 0201 	orr.w	r2, r2, #1
 80013f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2220      	movs	r2, #32
 80013fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	000186a0 	.word	0x000186a0
 8001420:	001e847f 	.word	0x001e847f
 8001424:	003d08ff 	.word	0x003d08ff
 8001428:	431bde83 	.word	0x431bde83
 800142c:	10624dd3 	.word	0x10624dd3

08001430 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af02      	add	r7, sp, #8
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	607a      	str	r2, [r7, #4]
 800143a:	461a      	mov	r2, r3
 800143c:	460b      	mov	r3, r1
 800143e:	817b      	strh	r3, [r7, #10]
 8001440:	4613      	mov	r3, r2
 8001442:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001444:	f7ff fbe4 	bl	8000c10 <HAL_GetTick>
 8001448:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b20      	cmp	r3, #32
 8001454:	f040 80e0 	bne.w	8001618 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	2319      	movs	r3, #25
 800145e:	2201      	movs	r2, #1
 8001460:	4970      	ldr	r1, [pc, #448]	; (8001624 <HAL_I2C_Master_Transmit+0x1f4>)
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f000 f964 	bl	8001730 <I2C_WaitOnFlagUntilTimeout>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800146e:	2302      	movs	r3, #2
 8001470:	e0d3      	b.n	800161a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001478:	2b01      	cmp	r3, #1
 800147a:	d101      	bne.n	8001480 <HAL_I2C_Master_Transmit+0x50>
 800147c:	2302      	movs	r3, #2
 800147e:	e0cc      	b.n	800161a <HAL_I2C_Master_Transmit+0x1ea>
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b01      	cmp	r3, #1
 8001494:	d007      	beq.n	80014a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f042 0201 	orr.w	r2, r2, #1
 80014a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2221      	movs	r2, #33	; 0x21
 80014ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2210      	movs	r2, #16
 80014c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2200      	movs	r2, #0
 80014ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	893a      	ldrh	r2, [r7, #8]
 80014d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014dc:	b29a      	uxth	r2, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	4a50      	ldr	r2, [pc, #320]	; (8001628 <HAL_I2C_Master_Transmit+0x1f8>)
 80014e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80014e8:	8979      	ldrh	r1, [r7, #10]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	6a3a      	ldr	r2, [r7, #32]
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f000 f89c 	bl	800162c <I2C_MasterRequestWrite>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e08d      	b.n	800161a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	695b      	ldr	r3, [r3, #20]
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001514:	e066      	b.n	80015e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	6a39      	ldr	r1, [r7, #32]
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f000 f9de 	bl	80018dc <I2C_WaitOnTXEFlagUntilTimeout>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00d      	beq.n	8001542 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	2b04      	cmp	r3, #4
 800152c:	d107      	bne.n	800153e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800153c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e06b      	b.n	800161a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001546:	781a      	ldrb	r2, [r3, #0]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001552:	1c5a      	adds	r2, r3, #1
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800155c:	b29b      	uxth	r3, r3
 800155e:	3b01      	subs	r3, #1
 8001560:	b29a      	uxth	r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800156a:	3b01      	subs	r3, #1
 800156c:	b29a      	uxth	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	695b      	ldr	r3, [r3, #20]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b04      	cmp	r3, #4
 800157e:	d11b      	bne.n	80015b8 <HAL_I2C_Master_Transmit+0x188>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001584:	2b00      	cmp	r3, #0
 8001586:	d017      	beq.n	80015b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158c:	781a      	ldrb	r2, [r3, #0]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001598:	1c5a      	adds	r2, r3, #1
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	3b01      	subs	r3, #1
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b0:	3b01      	subs	r3, #1
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	6a39      	ldr	r1, [r7, #32]
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	f000 f9ce 	bl	800195e <I2C_WaitOnBTFFlagUntilTimeout>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d00d      	beq.n	80015e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	2b04      	cmp	r3, #4
 80015ce:	d107      	bne.n	80015e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e01a      	b.n	800161a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d194      	bne.n	8001516 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2220      	movs	r2, #32
 8001600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	e000      	b.n	800161a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001618:	2302      	movs	r3, #2
  }
}
 800161a:	4618      	mov	r0, r3
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	00100002 	.word	0x00100002
 8001628:	ffff0000 	.word	0xffff0000

0800162c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af02      	add	r7, sp, #8
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	607a      	str	r2, [r7, #4]
 8001636:	603b      	str	r3, [r7, #0]
 8001638:	460b      	mov	r3, r1
 800163a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001640:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	2b08      	cmp	r3, #8
 8001646:	d006      	beq.n	8001656 <I2C_MasterRequestWrite+0x2a>
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d003      	beq.n	8001656 <I2C_MasterRequestWrite+0x2a>
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001654:	d108      	bne.n	8001668 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	e00b      	b.n	8001680 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166c:	2b12      	cmp	r3, #18
 800166e:	d107      	bne.n	8001680 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800167e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f000 f84f 	bl	8001730 <I2C_WaitOnFlagUntilTimeout>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d00d      	beq.n	80016b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016a6:	d103      	bne.n	80016b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e035      	b.n	8001720 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016bc:	d108      	bne.n	80016d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80016be:	897b      	ldrh	r3, [r7, #10]
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	461a      	mov	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80016cc:	611a      	str	r2, [r3, #16]
 80016ce:	e01b      	b.n	8001708 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80016d0:	897b      	ldrh	r3, [r7, #10]
 80016d2:	11db      	asrs	r3, r3, #7
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	f003 0306 	and.w	r3, r3, #6
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	f063 030f 	orn	r3, r3, #15
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	490e      	ldr	r1, [pc, #56]	; (8001728 <I2C_MasterRequestWrite+0xfc>)
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f000 f875 	bl	80017de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e010      	b.n	8001720 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80016fe:	897b      	ldrh	r3, [r7, #10]
 8001700:	b2da      	uxtb	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	4907      	ldr	r1, [pc, #28]	; (800172c <I2C_MasterRequestWrite+0x100>)
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f000 f865 	bl	80017de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e000      	b.n	8001720 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	00010008 	.word	0x00010008
 800172c:	00010002 	.word	0x00010002

08001730 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	4613      	mov	r3, r2
 800173e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001740:	e025      	b.n	800178e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001748:	d021      	beq.n	800178e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800174a:	f7ff fa61 	bl	8000c10 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	d302      	bcc.n	8001760 <I2C_WaitOnFlagUntilTimeout+0x30>
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d116      	bne.n	800178e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2200      	movs	r2, #0
 8001764:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2220      	movs	r2, #32
 800176a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f043 0220 	orr.w	r2, r3, #32
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e023      	b.n	80017d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	0c1b      	lsrs	r3, r3, #16
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b01      	cmp	r3, #1
 8001796:	d10d      	bne.n	80017b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	43da      	mvns	r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	4013      	ands	r3, r2
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	bf0c      	ite	eq
 80017aa:	2301      	moveq	r3, #1
 80017ac:	2300      	movne	r3, #0
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	461a      	mov	r2, r3
 80017b2:	e00c      	b.n	80017ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	43da      	mvns	r2, r3
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	4013      	ands	r3, r2
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	bf0c      	ite	eq
 80017c6:	2301      	moveq	r3, #1
 80017c8:	2300      	movne	r3, #0
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	461a      	mov	r2, r3
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d0b6      	beq.n	8001742 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b084      	sub	sp, #16
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	60f8      	str	r0, [r7, #12]
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
 80017ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80017ec:	e051      	b.n	8001892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fc:	d123      	bne.n	8001846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800180c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001816:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2200      	movs	r2, #0
 800181c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2220      	movs	r2, #32
 8001822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f043 0204 	orr.w	r2, r3, #4
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e046      	b.n	80018d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800184c:	d021      	beq.n	8001892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800184e:	f7ff f9df 	bl	8000c10 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	429a      	cmp	r2, r3
 800185c:	d302      	bcc.n	8001864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d116      	bne.n	8001892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2200      	movs	r2, #0
 8001868:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2220      	movs	r2, #32
 800186e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f043 0220 	orr.w	r2, r3, #32
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e020      	b.n	80018d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	0c1b      	lsrs	r3, r3, #16
 8001896:	b2db      	uxtb	r3, r3
 8001898:	2b01      	cmp	r3, #1
 800189a:	d10c      	bne.n	80018b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	43da      	mvns	r2, r3
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	4013      	ands	r3, r2
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	bf14      	ite	ne
 80018ae:	2301      	movne	r3, #1
 80018b0:	2300      	moveq	r3, #0
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	e00b      	b.n	80018ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	43da      	mvns	r2, r3
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	4013      	ands	r3, r2
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	bf14      	ite	ne
 80018c8:	2301      	movne	r3, #1
 80018ca:	2300      	moveq	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d18d      	bne.n	80017ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018e8:	e02d      	b.n	8001946 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f000 f878 	bl	80019e0 <I2C_IsAcknowledgeFailed>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e02d      	b.n	8001956 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001900:	d021      	beq.n	8001946 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001902:	f7ff f985 	bl	8000c10 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	68ba      	ldr	r2, [r7, #8]
 800190e:	429a      	cmp	r2, r3
 8001910:	d302      	bcc.n	8001918 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d116      	bne.n	8001946 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2200      	movs	r2, #0
 800191c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2220      	movs	r2, #32
 8001922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f043 0220 	orr.w	r2, r3, #32
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e007      	b.n	8001956 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001950:	2b80      	cmp	r3, #128	; 0x80
 8001952:	d1ca      	bne.n	80018ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b084      	sub	sp, #16
 8001962:	af00      	add	r7, sp, #0
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800196a:	e02d      	b.n	80019c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	f000 f837 	bl	80019e0 <I2C_IsAcknowledgeFailed>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e02d      	b.n	80019d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001982:	d021      	beq.n	80019c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001984:	f7ff f944 	bl	8000c10 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	429a      	cmp	r2, r3
 8001992:	d302      	bcc.n	800199a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d116      	bne.n	80019c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2200      	movs	r2, #0
 800199e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2220      	movs	r2, #32
 80019a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	f043 0220 	orr.w	r2, r3, #32
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e007      	b.n	80019d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	d1ca      	bne.n	800196c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f6:	d11b      	bne.n	8001a30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	f043 0204 	orr.w	r2, r3, #4
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e000      	b.n	8001a32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
	...

08001a40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e264      	b.n	8001f1c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d075      	beq.n	8001b4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a5e:	4ba3      	ldr	r3, [pc, #652]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 030c 	and.w	r3, r3, #12
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d00c      	beq.n	8001a84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a6a:	4ba0      	ldr	r3, [pc, #640]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a72:	2b08      	cmp	r3, #8
 8001a74:	d112      	bne.n	8001a9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a76:	4b9d      	ldr	r3, [pc, #628]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a82:	d10b      	bne.n	8001a9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a84:	4b99      	ldr	r3, [pc, #612]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d05b      	beq.n	8001b48 <HAL_RCC_OscConfig+0x108>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d157      	bne.n	8001b48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e23f      	b.n	8001f1c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa4:	d106      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x74>
 8001aa6:	4b91      	ldr	r3, [pc, #580]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a90      	ldr	r2, [pc, #576]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	e01d      	b.n	8001af0 <HAL_RCC_OscConfig+0xb0>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001abc:	d10c      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x98>
 8001abe:	4b8b      	ldr	r3, [pc, #556]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a8a      	ldr	r2, [pc, #552]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001ac4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	4b88      	ldr	r3, [pc, #544]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a87      	ldr	r2, [pc, #540]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	e00b      	b.n	8001af0 <HAL_RCC_OscConfig+0xb0>
 8001ad8:	4b84      	ldr	r3, [pc, #528]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a83      	ldr	r2, [pc, #524]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	4b81      	ldr	r3, [pc, #516]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a80      	ldr	r2, [pc, #512]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d013      	beq.n	8001b20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af8:	f7ff f88a 	bl	8000c10 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b00:	f7ff f886 	bl	8000c10 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b64      	cmp	r3, #100	; 0x64
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e204      	b.n	8001f1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b12:	4b76      	ldr	r3, [pc, #472]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0xc0>
 8001b1e:	e014      	b.n	8001b4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7ff f876 	bl	8000c10 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b28:	f7ff f872 	bl	8000c10 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b64      	cmp	r3, #100	; 0x64
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e1f0      	b.n	8001f1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b3a:	4b6c      	ldr	r3, [pc, #432]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0xe8>
 8001b46:	e000      	b.n	8001b4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d063      	beq.n	8001c1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b56:	4b65      	ldr	r3, [pc, #404]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00b      	beq.n	8001b7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b62:	4b62      	ldr	r3, [pc, #392]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b6a:	2b08      	cmp	r3, #8
 8001b6c:	d11c      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b6e:	4b5f      	ldr	r3, [pc, #380]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d116      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b7a:	4b5c      	ldr	r3, [pc, #368]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d005      	beq.n	8001b92 <HAL_RCC_OscConfig+0x152>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d001      	beq.n	8001b92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e1c4      	b.n	8001f1c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b92:	4b56      	ldr	r3, [pc, #344]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	4952      	ldr	r1, [pc, #328]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba6:	e03a      	b.n	8001c1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d020      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bb0:	4b4f      	ldr	r3, [pc, #316]	; (8001cf0 <HAL_RCC_OscConfig+0x2b0>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb6:	f7ff f82b 	bl	8000c10 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bbe:	f7ff f827 	bl	8000c10 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e1a5      	b.n	8001f1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd0:	4b46      	ldr	r3, [pc, #280]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0f0      	beq.n	8001bbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bdc:	4b43      	ldr	r3, [pc, #268]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	4940      	ldr	r1, [pc, #256]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	600b      	str	r3, [r1, #0]
 8001bf0:	e015      	b.n	8001c1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bf2:	4b3f      	ldr	r3, [pc, #252]	; (8001cf0 <HAL_RCC_OscConfig+0x2b0>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf8:	f7ff f80a 	bl	8000c10 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c00:	f7ff f806 	bl	8000c10 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e184      	b.n	8001f1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c12:	4b36      	ldr	r3, [pc, #216]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f0      	bne.n	8001c00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0308 	and.w	r3, r3, #8
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d030      	beq.n	8001c8c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d016      	beq.n	8001c60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c32:	4b30      	ldr	r3, [pc, #192]	; (8001cf4 <HAL_RCC_OscConfig+0x2b4>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c38:	f7fe ffea 	bl	8000c10 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c40:	f7fe ffe6 	bl	8000c10 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e164      	b.n	8001f1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c52:	4b26      	ldr	r3, [pc, #152]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0f0      	beq.n	8001c40 <HAL_RCC_OscConfig+0x200>
 8001c5e:	e015      	b.n	8001c8c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c60:	4b24      	ldr	r3, [pc, #144]	; (8001cf4 <HAL_RCC_OscConfig+0x2b4>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c66:	f7fe ffd3 	bl	8000c10 <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c6e:	f7fe ffcf 	bl	8000c10 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e14d      	b.n	8001f1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c80:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1f0      	bne.n	8001c6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 80a0 	beq.w	8001dda <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c9e:	4b13      	ldr	r3, [pc, #76]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10f      	bne.n	8001cca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	4a0e      	ldr	r2, [pc, #56]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cba:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <HAL_RCC_OscConfig+0x2ac>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cca:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <HAL_RCC_OscConfig+0x2b8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d121      	bne.n	8001d1a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cd6:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <HAL_RCC_OscConfig+0x2b8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a07      	ldr	r2, [pc, #28]	; (8001cf8 <HAL_RCC_OscConfig+0x2b8>)
 8001cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ce2:	f7fe ff95 	bl	8000c10 <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce8:	e011      	b.n	8001d0e <HAL_RCC_OscConfig+0x2ce>
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	42470000 	.word	0x42470000
 8001cf4:	42470e80 	.word	0x42470e80
 8001cf8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cfc:	f7fe ff88 	bl	8000c10 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e106      	b.n	8001f1c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0e:	4b85      	ldr	r3, [pc, #532]	; (8001f24 <HAL_RCC_OscConfig+0x4e4>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d106      	bne.n	8001d30 <HAL_RCC_OscConfig+0x2f0>
 8001d22:	4b81      	ldr	r3, [pc, #516]	; (8001f28 <HAL_RCC_OscConfig+0x4e8>)
 8001d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d26:	4a80      	ldr	r2, [pc, #512]	; (8001f28 <HAL_RCC_OscConfig+0x4e8>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d2e:	e01c      	b.n	8001d6a <HAL_RCC_OscConfig+0x32a>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b05      	cmp	r3, #5
 8001d36:	d10c      	bne.n	8001d52 <HAL_RCC_OscConfig+0x312>
 8001d38:	4b7b      	ldr	r3, [pc, #492]	; (8001f28 <HAL_RCC_OscConfig+0x4e8>)
 8001d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3c:	4a7a      	ldr	r2, [pc, #488]	; (8001f28 <HAL_RCC_OscConfig+0x4e8>)
 8001d3e:	f043 0304 	orr.w	r3, r3, #4
 8001d42:	6713      	str	r3, [r2, #112]	; 0x70
 8001d44:	4b78      	ldr	r3, [pc, #480]	; (8001f28 <HAL_RCC_OscConfig+0x4e8>)
 8001d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d48:	4a77      	ldr	r2, [pc, #476]	; (8001f28 <HAL_RCC_OscConfig+0x4e8>)
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d50:	e00b      	b.n	8001d6a <HAL_RCC_OscConfig+0x32a>
 8001d52:	4b75      	ldr	r3, [pc, #468]	; (8001f28 <HAL_RCC_OscConfig+0x4e8>)
 8001d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d56:	4a74      	ldr	r2, [pc, #464]	; (8001f28 <HAL_RCC_OscConfig+0x4e8>)
 8001d58:	f023 0301 	bic.w	r3, r3, #1
 8001d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d5e:	4b72      	ldr	r3, [pc, #456]	; (8001f28 <HAL_RCC_OscConfig+0x4e8>)
 8001d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d62:	4a71      	ldr	r2, [pc, #452]	; (8001f28 <HAL_RCC_OscConfig+0x4e8>)
 8001d64:	f023 0304 	bic.w	r3, r3, #4
 8001d68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d015      	beq.n	8001d9e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d72:	f7fe ff4d 	bl	8000c10 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d78:	e00a      	b.n	8001d90 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d7a:	f7fe ff49 	bl	8000c10 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e0c5      	b.n	8001f1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d90:	4b65      	ldr	r3, [pc, #404]	; (8001f28 <HAL_RCC_OscConfig+0x4e8>)
 8001d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0ee      	beq.n	8001d7a <HAL_RCC_OscConfig+0x33a>
 8001d9c:	e014      	b.n	8001dc8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d9e:	f7fe ff37 	bl	8000c10 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da4:	e00a      	b.n	8001dbc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001da6:	f7fe ff33 	bl	8000c10 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e0af      	b.n	8001f1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dbc:	4b5a      	ldr	r3, [pc, #360]	; (8001f28 <HAL_RCC_OscConfig+0x4e8>)
 8001dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1ee      	bne.n	8001da6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dc8:	7dfb      	ldrb	r3, [r7, #23]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d105      	bne.n	8001dda <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dce:	4b56      	ldr	r3, [pc, #344]	; (8001f28 <HAL_RCC_OscConfig+0x4e8>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	4a55      	ldr	r2, [pc, #340]	; (8001f28 <HAL_RCC_OscConfig+0x4e8>)
 8001dd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 809b 	beq.w	8001f1a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001de4:	4b50      	ldr	r3, [pc, #320]	; (8001f28 <HAL_RCC_OscConfig+0x4e8>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 030c 	and.w	r3, r3, #12
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d05c      	beq.n	8001eaa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d141      	bne.n	8001e7c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df8:	4b4c      	ldr	r3, [pc, #304]	; (8001f2c <HAL_RCC_OscConfig+0x4ec>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfe:	f7fe ff07 	bl	8000c10 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e06:	f7fe ff03 	bl	8000c10 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e081      	b.n	8001f1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e18:	4b43      	ldr	r3, [pc, #268]	; (8001f28 <HAL_RCC_OscConfig+0x4e8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1f0      	bne.n	8001e06 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69da      	ldr	r2, [r3, #28]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e32:	019b      	lsls	r3, r3, #6
 8001e34:	431a      	orrs	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3a:	085b      	lsrs	r3, r3, #1
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	041b      	lsls	r3, r3, #16
 8001e40:	431a      	orrs	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e46:	061b      	lsls	r3, r3, #24
 8001e48:	4937      	ldr	r1, [pc, #220]	; (8001f28 <HAL_RCC_OscConfig+0x4e8>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e4e:	4b37      	ldr	r3, [pc, #220]	; (8001f2c <HAL_RCC_OscConfig+0x4ec>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e54:	f7fe fedc 	bl	8000c10 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e5c:	f7fe fed8 	bl	8000c10 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e056      	b.n	8001f1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e6e:	4b2e      	ldr	r3, [pc, #184]	; (8001f28 <HAL_RCC_OscConfig+0x4e8>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0x41c>
 8001e7a:	e04e      	b.n	8001f1a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7c:	4b2b      	ldr	r3, [pc, #172]	; (8001f2c <HAL_RCC_OscConfig+0x4ec>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e82:	f7fe fec5 	bl	8000c10 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e8a:	f7fe fec1 	bl	8000c10 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e03f      	b.n	8001f1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e9c:	4b22      	ldr	r3, [pc, #136]	; (8001f28 <HAL_RCC_OscConfig+0x4e8>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1f0      	bne.n	8001e8a <HAL_RCC_OscConfig+0x44a>
 8001ea8:	e037      	b.n	8001f1a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d101      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e032      	b.n	8001f1c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001eb6:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <HAL_RCC_OscConfig+0x4e8>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d028      	beq.n	8001f16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d121      	bne.n	8001f16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d11a      	bne.n	8001f16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001eec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d111      	bne.n	8001f16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efc:	085b      	lsrs	r3, r3, #1
 8001efe:	3b01      	subs	r3, #1
 8001f00:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d107      	bne.n	8001f16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f10:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d001      	beq.n	8001f1a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40007000 	.word	0x40007000
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	42470060 	.word	0x42470060

08001f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0cc      	b.n	80020de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f44:	4b68      	ldr	r3, [pc, #416]	; (80020e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d90c      	bls.n	8001f6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f52:	4b65      	ldr	r3, [pc, #404]	; (80020e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5a:	4b63      	ldr	r3, [pc, #396]	; (80020e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d001      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0b8      	b.n	80020de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d020      	beq.n	8001fba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f84:	4b59      	ldr	r3, [pc, #356]	; (80020ec <HAL_RCC_ClockConfig+0x1bc>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	4a58      	ldr	r2, [pc, #352]	; (80020ec <HAL_RCC_ClockConfig+0x1bc>)
 8001f8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0308 	and.w	r3, r3, #8
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f9c:	4b53      	ldr	r3, [pc, #332]	; (80020ec <HAL_RCC_ClockConfig+0x1bc>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	4a52      	ldr	r2, [pc, #328]	; (80020ec <HAL_RCC_ClockConfig+0x1bc>)
 8001fa2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fa6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa8:	4b50      	ldr	r3, [pc, #320]	; (80020ec <HAL_RCC_ClockConfig+0x1bc>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	494d      	ldr	r1, [pc, #308]	; (80020ec <HAL_RCC_ClockConfig+0x1bc>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d044      	beq.n	8002050 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d107      	bne.n	8001fde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fce:	4b47      	ldr	r3, [pc, #284]	; (80020ec <HAL_RCC_ClockConfig+0x1bc>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d119      	bne.n	800200e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e07f      	b.n	80020de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d003      	beq.n	8001fee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fea:	2b03      	cmp	r3, #3
 8001fec:	d107      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fee:	4b3f      	ldr	r3, [pc, #252]	; (80020ec <HAL_RCC_ClockConfig+0x1bc>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d109      	bne.n	800200e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e06f      	b.n	80020de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffe:	4b3b      	ldr	r3, [pc, #236]	; (80020ec <HAL_RCC_ClockConfig+0x1bc>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e067      	b.n	80020de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800200e:	4b37      	ldr	r3, [pc, #220]	; (80020ec <HAL_RCC_ClockConfig+0x1bc>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f023 0203 	bic.w	r2, r3, #3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	4934      	ldr	r1, [pc, #208]	; (80020ec <HAL_RCC_ClockConfig+0x1bc>)
 800201c:	4313      	orrs	r3, r2
 800201e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002020:	f7fe fdf6 	bl	8000c10 <HAL_GetTick>
 8002024:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002026:	e00a      	b.n	800203e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002028:	f7fe fdf2 	bl	8000c10 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	f241 3288 	movw	r2, #5000	; 0x1388
 8002036:	4293      	cmp	r3, r2
 8002038:	d901      	bls.n	800203e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e04f      	b.n	80020de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203e:	4b2b      	ldr	r3, [pc, #172]	; (80020ec <HAL_RCC_ClockConfig+0x1bc>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 020c 	and.w	r2, r3, #12
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	429a      	cmp	r2, r3
 800204e:	d1eb      	bne.n	8002028 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002050:	4b25      	ldr	r3, [pc, #148]	; (80020e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	429a      	cmp	r2, r3
 800205c:	d20c      	bcs.n	8002078 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205e:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002066:	4b20      	ldr	r3, [pc, #128]	; (80020e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d001      	beq.n	8002078 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e032      	b.n	80020de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	d008      	beq.n	8002096 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002084:	4b19      	ldr	r3, [pc, #100]	; (80020ec <HAL_RCC_ClockConfig+0x1bc>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	4916      	ldr	r1, [pc, #88]	; (80020ec <HAL_RCC_ClockConfig+0x1bc>)
 8002092:	4313      	orrs	r3, r2
 8002094:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d009      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020a2:	4b12      	ldr	r3, [pc, #72]	; (80020ec <HAL_RCC_ClockConfig+0x1bc>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	490e      	ldr	r1, [pc, #56]	; (80020ec <HAL_RCC_ClockConfig+0x1bc>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020b6:	f000 f821 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 80020ba:	4602      	mov	r2, r0
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <HAL_RCC_ClockConfig+0x1bc>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	091b      	lsrs	r3, r3, #4
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	490a      	ldr	r1, [pc, #40]	; (80020f0 <HAL_RCC_ClockConfig+0x1c0>)
 80020c8:	5ccb      	ldrb	r3, [r1, r3]
 80020ca:	fa22 f303 	lsr.w	r3, r2, r3
 80020ce:	4a09      	ldr	r2, [pc, #36]	; (80020f4 <HAL_RCC_ClockConfig+0x1c4>)
 80020d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <HAL_RCC_ClockConfig+0x1c8>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fd56 	bl	8000b88 <HAL_InitTick>

  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40023c00 	.word	0x40023c00
 80020ec:	40023800 	.word	0x40023800
 80020f0:	08003860 	.word	0x08003860
 80020f4:	20000000 	.word	0x20000000
 80020f8:	20000004 	.word	0x20000004

080020fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020fc:	b5b0      	push	{r4, r5, r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002102:	2100      	movs	r1, #0
 8002104:	6079      	str	r1, [r7, #4]
 8002106:	2100      	movs	r1, #0
 8002108:	60f9      	str	r1, [r7, #12]
 800210a:	2100      	movs	r1, #0
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800210e:	2100      	movs	r1, #0
 8002110:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002112:	4952      	ldr	r1, [pc, #328]	; (800225c <HAL_RCC_GetSysClockFreq+0x160>)
 8002114:	6889      	ldr	r1, [r1, #8]
 8002116:	f001 010c 	and.w	r1, r1, #12
 800211a:	2908      	cmp	r1, #8
 800211c:	d00d      	beq.n	800213a <HAL_RCC_GetSysClockFreq+0x3e>
 800211e:	2908      	cmp	r1, #8
 8002120:	f200 8094 	bhi.w	800224c <HAL_RCC_GetSysClockFreq+0x150>
 8002124:	2900      	cmp	r1, #0
 8002126:	d002      	beq.n	800212e <HAL_RCC_GetSysClockFreq+0x32>
 8002128:	2904      	cmp	r1, #4
 800212a:	d003      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0x38>
 800212c:	e08e      	b.n	800224c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800212e:	4b4c      	ldr	r3, [pc, #304]	; (8002260 <HAL_RCC_GetSysClockFreq+0x164>)
 8002130:	60bb      	str	r3, [r7, #8]
       break;
 8002132:	e08e      	b.n	8002252 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002134:	4b4b      	ldr	r3, [pc, #300]	; (8002264 <HAL_RCC_GetSysClockFreq+0x168>)
 8002136:	60bb      	str	r3, [r7, #8]
      break;
 8002138:	e08b      	b.n	8002252 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800213a:	4948      	ldr	r1, [pc, #288]	; (800225c <HAL_RCC_GetSysClockFreq+0x160>)
 800213c:	6849      	ldr	r1, [r1, #4]
 800213e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002142:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002144:	4945      	ldr	r1, [pc, #276]	; (800225c <HAL_RCC_GetSysClockFreq+0x160>)
 8002146:	6849      	ldr	r1, [r1, #4]
 8002148:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800214c:	2900      	cmp	r1, #0
 800214e:	d024      	beq.n	800219a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002150:	4942      	ldr	r1, [pc, #264]	; (800225c <HAL_RCC_GetSysClockFreq+0x160>)
 8002152:	6849      	ldr	r1, [r1, #4]
 8002154:	0989      	lsrs	r1, r1, #6
 8002156:	4608      	mov	r0, r1
 8002158:	f04f 0100 	mov.w	r1, #0
 800215c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002160:	f04f 0500 	mov.w	r5, #0
 8002164:	ea00 0204 	and.w	r2, r0, r4
 8002168:	ea01 0305 	and.w	r3, r1, r5
 800216c:	493d      	ldr	r1, [pc, #244]	; (8002264 <HAL_RCC_GetSysClockFreq+0x168>)
 800216e:	fb01 f003 	mul.w	r0, r1, r3
 8002172:	2100      	movs	r1, #0
 8002174:	fb01 f102 	mul.w	r1, r1, r2
 8002178:	1844      	adds	r4, r0, r1
 800217a:	493a      	ldr	r1, [pc, #232]	; (8002264 <HAL_RCC_GetSysClockFreq+0x168>)
 800217c:	fba2 0101 	umull	r0, r1, r2, r1
 8002180:	1863      	adds	r3, r4, r1
 8002182:	4619      	mov	r1, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	461a      	mov	r2, r3
 8002188:	f04f 0300 	mov.w	r3, #0
 800218c:	f7fe f878 	bl	8000280 <__aeabi_uldivmod>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4613      	mov	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	e04a      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800219a:	4b30      	ldr	r3, [pc, #192]	; (800225c <HAL_RCC_GetSysClockFreq+0x160>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	099b      	lsrs	r3, r3, #6
 80021a0:	461a      	mov	r2, r3
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80021aa:	f04f 0100 	mov.w	r1, #0
 80021ae:	ea02 0400 	and.w	r4, r2, r0
 80021b2:	ea03 0501 	and.w	r5, r3, r1
 80021b6:	4620      	mov	r0, r4
 80021b8:	4629      	mov	r1, r5
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	f04f 0300 	mov.w	r3, #0
 80021c2:	014b      	lsls	r3, r1, #5
 80021c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80021c8:	0142      	lsls	r2, r0, #5
 80021ca:	4610      	mov	r0, r2
 80021cc:	4619      	mov	r1, r3
 80021ce:	1b00      	subs	r0, r0, r4
 80021d0:	eb61 0105 	sbc.w	r1, r1, r5
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	018b      	lsls	r3, r1, #6
 80021de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80021e2:	0182      	lsls	r2, r0, #6
 80021e4:	1a12      	subs	r2, r2, r0
 80021e6:	eb63 0301 	sbc.w	r3, r3, r1
 80021ea:	f04f 0000 	mov.w	r0, #0
 80021ee:	f04f 0100 	mov.w	r1, #0
 80021f2:	00d9      	lsls	r1, r3, #3
 80021f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021f8:	00d0      	lsls	r0, r2, #3
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	1912      	adds	r2, r2, r4
 8002200:	eb45 0303 	adc.w	r3, r5, r3
 8002204:	f04f 0000 	mov.w	r0, #0
 8002208:	f04f 0100 	mov.w	r1, #0
 800220c:	0299      	lsls	r1, r3, #10
 800220e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002212:	0290      	lsls	r0, r2, #10
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4610      	mov	r0, r2
 800221a:	4619      	mov	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	461a      	mov	r2, r3
 8002220:	f04f 0300 	mov.w	r3, #0
 8002224:	f7fe f82c 	bl	8000280 <__aeabi_uldivmod>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4613      	mov	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002230:	4b0a      	ldr	r3, [pc, #40]	; (800225c <HAL_RCC_GetSysClockFreq+0x160>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	0c1b      	lsrs	r3, r3, #16
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	3301      	adds	r3, #1
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	fbb2 f3f3 	udiv	r3, r2, r3
 8002248:	60bb      	str	r3, [r7, #8]
      break;
 800224a:	e002      	b.n	8002252 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800224c:	4b04      	ldr	r3, [pc, #16]	; (8002260 <HAL_RCC_GetSysClockFreq+0x164>)
 800224e:	60bb      	str	r3, [r7, #8]
      break;
 8002250:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002252:	68bb      	ldr	r3, [r7, #8]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bdb0      	pop	{r4, r5, r7, pc}
 800225c:	40023800 	.word	0x40023800
 8002260:	00f42400 	.word	0x00f42400
 8002264:	017d7840 	.word	0x017d7840

08002268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800226c:	4b03      	ldr	r3, [pc, #12]	; (800227c <HAL_RCC_GetHCLKFreq+0x14>)
 800226e:	681b      	ldr	r3, [r3, #0]
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	20000000 	.word	0x20000000

08002280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002284:	f7ff fff0 	bl	8002268 <HAL_RCC_GetHCLKFreq>
 8002288:	4602      	mov	r2, r0
 800228a:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	0a9b      	lsrs	r3, r3, #10
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	4903      	ldr	r1, [pc, #12]	; (80022a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002296:	5ccb      	ldrb	r3, [r1, r3]
 8002298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800229c:	4618      	mov	r0, r3
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40023800 	.word	0x40023800
 80022a4:	08003870 	.word	0x08003870

080022a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022ac:	f7ff ffdc 	bl	8002268 <HAL_RCC_GetHCLKFreq>
 80022b0:	4602      	mov	r2, r0
 80022b2:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	0b5b      	lsrs	r3, r3, #13
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	4903      	ldr	r1, [pc, #12]	; (80022cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80022be:	5ccb      	ldrb	r3, [r1, r3]
 80022c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40023800 	.word	0x40023800
 80022cc:	08003870 	.word	0x08003870

080022d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e03f      	b.n	8002362 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d106      	bne.n	80022fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7fe fb40 	bl	800097c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2224      	movs	r2, #36	; 0x24
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002312:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 f9cb 	bl	80026b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	691a      	ldr	r2, [r3, #16]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002328:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	695a      	ldr	r2, [r3, #20]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002338:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002348:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2220      	movs	r2, #32
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b08a      	sub	sp, #40	; 0x28
 800236e:	af02      	add	r7, sp, #8
 8002370:	60f8      	str	r0, [r7, #12]
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	603b      	str	r3, [r7, #0]
 8002376:	4613      	mov	r3, r2
 8002378:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b20      	cmp	r3, #32
 8002388:	d17c      	bne.n	8002484 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d002      	beq.n	8002396 <HAL_UART_Transmit+0x2c>
 8002390:	88fb      	ldrh	r3, [r7, #6]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e075      	b.n	8002486 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d101      	bne.n	80023a8 <HAL_UART_Transmit+0x3e>
 80023a4:	2302      	movs	r3, #2
 80023a6:	e06e      	b.n	8002486 <HAL_UART_Transmit+0x11c>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2221      	movs	r2, #33	; 0x21
 80023ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023be:	f7fe fc27 	bl	8000c10 <HAL_GetTick>
 80023c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	88fa      	ldrh	r2, [r7, #6]
 80023c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	88fa      	ldrh	r2, [r7, #6]
 80023ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023d8:	d108      	bne.n	80023ec <HAL_UART_Transmit+0x82>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d104      	bne.n	80023ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	61bb      	str	r3, [r7, #24]
 80023ea:	e003      	b.n	80023f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80023fc:	e02a      	b.n	8002454 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	2200      	movs	r2, #0
 8002406:	2180      	movs	r1, #128	; 0x80
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 f8e2 	bl	80025d2 <UART_WaitOnFlagUntilTimeout>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e036      	b.n	8002486 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10b      	bne.n	8002436 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	461a      	mov	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800242c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	3302      	adds	r3, #2
 8002432:	61bb      	str	r3, [r7, #24]
 8002434:	e007      	b.n	8002446 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	781a      	ldrb	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	3301      	adds	r3, #1
 8002444:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800244a:	b29b      	uxth	r3, r3
 800244c:	3b01      	subs	r3, #1
 800244e:	b29a      	uxth	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002458:	b29b      	uxth	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1cf      	bne.n	80023fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	2200      	movs	r2, #0
 8002466:	2140      	movs	r1, #64	; 0x40
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 f8b2 	bl	80025d2 <UART_WaitOnFlagUntilTimeout>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e006      	b.n	8002486 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2220      	movs	r2, #32
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	e000      	b.n	8002486 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002484:	2302      	movs	r3, #2
  }
}
 8002486:	4618      	mov	r0, r3
 8002488:	3720      	adds	r7, #32
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b08a      	sub	sp, #40	; 0x28
 8002492:	af02      	add	r7, sp, #8
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	603b      	str	r3, [r7, #0]
 800249a:	4613      	mov	r3, r2
 800249c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b20      	cmp	r3, #32
 80024ac:	f040 808c 	bne.w	80025c8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d002      	beq.n	80024bc <HAL_UART_Receive+0x2e>
 80024b6:	88fb      	ldrh	r3, [r7, #6]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e084      	b.n	80025ca <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_UART_Receive+0x40>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e07d      	b.n	80025ca <HAL_UART_Receive+0x13c>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2222      	movs	r2, #34	; 0x22
 80024e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024ea:	f7fe fb91 	bl	8000c10 <HAL_GetTick>
 80024ee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	88fa      	ldrh	r2, [r7, #6]
 80024f4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	88fa      	ldrh	r2, [r7, #6]
 80024fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002504:	d108      	bne.n	8002518 <HAL_UART_Receive+0x8a>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d104      	bne.n	8002518 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	61bb      	str	r3, [r7, #24]
 8002516:	e003      	b.n	8002520 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800251c:	2300      	movs	r3, #0
 800251e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002528:	e043      	b.n	80025b2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	2200      	movs	r2, #0
 8002532:	2120      	movs	r1, #32
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 f84c 	bl	80025d2 <UART_WaitOnFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e042      	b.n	80025ca <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10c      	bne.n	8002564 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	b29b      	uxth	r3, r3
 8002552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002556:	b29a      	uxth	r2, r3
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	3302      	adds	r3, #2
 8002560:	61bb      	str	r3, [r7, #24]
 8002562:	e01f      	b.n	80025a4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800256c:	d007      	beq.n	800257e <HAL_UART_Receive+0xf0>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10a      	bne.n	800258c <HAL_UART_Receive+0xfe>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d106      	bne.n	800258c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	b2da      	uxtb	r2, r3
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	701a      	strb	r2, [r3, #0]
 800258a:	e008      	b.n	800259e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	b2db      	uxtb	r3, r3
 8002594:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002598:	b2da      	uxtb	r2, r3
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	3301      	adds	r3, #1
 80025a2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1b6      	bne.n	800252a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2220      	movs	r2, #32
 80025c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	e000      	b.n	80025ca <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80025c8:	2302      	movs	r3, #2
  }
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3720      	adds	r7, #32
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b090      	sub	sp, #64	; 0x40
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	60f8      	str	r0, [r7, #12]
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	603b      	str	r3, [r7, #0]
 80025de:	4613      	mov	r3, r2
 80025e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025e2:	e050      	b.n	8002686 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ea:	d04c      	beq.n	8002686 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d007      	beq.n	8002602 <UART_WaitOnFlagUntilTimeout+0x30>
 80025f2:	f7fe fb0d 	bl	8000c10 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025fe:	429a      	cmp	r2, r3
 8002600:	d241      	bcs.n	8002686 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	330c      	adds	r3, #12
 8002608:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800260a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260c:	e853 3f00 	ldrex	r3, [r3]
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002618:	63fb      	str	r3, [r7, #60]	; 0x3c
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	330c      	adds	r3, #12
 8002620:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002622:	637a      	str	r2, [r7, #52]	; 0x34
 8002624:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002626:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002628:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800262a:	e841 2300 	strex	r3, r2, [r1]
 800262e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1e5      	bne.n	8002602 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	3314      	adds	r3, #20
 800263c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	e853 3f00 	ldrex	r3, [r3]
 8002644:	613b      	str	r3, [r7, #16]
   return(result);
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	f023 0301 	bic.w	r3, r3, #1
 800264c:	63bb      	str	r3, [r7, #56]	; 0x38
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	3314      	adds	r3, #20
 8002654:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002656:	623a      	str	r2, [r7, #32]
 8002658:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800265a:	69f9      	ldr	r1, [r7, #28]
 800265c:	6a3a      	ldr	r2, [r7, #32]
 800265e:	e841 2300 	strex	r3, r2, [r1]
 8002662:	61bb      	str	r3, [r7, #24]
   return(result);
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1e5      	bne.n	8002636 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2220      	movs	r2, #32
 800266e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2220      	movs	r2, #32
 8002676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e00f      	b.n	80026a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	4013      	ands	r3, r2
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	429a      	cmp	r2, r3
 8002694:	bf0c      	ite	eq
 8002696:	2301      	moveq	r3, #1
 8002698:	2300      	movne	r3, #0
 800269a:	b2db      	uxtb	r3, r3
 800269c:	461a      	mov	r2, r3
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d09f      	beq.n	80025e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3740      	adds	r7, #64	; 0x40
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026b4:	b09f      	sub	sp, #124	; 0x7c
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80026c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026c6:	68d9      	ldr	r1, [r3, #12]
 80026c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	ea40 0301 	orr.w	r3, r0, r1
 80026d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	431a      	orrs	r2, r3
 80026dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	431a      	orrs	r2, r3
 80026e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80026ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80026f4:	f021 010c 	bic.w	r1, r1, #12
 80026f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026fe:	430b      	orrs	r3, r1
 8002700:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800270c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800270e:	6999      	ldr	r1, [r3, #24]
 8002710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	ea40 0301 	orr.w	r3, r0, r1
 8002718:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800271a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	4bc5      	ldr	r3, [pc, #788]	; (8002a34 <UART_SetConfig+0x384>)
 8002720:	429a      	cmp	r2, r3
 8002722:	d004      	beq.n	800272e <UART_SetConfig+0x7e>
 8002724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4bc3      	ldr	r3, [pc, #780]	; (8002a38 <UART_SetConfig+0x388>)
 800272a:	429a      	cmp	r2, r3
 800272c:	d103      	bne.n	8002736 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800272e:	f7ff fdbb 	bl	80022a8 <HAL_RCC_GetPCLK2Freq>
 8002732:	6778      	str	r0, [r7, #116]	; 0x74
 8002734:	e002      	b.n	800273c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002736:	f7ff fda3 	bl	8002280 <HAL_RCC_GetPCLK1Freq>
 800273a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800273c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002744:	f040 80b6 	bne.w	80028b4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002748:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800274a:	461c      	mov	r4, r3
 800274c:	f04f 0500 	mov.w	r5, #0
 8002750:	4622      	mov	r2, r4
 8002752:	462b      	mov	r3, r5
 8002754:	1891      	adds	r1, r2, r2
 8002756:	6439      	str	r1, [r7, #64]	; 0x40
 8002758:	415b      	adcs	r3, r3
 800275a:	647b      	str	r3, [r7, #68]	; 0x44
 800275c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002760:	1912      	adds	r2, r2, r4
 8002762:	eb45 0303 	adc.w	r3, r5, r3
 8002766:	f04f 0000 	mov.w	r0, #0
 800276a:	f04f 0100 	mov.w	r1, #0
 800276e:	00d9      	lsls	r1, r3, #3
 8002770:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002774:	00d0      	lsls	r0, r2, #3
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	1911      	adds	r1, r2, r4
 800277c:	6639      	str	r1, [r7, #96]	; 0x60
 800277e:	416b      	adcs	r3, r5
 8002780:	667b      	str	r3, [r7, #100]	; 0x64
 8002782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	461a      	mov	r2, r3
 8002788:	f04f 0300 	mov.w	r3, #0
 800278c:	1891      	adds	r1, r2, r2
 800278e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002790:	415b      	adcs	r3, r3
 8002792:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002794:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002798:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800279c:	f7fd fd70 	bl	8000280 <__aeabi_uldivmod>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4ba5      	ldr	r3, [pc, #660]	; (8002a3c <UART_SetConfig+0x38c>)
 80027a6:	fba3 2302 	umull	r2, r3, r3, r2
 80027aa:	095b      	lsrs	r3, r3, #5
 80027ac:	011e      	lsls	r6, r3, #4
 80027ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027b0:	461c      	mov	r4, r3
 80027b2:	f04f 0500 	mov.w	r5, #0
 80027b6:	4622      	mov	r2, r4
 80027b8:	462b      	mov	r3, r5
 80027ba:	1891      	adds	r1, r2, r2
 80027bc:	6339      	str	r1, [r7, #48]	; 0x30
 80027be:	415b      	adcs	r3, r3
 80027c0:	637b      	str	r3, [r7, #52]	; 0x34
 80027c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80027c6:	1912      	adds	r2, r2, r4
 80027c8:	eb45 0303 	adc.w	r3, r5, r3
 80027cc:	f04f 0000 	mov.w	r0, #0
 80027d0:	f04f 0100 	mov.w	r1, #0
 80027d4:	00d9      	lsls	r1, r3, #3
 80027d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027da:	00d0      	lsls	r0, r2, #3
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	1911      	adds	r1, r2, r4
 80027e2:	65b9      	str	r1, [r7, #88]	; 0x58
 80027e4:	416b      	adcs	r3, r5
 80027e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	461a      	mov	r2, r3
 80027ee:	f04f 0300 	mov.w	r3, #0
 80027f2:	1891      	adds	r1, r2, r2
 80027f4:	62b9      	str	r1, [r7, #40]	; 0x28
 80027f6:	415b      	adcs	r3, r3
 80027f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027fe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002802:	f7fd fd3d 	bl	8000280 <__aeabi_uldivmod>
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	4b8c      	ldr	r3, [pc, #560]	; (8002a3c <UART_SetConfig+0x38c>)
 800280c:	fba3 1302 	umull	r1, r3, r3, r2
 8002810:	095b      	lsrs	r3, r3, #5
 8002812:	2164      	movs	r1, #100	; 0x64
 8002814:	fb01 f303 	mul.w	r3, r1, r3
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	3332      	adds	r3, #50	; 0x32
 800281e:	4a87      	ldr	r2, [pc, #540]	; (8002a3c <UART_SetConfig+0x38c>)
 8002820:	fba2 2303 	umull	r2, r3, r2, r3
 8002824:	095b      	lsrs	r3, r3, #5
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800282c:	441e      	add	r6, r3
 800282e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002830:	4618      	mov	r0, r3
 8002832:	f04f 0100 	mov.w	r1, #0
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	1894      	adds	r4, r2, r2
 800283c:	623c      	str	r4, [r7, #32]
 800283e:	415b      	adcs	r3, r3
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
 8002842:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002846:	1812      	adds	r2, r2, r0
 8002848:	eb41 0303 	adc.w	r3, r1, r3
 800284c:	f04f 0400 	mov.w	r4, #0
 8002850:	f04f 0500 	mov.w	r5, #0
 8002854:	00dd      	lsls	r5, r3, #3
 8002856:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800285a:	00d4      	lsls	r4, r2, #3
 800285c:	4622      	mov	r2, r4
 800285e:	462b      	mov	r3, r5
 8002860:	1814      	adds	r4, r2, r0
 8002862:	653c      	str	r4, [r7, #80]	; 0x50
 8002864:	414b      	adcs	r3, r1
 8002866:	657b      	str	r3, [r7, #84]	; 0x54
 8002868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	461a      	mov	r2, r3
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	1891      	adds	r1, r2, r2
 8002874:	61b9      	str	r1, [r7, #24]
 8002876:	415b      	adcs	r3, r3
 8002878:	61fb      	str	r3, [r7, #28]
 800287a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800287e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002882:	f7fd fcfd 	bl	8000280 <__aeabi_uldivmod>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4b6c      	ldr	r3, [pc, #432]	; (8002a3c <UART_SetConfig+0x38c>)
 800288c:	fba3 1302 	umull	r1, r3, r3, r2
 8002890:	095b      	lsrs	r3, r3, #5
 8002892:	2164      	movs	r1, #100	; 0x64
 8002894:	fb01 f303 	mul.w	r3, r1, r3
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	3332      	adds	r3, #50	; 0x32
 800289e:	4a67      	ldr	r2, [pc, #412]	; (8002a3c <UART_SetConfig+0x38c>)
 80028a0:	fba2 2303 	umull	r2, r3, r2, r3
 80028a4:	095b      	lsrs	r3, r3, #5
 80028a6:	f003 0207 	and.w	r2, r3, #7
 80028aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4432      	add	r2, r6
 80028b0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028b2:	e0b9      	b.n	8002a28 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028b6:	461c      	mov	r4, r3
 80028b8:	f04f 0500 	mov.w	r5, #0
 80028bc:	4622      	mov	r2, r4
 80028be:	462b      	mov	r3, r5
 80028c0:	1891      	adds	r1, r2, r2
 80028c2:	6139      	str	r1, [r7, #16]
 80028c4:	415b      	adcs	r3, r3
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80028cc:	1912      	adds	r2, r2, r4
 80028ce:	eb45 0303 	adc.w	r3, r5, r3
 80028d2:	f04f 0000 	mov.w	r0, #0
 80028d6:	f04f 0100 	mov.w	r1, #0
 80028da:	00d9      	lsls	r1, r3, #3
 80028dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028e0:	00d0      	lsls	r0, r2, #3
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	eb12 0804 	adds.w	r8, r2, r4
 80028ea:	eb43 0905 	adc.w	r9, r3, r5
 80028ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f04f 0100 	mov.w	r1, #0
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	008b      	lsls	r3, r1, #2
 8002902:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002906:	0082      	lsls	r2, r0, #2
 8002908:	4640      	mov	r0, r8
 800290a:	4649      	mov	r1, r9
 800290c:	f7fd fcb8 	bl	8000280 <__aeabi_uldivmod>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4b49      	ldr	r3, [pc, #292]	; (8002a3c <UART_SetConfig+0x38c>)
 8002916:	fba3 2302 	umull	r2, r3, r3, r2
 800291a:	095b      	lsrs	r3, r3, #5
 800291c:	011e      	lsls	r6, r3, #4
 800291e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002920:	4618      	mov	r0, r3
 8002922:	f04f 0100 	mov.w	r1, #0
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	1894      	adds	r4, r2, r2
 800292c:	60bc      	str	r4, [r7, #8]
 800292e:	415b      	adcs	r3, r3
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002936:	1812      	adds	r2, r2, r0
 8002938:	eb41 0303 	adc.w	r3, r1, r3
 800293c:	f04f 0400 	mov.w	r4, #0
 8002940:	f04f 0500 	mov.w	r5, #0
 8002944:	00dd      	lsls	r5, r3, #3
 8002946:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800294a:	00d4      	lsls	r4, r2, #3
 800294c:	4622      	mov	r2, r4
 800294e:	462b      	mov	r3, r5
 8002950:	1814      	adds	r4, r2, r0
 8002952:	64bc      	str	r4, [r7, #72]	; 0x48
 8002954:	414b      	adcs	r3, r1
 8002956:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	4618      	mov	r0, r3
 800295e:	f04f 0100 	mov.w	r1, #0
 8002962:	f04f 0200 	mov.w	r2, #0
 8002966:	f04f 0300 	mov.w	r3, #0
 800296a:	008b      	lsls	r3, r1, #2
 800296c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002970:	0082      	lsls	r2, r0, #2
 8002972:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002976:	f7fd fc83 	bl	8000280 <__aeabi_uldivmod>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	4b2f      	ldr	r3, [pc, #188]	; (8002a3c <UART_SetConfig+0x38c>)
 8002980:	fba3 1302 	umull	r1, r3, r3, r2
 8002984:	095b      	lsrs	r3, r3, #5
 8002986:	2164      	movs	r1, #100	; 0x64
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	3332      	adds	r3, #50	; 0x32
 8002992:	4a2a      	ldr	r2, [pc, #168]	; (8002a3c <UART_SetConfig+0x38c>)
 8002994:	fba2 2303 	umull	r2, r3, r2, r3
 8002998:	095b      	lsrs	r3, r3, #5
 800299a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800299e:	441e      	add	r6, r3
 80029a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029a2:	4618      	mov	r0, r3
 80029a4:	f04f 0100 	mov.w	r1, #0
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	1894      	adds	r4, r2, r2
 80029ae:	603c      	str	r4, [r7, #0]
 80029b0:	415b      	adcs	r3, r3
 80029b2:	607b      	str	r3, [r7, #4]
 80029b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029b8:	1812      	adds	r2, r2, r0
 80029ba:	eb41 0303 	adc.w	r3, r1, r3
 80029be:	f04f 0400 	mov.w	r4, #0
 80029c2:	f04f 0500 	mov.w	r5, #0
 80029c6:	00dd      	lsls	r5, r3, #3
 80029c8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80029cc:	00d4      	lsls	r4, r2, #3
 80029ce:	4622      	mov	r2, r4
 80029d0:	462b      	mov	r3, r5
 80029d2:	eb12 0a00 	adds.w	sl, r2, r0
 80029d6:	eb43 0b01 	adc.w	fp, r3, r1
 80029da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	4618      	mov	r0, r3
 80029e0:	f04f 0100 	mov.w	r1, #0
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	008b      	lsls	r3, r1, #2
 80029ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80029f2:	0082      	lsls	r2, r0, #2
 80029f4:	4650      	mov	r0, sl
 80029f6:	4659      	mov	r1, fp
 80029f8:	f7fd fc42 	bl	8000280 <__aeabi_uldivmod>
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <UART_SetConfig+0x38c>)
 8002a02:	fba3 1302 	umull	r1, r3, r3, r2
 8002a06:	095b      	lsrs	r3, r3, #5
 8002a08:	2164      	movs	r1, #100	; 0x64
 8002a0a:	fb01 f303 	mul.w	r3, r1, r3
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	3332      	adds	r3, #50	; 0x32
 8002a14:	4a09      	ldr	r2, [pc, #36]	; (8002a3c <UART_SetConfig+0x38c>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	095b      	lsrs	r3, r3, #5
 8002a1c:	f003 020f 	and.w	r2, r3, #15
 8002a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4432      	add	r2, r6
 8002a26:	609a      	str	r2, [r3, #8]
}
 8002a28:	bf00      	nop
 8002a2a:	377c      	adds	r7, #124	; 0x7c
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a32:	bf00      	nop
 8002a34:	40011000 	.word	0x40011000
 8002a38:	40011400 	.word	0x40011400
 8002a3c:	51eb851f 	.word	0x51eb851f

08002a40 <pca9685_WriteData>:
#define PRESCALER_REG 		0xfe

I2C_HandleTypeDef *handler;

void pca9685_WriteData (uint8_t data[])
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af02      	add	r7, sp, #8
 8002a46:	6078      	str	r0, [r7, #4]
	uint8_t buff[2];

	for(int i = 0; i < 4; i++)
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	e019      	b.n	8002a82 <pca9685_WriteData+0x42>
	{
		buff[0] = data[0] + i;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	781a      	ldrb	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	4413      	add	r3, r2
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	723b      	strb	r3, [r7, #8]
		buff[1] = data[i+1];
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	4413      	add	r3, r2
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(handler, DEV_ADRRESS, buff, 2, I2C_TIMEOUT);
 8002a68:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <pca9685_WriteData+0x54>)
 8002a6a:	6818      	ldr	r0, [r3, #0]
 8002a6c:	f107 0208 	add.w	r2, r7, #8
 8002a70:	2301      	movs	r3, #1
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	2302      	movs	r3, #2
 8002a76:	2180      	movs	r1, #128	; 0x80
 8002a78:	f7fe fcda 	bl	8001430 <HAL_I2C_Master_Transmit>
	for(int i = 0; i < 4; i++)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	dde2      	ble.n	8002a4e <pca9685_WriteData+0xe>
	}
}
 8002a88:	bf00      	nop
 8002a8a:	bf00      	nop
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000134 	.word	0x20000134

08002a98 <pca9685_Init>:

void pca9685_Init (I2C_HandleTypeDef *handleri2c)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	6078      	str	r0, [r7, #4]
	handler = handleri2c;
 8002aa0:	4a09      	ldr	r2, [pc, #36]	; (8002ac8 <pca9685_Init+0x30>)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6013      	str	r3, [r2, #0]

	uint8_t data[2] = {MODE1_REG, 0x01};
 8002aa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aaa:	81bb      	strh	r3, [r7, #12]

	HAL_I2C_Master_Transmit(handler, DEV_ADRRESS, data, 2, I2C_TIMEOUT);
 8002aac:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <pca9685_Init+0x30>)
 8002aae:	6818      	ldr	r0, [r3, #0]
 8002ab0:	f107 020c 	add.w	r2, r7, #12
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	2302      	movs	r3, #2
 8002aba:	2180      	movs	r1, #128	; 0x80
 8002abc:	f7fe fcb8 	bl	8001430 <HAL_I2C_Master_Transmit>
}
 8002ac0:	bf00      	nop
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	20000134 	.word	0x20000134

08002acc <pca9685_SetDutyCycle>:

void pca9685_SetDutyCycle (uint8_t channel, uint8_t duty_cycle, uint8_t delay_time)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	71fb      	strb	r3, [r7, #7]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	71bb      	strb	r3, [r7, #6]
 8002ada:	4613      	mov	r3, r2
 8002adc:	717b      	strb	r3, [r7, #5]
	uint16_t delay = (4096 * delay_time / 100);
 8002ade:	797b      	ldrb	r3, [r7, #5]
 8002ae0:	031b      	lsls	r3, r3, #12
 8002ae2:	4a1d      	ldr	r2, [pc, #116]	; (8002b58 <pca9685_SetDutyCycle+0x8c>)
 8002ae4:	fb82 1203 	smull	r1, r2, r2, r3
 8002ae8:	1152      	asrs	r2, r2, #5
 8002aea:	17db      	asrs	r3, r3, #31
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	82fb      	strh	r3, [r7, #22]
	uint16_t duty = (4096 * duty_cycle / 100) + delay;
 8002af0:	79bb      	ldrb	r3, [r7, #6]
 8002af2:	031b      	lsls	r3, r3, #12
 8002af4:	4a18      	ldr	r2, [pc, #96]	; (8002b58 <pca9685_SetDutyCycle+0x8c>)
 8002af6:	fb82 1203 	smull	r1, r2, r2, r3
 8002afa:	1152      	asrs	r2, r2, #5
 8002afc:	17db      	asrs	r3, r3, #31
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	8afb      	ldrh	r3, [r7, #22]
 8002b04:	4413      	add	r3, r2
 8002b06:	82bb      	strh	r3, [r7, #20]

	uint8_t on_l = (delay & 0x00ff);
 8002b08:	8afb      	ldrh	r3, [r7, #22]
 8002b0a:	74fb      	strb	r3, [r7, #19]
	uint8_t on_h = (delay & 0x0f00) >> 8u;
 8002b0c:	8afb      	ldrh	r3, [r7, #22]
 8002b0e:	121b      	asrs	r3, r3, #8
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	74bb      	strb	r3, [r7, #18]

	uint8_t off_l = (duty & 0x00ff);
 8002b18:	8abb      	ldrh	r3, [r7, #20]
 8002b1a:	747b      	strb	r3, [r7, #17]
	uint8_t off_h = (duty & 0x0f00) >> 8u;
 8002b1c:	8abb      	ldrh	r3, [r7, #20]
 8002b1e:	121b      	asrs	r3, r3, #8
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	743b      	strb	r3, [r7, #16]

	uint8_t chanell_reg = LED0_ON_L_REG + channel * 4;
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	3306      	adds	r3, #6
 8002b30:	73fb      	strb	r3, [r7, #15]

	uint8_t data[5] = {chanell_reg, on_l, on_h, off_l, off_h};
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
 8002b34:	723b      	strb	r3, [r7, #8]
 8002b36:	7cfb      	ldrb	r3, [r7, #19]
 8002b38:	727b      	strb	r3, [r7, #9]
 8002b3a:	7cbb      	ldrb	r3, [r7, #18]
 8002b3c:	72bb      	strb	r3, [r7, #10]
 8002b3e:	7c7b      	ldrb	r3, [r7, #17]
 8002b40:	72fb      	strb	r3, [r7, #11]
 8002b42:	7c3b      	ldrb	r3, [r7, #16]
 8002b44:	733b      	strb	r3, [r7, #12]

	pca9685_WriteData(data);
 8002b46:	f107 0308 	add.w	r3, r7, #8
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff ff78 	bl	8002a40 <pca9685_WriteData>
}
 8002b50:	bf00      	nop
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	51eb851f 	.word	0x51eb851f

08002b5c <pca9685_DisableALL>:
void pca9685_DisableALL ()
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
	uint8_t data [5] = {ALL_LED_ON_L_REG, 0x00, 0x00, 0x00, 0x00};
 8002b62:	4a07      	ldr	r2, [pc, #28]	; (8002b80 <pca9685_DisableALL+0x24>)
 8002b64:	463b      	mov	r3, r7
 8002b66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b6a:	6018      	str	r0, [r3, #0]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	7019      	strb	r1, [r3, #0]
	pca9685_WriteData(data);
 8002b70:	463b      	mov	r3, r7
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff ff64 	bl	8002a40 <pca9685_WriteData>
}
 8002b78:	bf00      	nop
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	0800384c 	.word	0x0800384c

08002b84 <__errno>:
 8002b84:	4b01      	ldr	r3, [pc, #4]	; (8002b8c <__errno+0x8>)
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	2000000c 	.word	0x2000000c

08002b90 <__libc_init_array>:
 8002b90:	b570      	push	{r4, r5, r6, lr}
 8002b92:	4d0d      	ldr	r5, [pc, #52]	; (8002bc8 <__libc_init_array+0x38>)
 8002b94:	4c0d      	ldr	r4, [pc, #52]	; (8002bcc <__libc_init_array+0x3c>)
 8002b96:	1b64      	subs	r4, r4, r5
 8002b98:	10a4      	asrs	r4, r4, #2
 8002b9a:	2600      	movs	r6, #0
 8002b9c:	42a6      	cmp	r6, r4
 8002b9e:	d109      	bne.n	8002bb4 <__libc_init_array+0x24>
 8002ba0:	4d0b      	ldr	r5, [pc, #44]	; (8002bd0 <__libc_init_array+0x40>)
 8002ba2:	4c0c      	ldr	r4, [pc, #48]	; (8002bd4 <__libc_init_array+0x44>)
 8002ba4:	f000 fe00 	bl	80037a8 <_init>
 8002ba8:	1b64      	subs	r4, r4, r5
 8002baa:	10a4      	asrs	r4, r4, #2
 8002bac:	2600      	movs	r6, #0
 8002bae:	42a6      	cmp	r6, r4
 8002bb0:	d105      	bne.n	8002bbe <__libc_init_array+0x2e>
 8002bb2:	bd70      	pop	{r4, r5, r6, pc}
 8002bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bb8:	4798      	blx	r3
 8002bba:	3601      	adds	r6, #1
 8002bbc:	e7ee      	b.n	8002b9c <__libc_init_array+0xc>
 8002bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bc2:	4798      	blx	r3
 8002bc4:	3601      	adds	r6, #1
 8002bc6:	e7f2      	b.n	8002bae <__libc_init_array+0x1e>
 8002bc8:	08003a00 	.word	0x08003a00
 8002bcc:	08003a00 	.word	0x08003a00
 8002bd0:	08003a00 	.word	0x08003a00
 8002bd4:	08003a04 	.word	0x08003a04

08002bd8 <memcpy>:
 8002bd8:	440a      	add	r2, r1
 8002bda:	4291      	cmp	r1, r2
 8002bdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8002be0:	d100      	bne.n	8002be4 <memcpy+0xc>
 8002be2:	4770      	bx	lr
 8002be4:	b510      	push	{r4, lr}
 8002be6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002bea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002bee:	4291      	cmp	r1, r2
 8002bf0:	d1f9      	bne.n	8002be6 <memcpy+0xe>
 8002bf2:	bd10      	pop	{r4, pc}

08002bf4 <memset>:
 8002bf4:	4402      	add	r2, r0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d100      	bne.n	8002bfe <memset+0xa>
 8002bfc:	4770      	bx	lr
 8002bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8002c02:	e7f9      	b.n	8002bf8 <memset+0x4>

08002c04 <siscanf>:
 8002c04:	b40e      	push	{r1, r2, r3}
 8002c06:	b510      	push	{r4, lr}
 8002c08:	b09f      	sub	sp, #124	; 0x7c
 8002c0a:	ac21      	add	r4, sp, #132	; 0x84
 8002c0c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8002c10:	f854 2b04 	ldr.w	r2, [r4], #4
 8002c14:	9201      	str	r2, [sp, #4]
 8002c16:	f8ad 101c 	strh.w	r1, [sp, #28]
 8002c1a:	9004      	str	r0, [sp, #16]
 8002c1c:	9008      	str	r0, [sp, #32]
 8002c1e:	f7fd fad7 	bl	80001d0 <strlen>
 8002c22:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <siscanf+0x50>)
 8002c24:	9005      	str	r0, [sp, #20]
 8002c26:	9009      	str	r0, [sp, #36]	; 0x24
 8002c28:	930d      	str	r3, [sp, #52]	; 0x34
 8002c2a:	480b      	ldr	r0, [pc, #44]	; (8002c58 <siscanf+0x54>)
 8002c2c:	9a01      	ldr	r2, [sp, #4]
 8002c2e:	6800      	ldr	r0, [r0, #0]
 8002c30:	9403      	str	r4, [sp, #12]
 8002c32:	2300      	movs	r3, #0
 8002c34:	9311      	str	r3, [sp, #68]	; 0x44
 8002c36:	9316      	str	r3, [sp, #88]	; 0x58
 8002c38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c3c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8002c40:	a904      	add	r1, sp, #16
 8002c42:	4623      	mov	r3, r4
 8002c44:	f000 f87e 	bl	8002d44 <__ssvfiscanf_r>
 8002c48:	b01f      	add	sp, #124	; 0x7c
 8002c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c4e:	b003      	add	sp, #12
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	08002c5d 	.word	0x08002c5d
 8002c58:	2000000c 	.word	0x2000000c

08002c5c <__seofread>:
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	4770      	bx	lr

08002c60 <strstr>:
 8002c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c62:	780c      	ldrb	r4, [r1, #0]
 8002c64:	b164      	cbz	r4, 8002c80 <strstr+0x20>
 8002c66:	4603      	mov	r3, r0
 8002c68:	781a      	ldrb	r2, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	1c5e      	adds	r6, r3, #1
 8002c6e:	b90a      	cbnz	r2, 8002c74 <strstr+0x14>
 8002c70:	4610      	mov	r0, r2
 8002c72:	e005      	b.n	8002c80 <strstr+0x20>
 8002c74:	4294      	cmp	r4, r2
 8002c76:	d108      	bne.n	8002c8a <strstr+0x2a>
 8002c78:	460d      	mov	r5, r1
 8002c7a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8002c7e:	b902      	cbnz	r2, 8002c82 <strstr+0x22>
 8002c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c82:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8002c86:	4297      	cmp	r7, r2
 8002c88:	d0f7      	beq.n	8002c7a <strstr+0x1a>
 8002c8a:	4633      	mov	r3, r6
 8002c8c:	e7ec      	b.n	8002c68 <strstr+0x8>

08002c8e <_sungetc_r>:
 8002c8e:	b538      	push	{r3, r4, r5, lr}
 8002c90:	1c4b      	adds	r3, r1, #1
 8002c92:	4614      	mov	r4, r2
 8002c94:	d103      	bne.n	8002c9e <_sungetc_r+0x10>
 8002c96:	f04f 35ff 	mov.w	r5, #4294967295
 8002c9a:	4628      	mov	r0, r5
 8002c9c:	bd38      	pop	{r3, r4, r5, pc}
 8002c9e:	8993      	ldrh	r3, [r2, #12]
 8002ca0:	f023 0320 	bic.w	r3, r3, #32
 8002ca4:	8193      	strh	r3, [r2, #12]
 8002ca6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002ca8:	6852      	ldr	r2, [r2, #4]
 8002caa:	b2cd      	uxtb	r5, r1
 8002cac:	b18b      	cbz	r3, 8002cd2 <_sungetc_r+0x44>
 8002cae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	dd08      	ble.n	8002cc6 <_sungetc_r+0x38>
 8002cb4:	6823      	ldr	r3, [r4, #0]
 8002cb6:	1e5a      	subs	r2, r3, #1
 8002cb8:	6022      	str	r2, [r4, #0]
 8002cba:	f803 5c01 	strb.w	r5, [r3, #-1]
 8002cbe:	6863      	ldr	r3, [r4, #4]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	6063      	str	r3, [r4, #4]
 8002cc4:	e7e9      	b.n	8002c9a <_sungetc_r+0xc>
 8002cc6:	4621      	mov	r1, r4
 8002cc8:	f000 fc3e 	bl	8003548 <__submore>
 8002ccc:	2800      	cmp	r0, #0
 8002cce:	d0f1      	beq.n	8002cb4 <_sungetc_r+0x26>
 8002cd0:	e7e1      	b.n	8002c96 <_sungetc_r+0x8>
 8002cd2:	6921      	ldr	r1, [r4, #16]
 8002cd4:	6823      	ldr	r3, [r4, #0]
 8002cd6:	b151      	cbz	r1, 8002cee <_sungetc_r+0x60>
 8002cd8:	4299      	cmp	r1, r3
 8002cda:	d208      	bcs.n	8002cee <_sungetc_r+0x60>
 8002cdc:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8002ce0:	42a9      	cmp	r1, r5
 8002ce2:	d104      	bne.n	8002cee <_sungetc_r+0x60>
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	3201      	adds	r2, #1
 8002ce8:	6023      	str	r3, [r4, #0]
 8002cea:	6062      	str	r2, [r4, #4]
 8002cec:	e7d5      	b.n	8002c9a <_sungetc_r+0xc>
 8002cee:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8002cf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002cf6:	6363      	str	r3, [r4, #52]	; 0x34
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	63a3      	str	r3, [r4, #56]	; 0x38
 8002cfc:	4623      	mov	r3, r4
 8002cfe:	f803 5f46 	strb.w	r5, [r3, #70]!
 8002d02:	6023      	str	r3, [r4, #0]
 8002d04:	2301      	movs	r3, #1
 8002d06:	e7dc      	b.n	8002cc2 <_sungetc_r+0x34>

08002d08 <__ssrefill_r>:
 8002d08:	b510      	push	{r4, lr}
 8002d0a:	460c      	mov	r4, r1
 8002d0c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8002d0e:	b169      	cbz	r1, 8002d2c <__ssrefill_r+0x24>
 8002d10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d14:	4299      	cmp	r1, r3
 8002d16:	d001      	beq.n	8002d1c <__ssrefill_r+0x14>
 8002d18:	f000 fc52 	bl	80035c0 <_free_r>
 8002d1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d1e:	6063      	str	r3, [r4, #4]
 8002d20:	2000      	movs	r0, #0
 8002d22:	6360      	str	r0, [r4, #52]	; 0x34
 8002d24:	b113      	cbz	r3, 8002d2c <__ssrefill_r+0x24>
 8002d26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002d28:	6023      	str	r3, [r4, #0]
 8002d2a:	bd10      	pop	{r4, pc}
 8002d2c:	6923      	ldr	r3, [r4, #16]
 8002d2e:	6023      	str	r3, [r4, #0]
 8002d30:	2300      	movs	r3, #0
 8002d32:	6063      	str	r3, [r4, #4]
 8002d34:	89a3      	ldrh	r3, [r4, #12]
 8002d36:	f043 0320 	orr.w	r3, r3, #32
 8002d3a:	81a3      	strh	r3, [r4, #12]
 8002d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d40:	e7f3      	b.n	8002d2a <__ssrefill_r+0x22>
	...

08002d44 <__ssvfiscanf_r>:
 8002d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d48:	460c      	mov	r4, r1
 8002d4a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8002d4e:	2100      	movs	r1, #0
 8002d50:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8002d54:	49b2      	ldr	r1, [pc, #712]	; (8003020 <__ssvfiscanf_r+0x2dc>)
 8002d56:	91a0      	str	r1, [sp, #640]	; 0x280
 8002d58:	f10d 0804 	add.w	r8, sp, #4
 8002d5c:	49b1      	ldr	r1, [pc, #708]	; (8003024 <__ssvfiscanf_r+0x2e0>)
 8002d5e:	4fb2      	ldr	r7, [pc, #712]	; (8003028 <__ssvfiscanf_r+0x2e4>)
 8002d60:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800302c <__ssvfiscanf_r+0x2e8>
 8002d64:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8002d68:	4606      	mov	r6, r0
 8002d6a:	91a1      	str	r1, [sp, #644]	; 0x284
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	f892 a000 	ldrb.w	sl, [r2]
 8002d72:	f1ba 0f00 	cmp.w	sl, #0
 8002d76:	f000 8151 	beq.w	800301c <__ssvfiscanf_r+0x2d8>
 8002d7a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8002d7e:	f013 0308 	ands.w	r3, r3, #8
 8002d82:	f102 0501 	add.w	r5, r2, #1
 8002d86:	d019      	beq.n	8002dbc <__ssvfiscanf_r+0x78>
 8002d88:	6863      	ldr	r3, [r4, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	dd0f      	ble.n	8002dae <__ssvfiscanf_r+0x6a>
 8002d8e:	6823      	ldr	r3, [r4, #0]
 8002d90:	781a      	ldrb	r2, [r3, #0]
 8002d92:	5cba      	ldrb	r2, [r7, r2]
 8002d94:	0712      	lsls	r2, r2, #28
 8002d96:	d401      	bmi.n	8002d9c <__ssvfiscanf_r+0x58>
 8002d98:	462a      	mov	r2, r5
 8002d9a:	e7e8      	b.n	8002d6e <__ssvfiscanf_r+0x2a>
 8002d9c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8002d9e:	3201      	adds	r2, #1
 8002da0:	9245      	str	r2, [sp, #276]	; 0x114
 8002da2:	6862      	ldr	r2, [r4, #4]
 8002da4:	3301      	adds	r3, #1
 8002da6:	3a01      	subs	r2, #1
 8002da8:	6062      	str	r2, [r4, #4]
 8002daa:	6023      	str	r3, [r4, #0]
 8002dac:	e7ec      	b.n	8002d88 <__ssvfiscanf_r+0x44>
 8002dae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002db0:	4621      	mov	r1, r4
 8002db2:	4630      	mov	r0, r6
 8002db4:	4798      	blx	r3
 8002db6:	2800      	cmp	r0, #0
 8002db8:	d0e9      	beq.n	8002d8e <__ssvfiscanf_r+0x4a>
 8002dba:	e7ed      	b.n	8002d98 <__ssvfiscanf_r+0x54>
 8002dbc:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8002dc0:	f040 8083 	bne.w	8002eca <__ssvfiscanf_r+0x186>
 8002dc4:	9341      	str	r3, [sp, #260]	; 0x104
 8002dc6:	9343      	str	r3, [sp, #268]	; 0x10c
 8002dc8:	7853      	ldrb	r3, [r2, #1]
 8002dca:	2b2a      	cmp	r3, #42	; 0x2a
 8002dcc:	bf02      	ittt	eq
 8002dce:	2310      	moveq	r3, #16
 8002dd0:	1c95      	addeq	r5, r2, #2
 8002dd2:	9341      	streq	r3, [sp, #260]	; 0x104
 8002dd4:	220a      	movs	r2, #10
 8002dd6:	46ab      	mov	fp, r5
 8002dd8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8002ddc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8002de0:	2b09      	cmp	r3, #9
 8002de2:	d91d      	bls.n	8002e20 <__ssvfiscanf_r+0xdc>
 8002de4:	4891      	ldr	r0, [pc, #580]	; (800302c <__ssvfiscanf_r+0x2e8>)
 8002de6:	2203      	movs	r2, #3
 8002de8:	f7fd f9fa 	bl	80001e0 <memchr>
 8002dec:	b140      	cbz	r0, 8002e00 <__ssvfiscanf_r+0xbc>
 8002dee:	2301      	movs	r3, #1
 8002df0:	eba0 0009 	sub.w	r0, r0, r9
 8002df4:	fa03 f000 	lsl.w	r0, r3, r0
 8002df8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002dfa:	4318      	orrs	r0, r3
 8002dfc:	9041      	str	r0, [sp, #260]	; 0x104
 8002dfe:	465d      	mov	r5, fp
 8002e00:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002e04:	2b78      	cmp	r3, #120	; 0x78
 8002e06:	d806      	bhi.n	8002e16 <__ssvfiscanf_r+0xd2>
 8002e08:	2b57      	cmp	r3, #87	; 0x57
 8002e0a:	d810      	bhi.n	8002e2e <__ssvfiscanf_r+0xea>
 8002e0c:	2b25      	cmp	r3, #37	; 0x25
 8002e0e:	d05c      	beq.n	8002eca <__ssvfiscanf_r+0x186>
 8002e10:	d856      	bhi.n	8002ec0 <__ssvfiscanf_r+0x17c>
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d074      	beq.n	8002f00 <__ssvfiscanf_r+0x1bc>
 8002e16:	2303      	movs	r3, #3
 8002e18:	9347      	str	r3, [sp, #284]	; 0x11c
 8002e1a:	230a      	movs	r3, #10
 8002e1c:	9342      	str	r3, [sp, #264]	; 0x108
 8002e1e:	e081      	b.n	8002f24 <__ssvfiscanf_r+0x1e0>
 8002e20:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8002e22:	fb02 1303 	mla	r3, r2, r3, r1
 8002e26:	3b30      	subs	r3, #48	; 0x30
 8002e28:	9343      	str	r3, [sp, #268]	; 0x10c
 8002e2a:	465d      	mov	r5, fp
 8002e2c:	e7d3      	b.n	8002dd6 <__ssvfiscanf_r+0x92>
 8002e2e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8002e32:	2a20      	cmp	r2, #32
 8002e34:	d8ef      	bhi.n	8002e16 <__ssvfiscanf_r+0xd2>
 8002e36:	a101      	add	r1, pc, #4	; (adr r1, 8002e3c <__ssvfiscanf_r+0xf8>)
 8002e38:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002e3c:	08002f0f 	.word	0x08002f0f
 8002e40:	08002e17 	.word	0x08002e17
 8002e44:	08002e17 	.word	0x08002e17
 8002e48:	08002f6d 	.word	0x08002f6d
 8002e4c:	08002e17 	.word	0x08002e17
 8002e50:	08002e17 	.word	0x08002e17
 8002e54:	08002e17 	.word	0x08002e17
 8002e58:	08002e17 	.word	0x08002e17
 8002e5c:	08002e17 	.word	0x08002e17
 8002e60:	08002e17 	.word	0x08002e17
 8002e64:	08002e17 	.word	0x08002e17
 8002e68:	08002f83 	.word	0x08002f83
 8002e6c:	08002f59 	.word	0x08002f59
 8002e70:	08002ec7 	.word	0x08002ec7
 8002e74:	08002ec7 	.word	0x08002ec7
 8002e78:	08002ec7 	.word	0x08002ec7
 8002e7c:	08002e17 	.word	0x08002e17
 8002e80:	08002f5d 	.word	0x08002f5d
 8002e84:	08002e17 	.word	0x08002e17
 8002e88:	08002e17 	.word	0x08002e17
 8002e8c:	08002e17 	.word	0x08002e17
 8002e90:	08002e17 	.word	0x08002e17
 8002e94:	08002f93 	.word	0x08002f93
 8002e98:	08002f65 	.word	0x08002f65
 8002e9c:	08002f07 	.word	0x08002f07
 8002ea0:	08002e17 	.word	0x08002e17
 8002ea4:	08002e17 	.word	0x08002e17
 8002ea8:	08002f8f 	.word	0x08002f8f
 8002eac:	08002e17 	.word	0x08002e17
 8002eb0:	08002f59 	.word	0x08002f59
 8002eb4:	08002e17 	.word	0x08002e17
 8002eb8:	08002e17 	.word	0x08002e17
 8002ebc:	08002f0f 	.word	0x08002f0f
 8002ec0:	3b45      	subs	r3, #69	; 0x45
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d8a7      	bhi.n	8002e16 <__ssvfiscanf_r+0xd2>
 8002ec6:	2305      	movs	r3, #5
 8002ec8:	e02b      	b.n	8002f22 <__ssvfiscanf_r+0x1de>
 8002eca:	6863      	ldr	r3, [r4, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	dd0d      	ble.n	8002eec <__ssvfiscanf_r+0x1a8>
 8002ed0:	6823      	ldr	r3, [r4, #0]
 8002ed2:	781a      	ldrb	r2, [r3, #0]
 8002ed4:	4552      	cmp	r2, sl
 8002ed6:	f040 80a1 	bne.w	800301c <__ssvfiscanf_r+0x2d8>
 8002eda:	3301      	adds	r3, #1
 8002edc:	6862      	ldr	r2, [r4, #4]
 8002ede:	6023      	str	r3, [r4, #0]
 8002ee0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8002ee2:	3a01      	subs	r2, #1
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	6062      	str	r2, [r4, #4]
 8002ee8:	9345      	str	r3, [sp, #276]	; 0x114
 8002eea:	e755      	b.n	8002d98 <__ssvfiscanf_r+0x54>
 8002eec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002eee:	4621      	mov	r1, r4
 8002ef0:	4630      	mov	r0, r6
 8002ef2:	4798      	blx	r3
 8002ef4:	2800      	cmp	r0, #0
 8002ef6:	d0eb      	beq.n	8002ed0 <__ssvfiscanf_r+0x18c>
 8002ef8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8002efa:	2800      	cmp	r0, #0
 8002efc:	f040 8084 	bne.w	8003008 <__ssvfiscanf_r+0x2c4>
 8002f00:	f04f 30ff 	mov.w	r0, #4294967295
 8002f04:	e086      	b.n	8003014 <__ssvfiscanf_r+0x2d0>
 8002f06:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8002f08:	f042 0220 	orr.w	r2, r2, #32
 8002f0c:	9241      	str	r2, [sp, #260]	; 0x104
 8002f0e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8002f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f14:	9241      	str	r2, [sp, #260]	; 0x104
 8002f16:	2210      	movs	r2, #16
 8002f18:	2b6f      	cmp	r3, #111	; 0x6f
 8002f1a:	9242      	str	r2, [sp, #264]	; 0x108
 8002f1c:	bf34      	ite	cc
 8002f1e:	2303      	movcc	r3, #3
 8002f20:	2304      	movcs	r3, #4
 8002f22:	9347      	str	r3, [sp, #284]	; 0x11c
 8002f24:	6863      	ldr	r3, [r4, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	dd41      	ble.n	8002fae <__ssvfiscanf_r+0x26a>
 8002f2a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002f2c:	0659      	lsls	r1, r3, #25
 8002f2e:	d404      	bmi.n	8002f3a <__ssvfiscanf_r+0x1f6>
 8002f30:	6823      	ldr	r3, [r4, #0]
 8002f32:	781a      	ldrb	r2, [r3, #0]
 8002f34:	5cba      	ldrb	r2, [r7, r2]
 8002f36:	0712      	lsls	r2, r2, #28
 8002f38:	d440      	bmi.n	8002fbc <__ssvfiscanf_r+0x278>
 8002f3a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	dc4f      	bgt.n	8002fe0 <__ssvfiscanf_r+0x29c>
 8002f40:	466b      	mov	r3, sp
 8002f42:	4622      	mov	r2, r4
 8002f44:	a941      	add	r1, sp, #260	; 0x104
 8002f46:	4630      	mov	r0, r6
 8002f48:	f000 f874 	bl	8003034 <_scanf_chars>
 8002f4c:	2801      	cmp	r0, #1
 8002f4e:	d065      	beq.n	800301c <__ssvfiscanf_r+0x2d8>
 8002f50:	2802      	cmp	r0, #2
 8002f52:	f47f af21 	bne.w	8002d98 <__ssvfiscanf_r+0x54>
 8002f56:	e7cf      	b.n	8002ef8 <__ssvfiscanf_r+0x1b4>
 8002f58:	220a      	movs	r2, #10
 8002f5a:	e7dd      	b.n	8002f18 <__ssvfiscanf_r+0x1d4>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	9342      	str	r3, [sp, #264]	; 0x108
 8002f60:	2303      	movs	r3, #3
 8002f62:	e7de      	b.n	8002f22 <__ssvfiscanf_r+0x1de>
 8002f64:	2308      	movs	r3, #8
 8002f66:	9342      	str	r3, [sp, #264]	; 0x108
 8002f68:	2304      	movs	r3, #4
 8002f6a:	e7da      	b.n	8002f22 <__ssvfiscanf_r+0x1de>
 8002f6c:	4629      	mov	r1, r5
 8002f6e:	4640      	mov	r0, r8
 8002f70:	f000 f9ac 	bl	80032cc <__sccl>
 8002f74:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002f76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f7a:	9341      	str	r3, [sp, #260]	; 0x104
 8002f7c:	4605      	mov	r5, r0
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e7cf      	b.n	8002f22 <__ssvfiscanf_r+0x1de>
 8002f82:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f88:	9341      	str	r3, [sp, #260]	; 0x104
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e7c9      	b.n	8002f22 <__ssvfiscanf_r+0x1de>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e7c7      	b.n	8002f22 <__ssvfiscanf_r+0x1de>
 8002f92:	9841      	ldr	r0, [sp, #260]	; 0x104
 8002f94:	06c3      	lsls	r3, r0, #27
 8002f96:	f53f aeff 	bmi.w	8002d98 <__ssvfiscanf_r+0x54>
 8002f9a:	9b00      	ldr	r3, [sp, #0]
 8002f9c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8002f9e:	1d19      	adds	r1, r3, #4
 8002fa0:	9100      	str	r1, [sp, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	07c0      	lsls	r0, r0, #31
 8002fa6:	bf4c      	ite	mi
 8002fa8:	801a      	strhmi	r2, [r3, #0]
 8002faa:	601a      	strpl	r2, [r3, #0]
 8002fac:	e6f4      	b.n	8002d98 <__ssvfiscanf_r+0x54>
 8002fae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002fb0:	4621      	mov	r1, r4
 8002fb2:	4630      	mov	r0, r6
 8002fb4:	4798      	blx	r3
 8002fb6:	2800      	cmp	r0, #0
 8002fb8:	d0b7      	beq.n	8002f2a <__ssvfiscanf_r+0x1e6>
 8002fba:	e79d      	b.n	8002ef8 <__ssvfiscanf_r+0x1b4>
 8002fbc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8002fbe:	3201      	adds	r2, #1
 8002fc0:	9245      	str	r2, [sp, #276]	; 0x114
 8002fc2:	6862      	ldr	r2, [r4, #4]
 8002fc4:	3a01      	subs	r2, #1
 8002fc6:	2a00      	cmp	r2, #0
 8002fc8:	6062      	str	r2, [r4, #4]
 8002fca:	dd02      	ble.n	8002fd2 <__ssvfiscanf_r+0x28e>
 8002fcc:	3301      	adds	r3, #1
 8002fce:	6023      	str	r3, [r4, #0]
 8002fd0:	e7ae      	b.n	8002f30 <__ssvfiscanf_r+0x1ec>
 8002fd2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002fd4:	4621      	mov	r1, r4
 8002fd6:	4630      	mov	r0, r6
 8002fd8:	4798      	blx	r3
 8002fda:	2800      	cmp	r0, #0
 8002fdc:	d0a8      	beq.n	8002f30 <__ssvfiscanf_r+0x1ec>
 8002fde:	e78b      	b.n	8002ef8 <__ssvfiscanf_r+0x1b4>
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	dc06      	bgt.n	8002ff2 <__ssvfiscanf_r+0x2ae>
 8002fe4:	466b      	mov	r3, sp
 8002fe6:	4622      	mov	r2, r4
 8002fe8:	a941      	add	r1, sp, #260	; 0x104
 8002fea:	4630      	mov	r0, r6
 8002fec:	f000 f87a 	bl	80030e4 <_scanf_i>
 8002ff0:	e7ac      	b.n	8002f4c <__ssvfiscanf_r+0x208>
 8002ff2:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <__ssvfiscanf_r+0x2ec>)
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f43f aecf 	beq.w	8002d98 <__ssvfiscanf_r+0x54>
 8002ffa:	466b      	mov	r3, sp
 8002ffc:	4622      	mov	r2, r4
 8002ffe:	a941      	add	r1, sp, #260	; 0x104
 8003000:	4630      	mov	r0, r6
 8003002:	f3af 8000 	nop.w
 8003006:	e7a1      	b.n	8002f4c <__ssvfiscanf_r+0x208>
 8003008:	89a3      	ldrh	r3, [r4, #12]
 800300a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800300e:	bf18      	it	ne
 8003010:	f04f 30ff 	movne.w	r0, #4294967295
 8003014:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8003018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800301c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800301e:	e7f9      	b.n	8003014 <__ssvfiscanf_r+0x2d0>
 8003020:	08002c8f 	.word	0x08002c8f
 8003024:	08002d09 	.word	0x08002d09
 8003028:	08003898 	.word	0x08003898
 800302c:	08003878 	.word	0x08003878
 8003030:	00000000 	.word	0x00000000

08003034 <_scanf_chars>:
 8003034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003038:	4615      	mov	r5, r2
 800303a:	688a      	ldr	r2, [r1, #8]
 800303c:	4680      	mov	r8, r0
 800303e:	460c      	mov	r4, r1
 8003040:	b932      	cbnz	r2, 8003050 <_scanf_chars+0x1c>
 8003042:	698a      	ldr	r2, [r1, #24]
 8003044:	2a00      	cmp	r2, #0
 8003046:	bf0c      	ite	eq
 8003048:	2201      	moveq	r2, #1
 800304a:	f04f 32ff 	movne.w	r2, #4294967295
 800304e:	608a      	str	r2, [r1, #8]
 8003050:	6822      	ldr	r2, [r4, #0]
 8003052:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80030e0 <_scanf_chars+0xac>
 8003056:	06d1      	lsls	r1, r2, #27
 8003058:	bf5f      	itttt	pl
 800305a:	681a      	ldrpl	r2, [r3, #0]
 800305c:	1d11      	addpl	r1, r2, #4
 800305e:	6019      	strpl	r1, [r3, #0]
 8003060:	6816      	ldrpl	r6, [r2, #0]
 8003062:	2700      	movs	r7, #0
 8003064:	69a0      	ldr	r0, [r4, #24]
 8003066:	b188      	cbz	r0, 800308c <_scanf_chars+0x58>
 8003068:	2801      	cmp	r0, #1
 800306a:	d107      	bne.n	800307c <_scanf_chars+0x48>
 800306c:	682b      	ldr	r3, [r5, #0]
 800306e:	781a      	ldrb	r2, [r3, #0]
 8003070:	6963      	ldr	r3, [r4, #20]
 8003072:	5c9b      	ldrb	r3, [r3, r2]
 8003074:	b953      	cbnz	r3, 800308c <_scanf_chars+0x58>
 8003076:	bb27      	cbnz	r7, 80030c2 <_scanf_chars+0x8e>
 8003078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800307c:	2802      	cmp	r0, #2
 800307e:	d120      	bne.n	80030c2 <_scanf_chars+0x8e>
 8003080:	682b      	ldr	r3, [r5, #0]
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	f813 3009 	ldrb.w	r3, [r3, r9]
 8003088:	071b      	lsls	r3, r3, #28
 800308a:	d41a      	bmi.n	80030c2 <_scanf_chars+0x8e>
 800308c:	6823      	ldr	r3, [r4, #0]
 800308e:	06da      	lsls	r2, r3, #27
 8003090:	bf5e      	ittt	pl
 8003092:	682b      	ldrpl	r3, [r5, #0]
 8003094:	781b      	ldrbpl	r3, [r3, #0]
 8003096:	f806 3b01 	strbpl.w	r3, [r6], #1
 800309a:	682a      	ldr	r2, [r5, #0]
 800309c:	686b      	ldr	r3, [r5, #4]
 800309e:	3201      	adds	r2, #1
 80030a0:	602a      	str	r2, [r5, #0]
 80030a2:	68a2      	ldr	r2, [r4, #8]
 80030a4:	3b01      	subs	r3, #1
 80030a6:	3a01      	subs	r2, #1
 80030a8:	606b      	str	r3, [r5, #4]
 80030aa:	3701      	adds	r7, #1
 80030ac:	60a2      	str	r2, [r4, #8]
 80030ae:	b142      	cbz	r2, 80030c2 <_scanf_chars+0x8e>
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	dcd7      	bgt.n	8003064 <_scanf_chars+0x30>
 80030b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80030b8:	4629      	mov	r1, r5
 80030ba:	4640      	mov	r0, r8
 80030bc:	4798      	blx	r3
 80030be:	2800      	cmp	r0, #0
 80030c0:	d0d0      	beq.n	8003064 <_scanf_chars+0x30>
 80030c2:	6823      	ldr	r3, [r4, #0]
 80030c4:	f013 0310 	ands.w	r3, r3, #16
 80030c8:	d105      	bne.n	80030d6 <_scanf_chars+0xa2>
 80030ca:	68e2      	ldr	r2, [r4, #12]
 80030cc:	3201      	adds	r2, #1
 80030ce:	60e2      	str	r2, [r4, #12]
 80030d0:	69a2      	ldr	r2, [r4, #24]
 80030d2:	b102      	cbz	r2, 80030d6 <_scanf_chars+0xa2>
 80030d4:	7033      	strb	r3, [r6, #0]
 80030d6:	6923      	ldr	r3, [r4, #16]
 80030d8:	441f      	add	r7, r3
 80030da:	6127      	str	r7, [r4, #16]
 80030dc:	2000      	movs	r0, #0
 80030de:	e7cb      	b.n	8003078 <_scanf_chars+0x44>
 80030e0:	08003898 	.word	0x08003898

080030e4 <_scanf_i>:
 80030e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030e8:	4698      	mov	r8, r3
 80030ea:	4b74      	ldr	r3, [pc, #464]	; (80032bc <_scanf_i+0x1d8>)
 80030ec:	460c      	mov	r4, r1
 80030ee:	4682      	mov	sl, r0
 80030f0:	4616      	mov	r6, r2
 80030f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80030f6:	b087      	sub	sp, #28
 80030f8:	ab03      	add	r3, sp, #12
 80030fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80030fe:	4b70      	ldr	r3, [pc, #448]	; (80032c0 <_scanf_i+0x1dc>)
 8003100:	69a1      	ldr	r1, [r4, #24]
 8003102:	4a70      	ldr	r2, [pc, #448]	; (80032c4 <_scanf_i+0x1e0>)
 8003104:	2903      	cmp	r1, #3
 8003106:	bf18      	it	ne
 8003108:	461a      	movne	r2, r3
 800310a:	68a3      	ldr	r3, [r4, #8]
 800310c:	9201      	str	r2, [sp, #4]
 800310e:	1e5a      	subs	r2, r3, #1
 8003110:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003114:	bf88      	it	hi
 8003116:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800311a:	4627      	mov	r7, r4
 800311c:	bf82      	ittt	hi
 800311e:	eb03 0905 	addhi.w	r9, r3, r5
 8003122:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003126:	60a3      	strhi	r3, [r4, #8]
 8003128:	f857 3b1c 	ldr.w	r3, [r7], #28
 800312c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8003130:	bf98      	it	ls
 8003132:	f04f 0900 	movls.w	r9, #0
 8003136:	6023      	str	r3, [r4, #0]
 8003138:	463d      	mov	r5, r7
 800313a:	f04f 0b00 	mov.w	fp, #0
 800313e:	6831      	ldr	r1, [r6, #0]
 8003140:	ab03      	add	r3, sp, #12
 8003142:	7809      	ldrb	r1, [r1, #0]
 8003144:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003148:	2202      	movs	r2, #2
 800314a:	f7fd f849 	bl	80001e0 <memchr>
 800314e:	b328      	cbz	r0, 800319c <_scanf_i+0xb8>
 8003150:	f1bb 0f01 	cmp.w	fp, #1
 8003154:	d159      	bne.n	800320a <_scanf_i+0x126>
 8003156:	6862      	ldr	r2, [r4, #4]
 8003158:	b92a      	cbnz	r2, 8003166 <_scanf_i+0x82>
 800315a:	6822      	ldr	r2, [r4, #0]
 800315c:	2308      	movs	r3, #8
 800315e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003162:	6063      	str	r3, [r4, #4]
 8003164:	6022      	str	r2, [r4, #0]
 8003166:	6822      	ldr	r2, [r4, #0]
 8003168:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800316c:	6022      	str	r2, [r4, #0]
 800316e:	68a2      	ldr	r2, [r4, #8]
 8003170:	1e51      	subs	r1, r2, #1
 8003172:	60a1      	str	r1, [r4, #8]
 8003174:	b192      	cbz	r2, 800319c <_scanf_i+0xb8>
 8003176:	6832      	ldr	r2, [r6, #0]
 8003178:	1c51      	adds	r1, r2, #1
 800317a:	6031      	str	r1, [r6, #0]
 800317c:	7812      	ldrb	r2, [r2, #0]
 800317e:	f805 2b01 	strb.w	r2, [r5], #1
 8003182:	6872      	ldr	r2, [r6, #4]
 8003184:	3a01      	subs	r2, #1
 8003186:	2a00      	cmp	r2, #0
 8003188:	6072      	str	r2, [r6, #4]
 800318a:	dc07      	bgt.n	800319c <_scanf_i+0xb8>
 800318c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8003190:	4631      	mov	r1, r6
 8003192:	4650      	mov	r0, sl
 8003194:	4790      	blx	r2
 8003196:	2800      	cmp	r0, #0
 8003198:	f040 8085 	bne.w	80032a6 <_scanf_i+0x1c2>
 800319c:	f10b 0b01 	add.w	fp, fp, #1
 80031a0:	f1bb 0f03 	cmp.w	fp, #3
 80031a4:	d1cb      	bne.n	800313e <_scanf_i+0x5a>
 80031a6:	6863      	ldr	r3, [r4, #4]
 80031a8:	b90b      	cbnz	r3, 80031ae <_scanf_i+0xca>
 80031aa:	230a      	movs	r3, #10
 80031ac:	6063      	str	r3, [r4, #4]
 80031ae:	6863      	ldr	r3, [r4, #4]
 80031b0:	4945      	ldr	r1, [pc, #276]	; (80032c8 <_scanf_i+0x1e4>)
 80031b2:	6960      	ldr	r0, [r4, #20]
 80031b4:	1ac9      	subs	r1, r1, r3
 80031b6:	f000 f889 	bl	80032cc <__sccl>
 80031ba:	f04f 0b00 	mov.w	fp, #0
 80031be:	68a3      	ldr	r3, [r4, #8]
 80031c0:	6822      	ldr	r2, [r4, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d03d      	beq.n	8003242 <_scanf_i+0x15e>
 80031c6:	6831      	ldr	r1, [r6, #0]
 80031c8:	6960      	ldr	r0, [r4, #20]
 80031ca:	f891 c000 	ldrb.w	ip, [r1]
 80031ce:	f810 000c 	ldrb.w	r0, [r0, ip]
 80031d2:	2800      	cmp	r0, #0
 80031d4:	d035      	beq.n	8003242 <_scanf_i+0x15e>
 80031d6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80031da:	d124      	bne.n	8003226 <_scanf_i+0x142>
 80031dc:	0510      	lsls	r0, r2, #20
 80031de:	d522      	bpl.n	8003226 <_scanf_i+0x142>
 80031e0:	f10b 0b01 	add.w	fp, fp, #1
 80031e4:	f1b9 0f00 	cmp.w	r9, #0
 80031e8:	d003      	beq.n	80031f2 <_scanf_i+0x10e>
 80031ea:	3301      	adds	r3, #1
 80031ec:	f109 39ff 	add.w	r9, r9, #4294967295
 80031f0:	60a3      	str	r3, [r4, #8]
 80031f2:	6873      	ldr	r3, [r6, #4]
 80031f4:	3b01      	subs	r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	6073      	str	r3, [r6, #4]
 80031fa:	dd1b      	ble.n	8003234 <_scanf_i+0x150>
 80031fc:	6833      	ldr	r3, [r6, #0]
 80031fe:	3301      	adds	r3, #1
 8003200:	6033      	str	r3, [r6, #0]
 8003202:	68a3      	ldr	r3, [r4, #8]
 8003204:	3b01      	subs	r3, #1
 8003206:	60a3      	str	r3, [r4, #8]
 8003208:	e7d9      	b.n	80031be <_scanf_i+0xda>
 800320a:	f1bb 0f02 	cmp.w	fp, #2
 800320e:	d1ae      	bne.n	800316e <_scanf_i+0x8a>
 8003210:	6822      	ldr	r2, [r4, #0]
 8003212:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8003216:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800321a:	d1bf      	bne.n	800319c <_scanf_i+0xb8>
 800321c:	2310      	movs	r3, #16
 800321e:	6063      	str	r3, [r4, #4]
 8003220:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003224:	e7a2      	b.n	800316c <_scanf_i+0x88>
 8003226:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800322a:	6022      	str	r2, [r4, #0]
 800322c:	780b      	ldrb	r3, [r1, #0]
 800322e:	f805 3b01 	strb.w	r3, [r5], #1
 8003232:	e7de      	b.n	80031f2 <_scanf_i+0x10e>
 8003234:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003238:	4631      	mov	r1, r6
 800323a:	4650      	mov	r0, sl
 800323c:	4798      	blx	r3
 800323e:	2800      	cmp	r0, #0
 8003240:	d0df      	beq.n	8003202 <_scanf_i+0x11e>
 8003242:	6823      	ldr	r3, [r4, #0]
 8003244:	05d9      	lsls	r1, r3, #23
 8003246:	d50d      	bpl.n	8003264 <_scanf_i+0x180>
 8003248:	42bd      	cmp	r5, r7
 800324a:	d909      	bls.n	8003260 <_scanf_i+0x17c>
 800324c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003250:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003254:	4632      	mov	r2, r6
 8003256:	4650      	mov	r0, sl
 8003258:	4798      	blx	r3
 800325a:	f105 39ff 	add.w	r9, r5, #4294967295
 800325e:	464d      	mov	r5, r9
 8003260:	42bd      	cmp	r5, r7
 8003262:	d028      	beq.n	80032b6 <_scanf_i+0x1d2>
 8003264:	6822      	ldr	r2, [r4, #0]
 8003266:	f012 0210 	ands.w	r2, r2, #16
 800326a:	d113      	bne.n	8003294 <_scanf_i+0x1b0>
 800326c:	702a      	strb	r2, [r5, #0]
 800326e:	6863      	ldr	r3, [r4, #4]
 8003270:	9e01      	ldr	r6, [sp, #4]
 8003272:	4639      	mov	r1, r7
 8003274:	4650      	mov	r0, sl
 8003276:	47b0      	blx	r6
 8003278:	f8d8 3000 	ldr.w	r3, [r8]
 800327c:	6821      	ldr	r1, [r4, #0]
 800327e:	1d1a      	adds	r2, r3, #4
 8003280:	f8c8 2000 	str.w	r2, [r8]
 8003284:	f011 0f20 	tst.w	r1, #32
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	d00f      	beq.n	80032ac <_scanf_i+0x1c8>
 800328c:	6018      	str	r0, [r3, #0]
 800328e:	68e3      	ldr	r3, [r4, #12]
 8003290:	3301      	adds	r3, #1
 8003292:	60e3      	str	r3, [r4, #12]
 8003294:	1bed      	subs	r5, r5, r7
 8003296:	44ab      	add	fp, r5
 8003298:	6925      	ldr	r5, [r4, #16]
 800329a:	445d      	add	r5, fp
 800329c:	6125      	str	r5, [r4, #16]
 800329e:	2000      	movs	r0, #0
 80032a0:	b007      	add	sp, #28
 80032a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032a6:	f04f 0b00 	mov.w	fp, #0
 80032aa:	e7ca      	b.n	8003242 <_scanf_i+0x15e>
 80032ac:	07ca      	lsls	r2, r1, #31
 80032ae:	bf4c      	ite	mi
 80032b0:	8018      	strhmi	r0, [r3, #0]
 80032b2:	6018      	strpl	r0, [r3, #0]
 80032b4:	e7eb      	b.n	800328e <_scanf_i+0x1aa>
 80032b6:	2001      	movs	r0, #1
 80032b8:	e7f2      	b.n	80032a0 <_scanf_i+0x1bc>
 80032ba:	bf00      	nop
 80032bc:	08003854 	.word	0x08003854
 80032c0:	08003545 	.word	0x08003545
 80032c4:	08003449 	.word	0x08003449
 80032c8:	08003895 	.word	0x08003895

080032cc <__sccl>:
 80032cc:	b570      	push	{r4, r5, r6, lr}
 80032ce:	780b      	ldrb	r3, [r1, #0]
 80032d0:	4604      	mov	r4, r0
 80032d2:	2b5e      	cmp	r3, #94	; 0x5e
 80032d4:	bf0b      	itete	eq
 80032d6:	784b      	ldrbeq	r3, [r1, #1]
 80032d8:	1c48      	addne	r0, r1, #1
 80032da:	1c88      	addeq	r0, r1, #2
 80032dc:	2200      	movne	r2, #0
 80032de:	bf08      	it	eq
 80032e0:	2201      	moveq	r2, #1
 80032e2:	1e61      	subs	r1, r4, #1
 80032e4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80032e8:	f801 2f01 	strb.w	r2, [r1, #1]!
 80032ec:	42a9      	cmp	r1, r5
 80032ee:	d1fb      	bne.n	80032e8 <__sccl+0x1c>
 80032f0:	b90b      	cbnz	r3, 80032f6 <__sccl+0x2a>
 80032f2:	3801      	subs	r0, #1
 80032f4:	bd70      	pop	{r4, r5, r6, pc}
 80032f6:	f082 0101 	eor.w	r1, r2, #1
 80032fa:	54e1      	strb	r1, [r4, r3]
 80032fc:	1c42      	adds	r2, r0, #1
 80032fe:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8003302:	2d2d      	cmp	r5, #45	; 0x2d
 8003304:	f102 36ff 	add.w	r6, r2, #4294967295
 8003308:	4610      	mov	r0, r2
 800330a:	d006      	beq.n	800331a <__sccl+0x4e>
 800330c:	2d5d      	cmp	r5, #93	; 0x5d
 800330e:	d0f1      	beq.n	80032f4 <__sccl+0x28>
 8003310:	b90d      	cbnz	r5, 8003316 <__sccl+0x4a>
 8003312:	4630      	mov	r0, r6
 8003314:	e7ee      	b.n	80032f4 <__sccl+0x28>
 8003316:	462b      	mov	r3, r5
 8003318:	e7ef      	b.n	80032fa <__sccl+0x2e>
 800331a:	7816      	ldrb	r6, [r2, #0]
 800331c:	2e5d      	cmp	r6, #93	; 0x5d
 800331e:	d0fa      	beq.n	8003316 <__sccl+0x4a>
 8003320:	42b3      	cmp	r3, r6
 8003322:	dcf8      	bgt.n	8003316 <__sccl+0x4a>
 8003324:	4618      	mov	r0, r3
 8003326:	3001      	adds	r0, #1
 8003328:	4286      	cmp	r6, r0
 800332a:	5421      	strb	r1, [r4, r0]
 800332c:	dcfb      	bgt.n	8003326 <__sccl+0x5a>
 800332e:	43d8      	mvns	r0, r3
 8003330:	4430      	add	r0, r6
 8003332:	1c5d      	adds	r5, r3, #1
 8003334:	42b3      	cmp	r3, r6
 8003336:	bfa8      	it	ge
 8003338:	2000      	movge	r0, #0
 800333a:	182b      	adds	r3, r5, r0
 800333c:	3202      	adds	r2, #2
 800333e:	e7de      	b.n	80032fe <__sccl+0x32>

08003340 <_strtol_l.isra.0>:
 8003340:	2b01      	cmp	r3, #1
 8003342:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003346:	d001      	beq.n	800334c <_strtol_l.isra.0+0xc>
 8003348:	2b24      	cmp	r3, #36	; 0x24
 800334a:	d906      	bls.n	800335a <_strtol_l.isra.0+0x1a>
 800334c:	f7ff fc1a 	bl	8002b84 <__errno>
 8003350:	2316      	movs	r3, #22
 8003352:	6003      	str	r3, [r0, #0]
 8003354:	2000      	movs	r0, #0
 8003356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800335a:	4f3a      	ldr	r7, [pc, #232]	; (8003444 <_strtol_l.isra.0+0x104>)
 800335c:	468e      	mov	lr, r1
 800335e:	4676      	mov	r6, lr
 8003360:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003364:	5de5      	ldrb	r5, [r4, r7]
 8003366:	f015 0508 	ands.w	r5, r5, #8
 800336a:	d1f8      	bne.n	800335e <_strtol_l.isra.0+0x1e>
 800336c:	2c2d      	cmp	r4, #45	; 0x2d
 800336e:	d134      	bne.n	80033da <_strtol_l.isra.0+0x9a>
 8003370:	f89e 4000 	ldrb.w	r4, [lr]
 8003374:	f04f 0801 	mov.w	r8, #1
 8003378:	f106 0e02 	add.w	lr, r6, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d05c      	beq.n	800343a <_strtol_l.isra.0+0xfa>
 8003380:	2b10      	cmp	r3, #16
 8003382:	d10c      	bne.n	800339e <_strtol_l.isra.0+0x5e>
 8003384:	2c30      	cmp	r4, #48	; 0x30
 8003386:	d10a      	bne.n	800339e <_strtol_l.isra.0+0x5e>
 8003388:	f89e 4000 	ldrb.w	r4, [lr]
 800338c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003390:	2c58      	cmp	r4, #88	; 0x58
 8003392:	d14d      	bne.n	8003430 <_strtol_l.isra.0+0xf0>
 8003394:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8003398:	2310      	movs	r3, #16
 800339a:	f10e 0e02 	add.w	lr, lr, #2
 800339e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80033a2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80033a6:	2600      	movs	r6, #0
 80033a8:	fbbc f9f3 	udiv	r9, ip, r3
 80033ac:	4635      	mov	r5, r6
 80033ae:	fb03 ca19 	mls	sl, r3, r9, ip
 80033b2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80033b6:	2f09      	cmp	r7, #9
 80033b8:	d818      	bhi.n	80033ec <_strtol_l.isra.0+0xac>
 80033ba:	463c      	mov	r4, r7
 80033bc:	42a3      	cmp	r3, r4
 80033be:	dd24      	ble.n	800340a <_strtol_l.isra.0+0xca>
 80033c0:	2e00      	cmp	r6, #0
 80033c2:	db1f      	blt.n	8003404 <_strtol_l.isra.0+0xc4>
 80033c4:	45a9      	cmp	r9, r5
 80033c6:	d31d      	bcc.n	8003404 <_strtol_l.isra.0+0xc4>
 80033c8:	d101      	bne.n	80033ce <_strtol_l.isra.0+0x8e>
 80033ca:	45a2      	cmp	sl, r4
 80033cc:	db1a      	blt.n	8003404 <_strtol_l.isra.0+0xc4>
 80033ce:	fb05 4503 	mla	r5, r5, r3, r4
 80033d2:	2601      	movs	r6, #1
 80033d4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80033d8:	e7eb      	b.n	80033b2 <_strtol_l.isra.0+0x72>
 80033da:	2c2b      	cmp	r4, #43	; 0x2b
 80033dc:	bf08      	it	eq
 80033de:	f89e 4000 	ldrbeq.w	r4, [lr]
 80033e2:	46a8      	mov	r8, r5
 80033e4:	bf08      	it	eq
 80033e6:	f106 0e02 	addeq.w	lr, r6, #2
 80033ea:	e7c7      	b.n	800337c <_strtol_l.isra.0+0x3c>
 80033ec:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80033f0:	2f19      	cmp	r7, #25
 80033f2:	d801      	bhi.n	80033f8 <_strtol_l.isra.0+0xb8>
 80033f4:	3c37      	subs	r4, #55	; 0x37
 80033f6:	e7e1      	b.n	80033bc <_strtol_l.isra.0+0x7c>
 80033f8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80033fc:	2f19      	cmp	r7, #25
 80033fe:	d804      	bhi.n	800340a <_strtol_l.isra.0+0xca>
 8003400:	3c57      	subs	r4, #87	; 0x57
 8003402:	e7db      	b.n	80033bc <_strtol_l.isra.0+0x7c>
 8003404:	f04f 36ff 	mov.w	r6, #4294967295
 8003408:	e7e4      	b.n	80033d4 <_strtol_l.isra.0+0x94>
 800340a:	2e00      	cmp	r6, #0
 800340c:	da05      	bge.n	800341a <_strtol_l.isra.0+0xda>
 800340e:	2322      	movs	r3, #34	; 0x22
 8003410:	6003      	str	r3, [r0, #0]
 8003412:	4665      	mov	r5, ip
 8003414:	b942      	cbnz	r2, 8003428 <_strtol_l.isra.0+0xe8>
 8003416:	4628      	mov	r0, r5
 8003418:	e79d      	b.n	8003356 <_strtol_l.isra.0+0x16>
 800341a:	f1b8 0f00 	cmp.w	r8, #0
 800341e:	d000      	beq.n	8003422 <_strtol_l.isra.0+0xe2>
 8003420:	426d      	negs	r5, r5
 8003422:	2a00      	cmp	r2, #0
 8003424:	d0f7      	beq.n	8003416 <_strtol_l.isra.0+0xd6>
 8003426:	b10e      	cbz	r6, 800342c <_strtol_l.isra.0+0xec>
 8003428:	f10e 31ff 	add.w	r1, lr, #4294967295
 800342c:	6011      	str	r1, [r2, #0]
 800342e:	e7f2      	b.n	8003416 <_strtol_l.isra.0+0xd6>
 8003430:	2430      	movs	r4, #48	; 0x30
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1b3      	bne.n	800339e <_strtol_l.isra.0+0x5e>
 8003436:	2308      	movs	r3, #8
 8003438:	e7b1      	b.n	800339e <_strtol_l.isra.0+0x5e>
 800343a:	2c30      	cmp	r4, #48	; 0x30
 800343c:	d0a4      	beq.n	8003388 <_strtol_l.isra.0+0x48>
 800343e:	230a      	movs	r3, #10
 8003440:	e7ad      	b.n	800339e <_strtol_l.isra.0+0x5e>
 8003442:	bf00      	nop
 8003444:	08003898 	.word	0x08003898

08003448 <_strtol_r>:
 8003448:	f7ff bf7a 	b.w	8003340 <_strtol_l.isra.0>

0800344c <_strtoul_l.isra.0>:
 800344c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003450:	4e3b      	ldr	r6, [pc, #236]	; (8003540 <_strtoul_l.isra.0+0xf4>)
 8003452:	4686      	mov	lr, r0
 8003454:	468c      	mov	ip, r1
 8003456:	4660      	mov	r0, ip
 8003458:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800345c:	5da5      	ldrb	r5, [r4, r6]
 800345e:	f015 0508 	ands.w	r5, r5, #8
 8003462:	d1f8      	bne.n	8003456 <_strtoul_l.isra.0+0xa>
 8003464:	2c2d      	cmp	r4, #45	; 0x2d
 8003466:	d134      	bne.n	80034d2 <_strtoul_l.isra.0+0x86>
 8003468:	f89c 4000 	ldrb.w	r4, [ip]
 800346c:	f04f 0801 	mov.w	r8, #1
 8003470:	f100 0c02 	add.w	ip, r0, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d05e      	beq.n	8003536 <_strtoul_l.isra.0+0xea>
 8003478:	2b10      	cmp	r3, #16
 800347a:	d10c      	bne.n	8003496 <_strtoul_l.isra.0+0x4a>
 800347c:	2c30      	cmp	r4, #48	; 0x30
 800347e:	d10a      	bne.n	8003496 <_strtoul_l.isra.0+0x4a>
 8003480:	f89c 0000 	ldrb.w	r0, [ip]
 8003484:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003488:	2858      	cmp	r0, #88	; 0x58
 800348a:	d14f      	bne.n	800352c <_strtoul_l.isra.0+0xe0>
 800348c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8003490:	2310      	movs	r3, #16
 8003492:	f10c 0c02 	add.w	ip, ip, #2
 8003496:	f04f 37ff 	mov.w	r7, #4294967295
 800349a:	2500      	movs	r5, #0
 800349c:	fbb7 f7f3 	udiv	r7, r7, r3
 80034a0:	fb03 f907 	mul.w	r9, r3, r7
 80034a4:	ea6f 0909 	mvn.w	r9, r9
 80034a8:	4628      	mov	r0, r5
 80034aa:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80034ae:	2e09      	cmp	r6, #9
 80034b0:	d818      	bhi.n	80034e4 <_strtoul_l.isra.0+0x98>
 80034b2:	4634      	mov	r4, r6
 80034b4:	42a3      	cmp	r3, r4
 80034b6:	dd24      	ble.n	8003502 <_strtoul_l.isra.0+0xb6>
 80034b8:	2d00      	cmp	r5, #0
 80034ba:	db1f      	blt.n	80034fc <_strtoul_l.isra.0+0xb0>
 80034bc:	4287      	cmp	r7, r0
 80034be:	d31d      	bcc.n	80034fc <_strtoul_l.isra.0+0xb0>
 80034c0:	d101      	bne.n	80034c6 <_strtoul_l.isra.0+0x7a>
 80034c2:	45a1      	cmp	r9, r4
 80034c4:	db1a      	blt.n	80034fc <_strtoul_l.isra.0+0xb0>
 80034c6:	fb00 4003 	mla	r0, r0, r3, r4
 80034ca:	2501      	movs	r5, #1
 80034cc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80034d0:	e7eb      	b.n	80034aa <_strtoul_l.isra.0+0x5e>
 80034d2:	2c2b      	cmp	r4, #43	; 0x2b
 80034d4:	bf08      	it	eq
 80034d6:	f89c 4000 	ldrbeq.w	r4, [ip]
 80034da:	46a8      	mov	r8, r5
 80034dc:	bf08      	it	eq
 80034de:	f100 0c02 	addeq.w	ip, r0, #2
 80034e2:	e7c7      	b.n	8003474 <_strtoul_l.isra.0+0x28>
 80034e4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80034e8:	2e19      	cmp	r6, #25
 80034ea:	d801      	bhi.n	80034f0 <_strtoul_l.isra.0+0xa4>
 80034ec:	3c37      	subs	r4, #55	; 0x37
 80034ee:	e7e1      	b.n	80034b4 <_strtoul_l.isra.0+0x68>
 80034f0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80034f4:	2e19      	cmp	r6, #25
 80034f6:	d804      	bhi.n	8003502 <_strtoul_l.isra.0+0xb6>
 80034f8:	3c57      	subs	r4, #87	; 0x57
 80034fa:	e7db      	b.n	80034b4 <_strtoul_l.isra.0+0x68>
 80034fc:	f04f 35ff 	mov.w	r5, #4294967295
 8003500:	e7e4      	b.n	80034cc <_strtoul_l.isra.0+0x80>
 8003502:	2d00      	cmp	r5, #0
 8003504:	da07      	bge.n	8003516 <_strtoul_l.isra.0+0xca>
 8003506:	2322      	movs	r3, #34	; 0x22
 8003508:	f8ce 3000 	str.w	r3, [lr]
 800350c:	f04f 30ff 	mov.w	r0, #4294967295
 8003510:	b942      	cbnz	r2, 8003524 <_strtoul_l.isra.0+0xd8>
 8003512:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003516:	f1b8 0f00 	cmp.w	r8, #0
 800351a:	d000      	beq.n	800351e <_strtoul_l.isra.0+0xd2>
 800351c:	4240      	negs	r0, r0
 800351e:	2a00      	cmp	r2, #0
 8003520:	d0f7      	beq.n	8003512 <_strtoul_l.isra.0+0xc6>
 8003522:	b10d      	cbz	r5, 8003528 <_strtoul_l.isra.0+0xdc>
 8003524:	f10c 31ff 	add.w	r1, ip, #4294967295
 8003528:	6011      	str	r1, [r2, #0]
 800352a:	e7f2      	b.n	8003512 <_strtoul_l.isra.0+0xc6>
 800352c:	2430      	movs	r4, #48	; 0x30
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1b1      	bne.n	8003496 <_strtoul_l.isra.0+0x4a>
 8003532:	2308      	movs	r3, #8
 8003534:	e7af      	b.n	8003496 <_strtoul_l.isra.0+0x4a>
 8003536:	2c30      	cmp	r4, #48	; 0x30
 8003538:	d0a2      	beq.n	8003480 <_strtoul_l.isra.0+0x34>
 800353a:	230a      	movs	r3, #10
 800353c:	e7ab      	b.n	8003496 <_strtoul_l.isra.0+0x4a>
 800353e:	bf00      	nop
 8003540:	08003898 	.word	0x08003898

08003544 <_strtoul_r>:
 8003544:	f7ff bf82 	b.w	800344c <_strtoul_l.isra.0>

08003548 <__submore>:
 8003548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800354c:	460c      	mov	r4, r1
 800354e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003550:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003554:	4299      	cmp	r1, r3
 8003556:	d11d      	bne.n	8003594 <__submore+0x4c>
 8003558:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800355c:	f000 f880 	bl	8003660 <_malloc_r>
 8003560:	b918      	cbnz	r0, 800356a <__submore+0x22>
 8003562:	f04f 30ff 	mov.w	r0, #4294967295
 8003566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800356a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800356e:	63a3      	str	r3, [r4, #56]	; 0x38
 8003570:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003574:	6360      	str	r0, [r4, #52]	; 0x34
 8003576:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800357a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800357e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8003582:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003586:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800358a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800358e:	6020      	str	r0, [r4, #0]
 8003590:	2000      	movs	r0, #0
 8003592:	e7e8      	b.n	8003566 <__submore+0x1e>
 8003594:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003596:	0077      	lsls	r7, r6, #1
 8003598:	463a      	mov	r2, r7
 800359a:	f000 f8bb 	bl	8003714 <_realloc_r>
 800359e:	4605      	mov	r5, r0
 80035a0:	2800      	cmp	r0, #0
 80035a2:	d0de      	beq.n	8003562 <__submore+0x1a>
 80035a4:	eb00 0806 	add.w	r8, r0, r6
 80035a8:	4601      	mov	r1, r0
 80035aa:	4632      	mov	r2, r6
 80035ac:	4640      	mov	r0, r8
 80035ae:	f7ff fb13 	bl	8002bd8 <memcpy>
 80035b2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80035b6:	f8c4 8000 	str.w	r8, [r4]
 80035ba:	e7e9      	b.n	8003590 <__submore+0x48>

080035bc <__retarget_lock_acquire_recursive>:
 80035bc:	4770      	bx	lr

080035be <__retarget_lock_release_recursive>:
 80035be:	4770      	bx	lr

080035c0 <_free_r>:
 80035c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80035c2:	2900      	cmp	r1, #0
 80035c4:	d048      	beq.n	8003658 <_free_r+0x98>
 80035c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035ca:	9001      	str	r0, [sp, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f1a1 0404 	sub.w	r4, r1, #4
 80035d2:	bfb8      	it	lt
 80035d4:	18e4      	addlt	r4, r4, r3
 80035d6:	f000 f8d3 	bl	8003780 <__malloc_lock>
 80035da:	4a20      	ldr	r2, [pc, #128]	; (800365c <_free_r+0x9c>)
 80035dc:	9801      	ldr	r0, [sp, #4]
 80035de:	6813      	ldr	r3, [r2, #0]
 80035e0:	4615      	mov	r5, r2
 80035e2:	b933      	cbnz	r3, 80035f2 <_free_r+0x32>
 80035e4:	6063      	str	r3, [r4, #4]
 80035e6:	6014      	str	r4, [r2, #0]
 80035e8:	b003      	add	sp, #12
 80035ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80035ee:	f000 b8cd 	b.w	800378c <__malloc_unlock>
 80035f2:	42a3      	cmp	r3, r4
 80035f4:	d90b      	bls.n	800360e <_free_r+0x4e>
 80035f6:	6821      	ldr	r1, [r4, #0]
 80035f8:	1862      	adds	r2, r4, r1
 80035fa:	4293      	cmp	r3, r2
 80035fc:	bf04      	itt	eq
 80035fe:	681a      	ldreq	r2, [r3, #0]
 8003600:	685b      	ldreq	r3, [r3, #4]
 8003602:	6063      	str	r3, [r4, #4]
 8003604:	bf04      	itt	eq
 8003606:	1852      	addeq	r2, r2, r1
 8003608:	6022      	streq	r2, [r4, #0]
 800360a:	602c      	str	r4, [r5, #0]
 800360c:	e7ec      	b.n	80035e8 <_free_r+0x28>
 800360e:	461a      	mov	r2, r3
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	b10b      	cbz	r3, 8003618 <_free_r+0x58>
 8003614:	42a3      	cmp	r3, r4
 8003616:	d9fa      	bls.n	800360e <_free_r+0x4e>
 8003618:	6811      	ldr	r1, [r2, #0]
 800361a:	1855      	adds	r5, r2, r1
 800361c:	42a5      	cmp	r5, r4
 800361e:	d10b      	bne.n	8003638 <_free_r+0x78>
 8003620:	6824      	ldr	r4, [r4, #0]
 8003622:	4421      	add	r1, r4
 8003624:	1854      	adds	r4, r2, r1
 8003626:	42a3      	cmp	r3, r4
 8003628:	6011      	str	r1, [r2, #0]
 800362a:	d1dd      	bne.n	80035e8 <_free_r+0x28>
 800362c:	681c      	ldr	r4, [r3, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	6053      	str	r3, [r2, #4]
 8003632:	4421      	add	r1, r4
 8003634:	6011      	str	r1, [r2, #0]
 8003636:	e7d7      	b.n	80035e8 <_free_r+0x28>
 8003638:	d902      	bls.n	8003640 <_free_r+0x80>
 800363a:	230c      	movs	r3, #12
 800363c:	6003      	str	r3, [r0, #0]
 800363e:	e7d3      	b.n	80035e8 <_free_r+0x28>
 8003640:	6825      	ldr	r5, [r4, #0]
 8003642:	1961      	adds	r1, r4, r5
 8003644:	428b      	cmp	r3, r1
 8003646:	bf04      	itt	eq
 8003648:	6819      	ldreq	r1, [r3, #0]
 800364a:	685b      	ldreq	r3, [r3, #4]
 800364c:	6063      	str	r3, [r4, #4]
 800364e:	bf04      	itt	eq
 8003650:	1949      	addeq	r1, r1, r5
 8003652:	6021      	streq	r1, [r4, #0]
 8003654:	6054      	str	r4, [r2, #4]
 8003656:	e7c7      	b.n	80035e8 <_free_r+0x28>
 8003658:	b003      	add	sp, #12
 800365a:	bd30      	pop	{r4, r5, pc}
 800365c:	20000090 	.word	0x20000090

08003660 <_malloc_r>:
 8003660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003662:	1ccd      	adds	r5, r1, #3
 8003664:	f025 0503 	bic.w	r5, r5, #3
 8003668:	3508      	adds	r5, #8
 800366a:	2d0c      	cmp	r5, #12
 800366c:	bf38      	it	cc
 800366e:	250c      	movcc	r5, #12
 8003670:	2d00      	cmp	r5, #0
 8003672:	4606      	mov	r6, r0
 8003674:	db01      	blt.n	800367a <_malloc_r+0x1a>
 8003676:	42a9      	cmp	r1, r5
 8003678:	d903      	bls.n	8003682 <_malloc_r+0x22>
 800367a:	230c      	movs	r3, #12
 800367c:	6033      	str	r3, [r6, #0]
 800367e:	2000      	movs	r0, #0
 8003680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003682:	f000 f87d 	bl	8003780 <__malloc_lock>
 8003686:	4921      	ldr	r1, [pc, #132]	; (800370c <_malloc_r+0xac>)
 8003688:	680a      	ldr	r2, [r1, #0]
 800368a:	4614      	mov	r4, r2
 800368c:	b99c      	cbnz	r4, 80036b6 <_malloc_r+0x56>
 800368e:	4f20      	ldr	r7, [pc, #128]	; (8003710 <_malloc_r+0xb0>)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	b923      	cbnz	r3, 800369e <_malloc_r+0x3e>
 8003694:	4621      	mov	r1, r4
 8003696:	4630      	mov	r0, r6
 8003698:	f000 f862 	bl	8003760 <_sbrk_r>
 800369c:	6038      	str	r0, [r7, #0]
 800369e:	4629      	mov	r1, r5
 80036a0:	4630      	mov	r0, r6
 80036a2:	f000 f85d 	bl	8003760 <_sbrk_r>
 80036a6:	1c43      	adds	r3, r0, #1
 80036a8:	d123      	bne.n	80036f2 <_malloc_r+0x92>
 80036aa:	230c      	movs	r3, #12
 80036ac:	6033      	str	r3, [r6, #0]
 80036ae:	4630      	mov	r0, r6
 80036b0:	f000 f86c 	bl	800378c <__malloc_unlock>
 80036b4:	e7e3      	b.n	800367e <_malloc_r+0x1e>
 80036b6:	6823      	ldr	r3, [r4, #0]
 80036b8:	1b5b      	subs	r3, r3, r5
 80036ba:	d417      	bmi.n	80036ec <_malloc_r+0x8c>
 80036bc:	2b0b      	cmp	r3, #11
 80036be:	d903      	bls.n	80036c8 <_malloc_r+0x68>
 80036c0:	6023      	str	r3, [r4, #0]
 80036c2:	441c      	add	r4, r3
 80036c4:	6025      	str	r5, [r4, #0]
 80036c6:	e004      	b.n	80036d2 <_malloc_r+0x72>
 80036c8:	6863      	ldr	r3, [r4, #4]
 80036ca:	42a2      	cmp	r2, r4
 80036cc:	bf0c      	ite	eq
 80036ce:	600b      	streq	r3, [r1, #0]
 80036d0:	6053      	strne	r3, [r2, #4]
 80036d2:	4630      	mov	r0, r6
 80036d4:	f000 f85a 	bl	800378c <__malloc_unlock>
 80036d8:	f104 000b 	add.w	r0, r4, #11
 80036dc:	1d23      	adds	r3, r4, #4
 80036de:	f020 0007 	bic.w	r0, r0, #7
 80036e2:	1ac2      	subs	r2, r0, r3
 80036e4:	d0cc      	beq.n	8003680 <_malloc_r+0x20>
 80036e6:	1a1b      	subs	r3, r3, r0
 80036e8:	50a3      	str	r3, [r4, r2]
 80036ea:	e7c9      	b.n	8003680 <_malloc_r+0x20>
 80036ec:	4622      	mov	r2, r4
 80036ee:	6864      	ldr	r4, [r4, #4]
 80036f0:	e7cc      	b.n	800368c <_malloc_r+0x2c>
 80036f2:	1cc4      	adds	r4, r0, #3
 80036f4:	f024 0403 	bic.w	r4, r4, #3
 80036f8:	42a0      	cmp	r0, r4
 80036fa:	d0e3      	beq.n	80036c4 <_malloc_r+0x64>
 80036fc:	1a21      	subs	r1, r4, r0
 80036fe:	4630      	mov	r0, r6
 8003700:	f000 f82e 	bl	8003760 <_sbrk_r>
 8003704:	3001      	adds	r0, #1
 8003706:	d1dd      	bne.n	80036c4 <_malloc_r+0x64>
 8003708:	e7cf      	b.n	80036aa <_malloc_r+0x4a>
 800370a:	bf00      	nop
 800370c:	20000090 	.word	0x20000090
 8003710:	20000094 	.word	0x20000094

08003714 <_realloc_r>:
 8003714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003716:	4607      	mov	r7, r0
 8003718:	4614      	mov	r4, r2
 800371a:	460e      	mov	r6, r1
 800371c:	b921      	cbnz	r1, 8003728 <_realloc_r+0x14>
 800371e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003722:	4611      	mov	r1, r2
 8003724:	f7ff bf9c 	b.w	8003660 <_malloc_r>
 8003728:	b922      	cbnz	r2, 8003734 <_realloc_r+0x20>
 800372a:	f7ff ff49 	bl	80035c0 <_free_r>
 800372e:	4625      	mov	r5, r4
 8003730:	4628      	mov	r0, r5
 8003732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003734:	f000 f830 	bl	8003798 <_malloc_usable_size_r>
 8003738:	42a0      	cmp	r0, r4
 800373a:	d20f      	bcs.n	800375c <_realloc_r+0x48>
 800373c:	4621      	mov	r1, r4
 800373e:	4638      	mov	r0, r7
 8003740:	f7ff ff8e 	bl	8003660 <_malloc_r>
 8003744:	4605      	mov	r5, r0
 8003746:	2800      	cmp	r0, #0
 8003748:	d0f2      	beq.n	8003730 <_realloc_r+0x1c>
 800374a:	4631      	mov	r1, r6
 800374c:	4622      	mov	r2, r4
 800374e:	f7ff fa43 	bl	8002bd8 <memcpy>
 8003752:	4631      	mov	r1, r6
 8003754:	4638      	mov	r0, r7
 8003756:	f7ff ff33 	bl	80035c0 <_free_r>
 800375a:	e7e9      	b.n	8003730 <_realloc_r+0x1c>
 800375c:	4635      	mov	r5, r6
 800375e:	e7e7      	b.n	8003730 <_realloc_r+0x1c>

08003760 <_sbrk_r>:
 8003760:	b538      	push	{r3, r4, r5, lr}
 8003762:	4d06      	ldr	r5, [pc, #24]	; (800377c <_sbrk_r+0x1c>)
 8003764:	2300      	movs	r3, #0
 8003766:	4604      	mov	r4, r0
 8003768:	4608      	mov	r0, r1
 800376a:	602b      	str	r3, [r5, #0]
 800376c:	f7fd f978 	bl	8000a60 <_sbrk>
 8003770:	1c43      	adds	r3, r0, #1
 8003772:	d102      	bne.n	800377a <_sbrk_r+0x1a>
 8003774:	682b      	ldr	r3, [r5, #0]
 8003776:	b103      	cbz	r3, 800377a <_sbrk_r+0x1a>
 8003778:	6023      	str	r3, [r4, #0]
 800377a:	bd38      	pop	{r3, r4, r5, pc}
 800377c:	20000138 	.word	0x20000138

08003780 <__malloc_lock>:
 8003780:	4801      	ldr	r0, [pc, #4]	; (8003788 <__malloc_lock+0x8>)
 8003782:	f7ff bf1b 	b.w	80035bc <__retarget_lock_acquire_recursive>
 8003786:	bf00      	nop
 8003788:	20000140 	.word	0x20000140

0800378c <__malloc_unlock>:
 800378c:	4801      	ldr	r0, [pc, #4]	; (8003794 <__malloc_unlock+0x8>)
 800378e:	f7ff bf16 	b.w	80035be <__retarget_lock_release_recursive>
 8003792:	bf00      	nop
 8003794:	20000140 	.word	0x20000140

08003798 <_malloc_usable_size_r>:
 8003798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800379c:	1f18      	subs	r0, r3, #4
 800379e:	2b00      	cmp	r3, #0
 80037a0:	bfbc      	itt	lt
 80037a2:	580b      	ldrlt	r3, [r1, r0]
 80037a4:	18c0      	addlt	r0, r0, r3
 80037a6:	4770      	bx	lr

080037a8 <_init>:
 80037a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037aa:	bf00      	nop
 80037ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ae:	bc08      	pop	{r3}
 80037b0:	469e      	mov	lr, r3
 80037b2:	4770      	bx	lr

080037b4 <_fini>:
 80037b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b6:	bf00      	nop
 80037b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ba:	bc08      	pop	{r3}
 80037bc:	469e      	mov	lr, r3
 80037be:	4770      	bx	lr
