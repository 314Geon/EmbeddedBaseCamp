
Task5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08003b68  08003b68  00013b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c38  08003c38  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003c38  08003c38  00013c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c40  08003c40  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c40  08003c40  00013c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c44  08003c44  00013c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003c48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000d8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000148  20000148  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a484  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000174e  00000000  00000000  0002a524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000750  00000000  00000000  0002bc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006c8  00000000  00000000  0002c3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000216a8  00000000  00000000  0002ca90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009308  00000000  00000000  0004e138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf568  00000000  00000000  00057440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001269a8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021e0  00000000  00000000  001269fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003b50 	.word	0x08003b50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003b50 	.word	0x08003b50

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2f>:
 800083c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000840:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000844:	bf24      	itt	cs
 8000846:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800084a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800084e:	d90d      	bls.n	800086c <__aeabi_d2f+0x30>
 8000850:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000854:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000858:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800085c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000860:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000864:	bf08      	it	eq
 8000866:	f020 0001 	biceq.w	r0, r0, #1
 800086a:	4770      	bx	lr
 800086c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000870:	d121      	bne.n	80008b6 <__aeabi_d2f+0x7a>
 8000872:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000876:	bfbc      	itt	lt
 8000878:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800087c:	4770      	bxlt	lr
 800087e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000882:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000886:	f1c2 0218 	rsb	r2, r2, #24
 800088a:	f1c2 0c20 	rsb	ip, r2, #32
 800088e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000892:	fa20 f002 	lsr.w	r0, r0, r2
 8000896:	bf18      	it	ne
 8000898:	f040 0001 	orrne.w	r0, r0, #1
 800089c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008a8:	ea40 000c 	orr.w	r0, r0, ip
 80008ac:	fa23 f302 	lsr.w	r3, r3, r2
 80008b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008b4:	e7cc      	b.n	8000850 <__aeabi_d2f+0x14>
 80008b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ba:	d107      	bne.n	80008cc <__aeabi_d2f+0x90>
 80008bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008c0:	bf1e      	ittt	ne
 80008c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008ca:	4770      	bxne	lr
 80008cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <__aeabi_uldivmod>:
 80008dc:	b953      	cbnz	r3, 80008f4 <__aeabi_uldivmod+0x18>
 80008de:	b94a      	cbnz	r2, 80008f4 <__aeabi_uldivmod+0x18>
 80008e0:	2900      	cmp	r1, #0
 80008e2:	bf08      	it	eq
 80008e4:	2800      	cmpeq	r0, #0
 80008e6:	bf1c      	itt	ne
 80008e8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ec:	f04f 30ff 	movne.w	r0, #4294967295
 80008f0:	f000 b96e 	b.w	8000bd0 <__aeabi_idiv0>
 80008f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008fc:	f000 f806 	bl	800090c <__udivmoddi4>
 8000900:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000908:	b004      	add	sp, #16
 800090a:	4770      	bx	lr

0800090c <__udivmoddi4>:
 800090c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000910:	9d08      	ldr	r5, [sp, #32]
 8000912:	4604      	mov	r4, r0
 8000914:	468c      	mov	ip, r1
 8000916:	2b00      	cmp	r3, #0
 8000918:	f040 8083 	bne.w	8000a22 <__udivmoddi4+0x116>
 800091c:	428a      	cmp	r2, r1
 800091e:	4617      	mov	r7, r2
 8000920:	d947      	bls.n	80009b2 <__udivmoddi4+0xa6>
 8000922:	fab2 f282 	clz	r2, r2
 8000926:	b142      	cbz	r2, 800093a <__udivmoddi4+0x2e>
 8000928:	f1c2 0020 	rsb	r0, r2, #32
 800092c:	fa24 f000 	lsr.w	r0, r4, r0
 8000930:	4091      	lsls	r1, r2
 8000932:	4097      	lsls	r7, r2
 8000934:	ea40 0c01 	orr.w	ip, r0, r1
 8000938:	4094      	lsls	r4, r2
 800093a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800093e:	0c23      	lsrs	r3, r4, #16
 8000940:	fbbc f6f8 	udiv	r6, ip, r8
 8000944:	fa1f fe87 	uxth.w	lr, r7
 8000948:	fb08 c116 	mls	r1, r8, r6, ip
 800094c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000950:	fb06 f10e 	mul.w	r1, r6, lr
 8000954:	4299      	cmp	r1, r3
 8000956:	d909      	bls.n	800096c <__udivmoddi4+0x60>
 8000958:	18fb      	adds	r3, r7, r3
 800095a:	f106 30ff 	add.w	r0, r6, #4294967295
 800095e:	f080 8119 	bcs.w	8000b94 <__udivmoddi4+0x288>
 8000962:	4299      	cmp	r1, r3
 8000964:	f240 8116 	bls.w	8000b94 <__udivmoddi4+0x288>
 8000968:	3e02      	subs	r6, #2
 800096a:	443b      	add	r3, r7
 800096c:	1a5b      	subs	r3, r3, r1
 800096e:	b2a4      	uxth	r4, r4
 8000970:	fbb3 f0f8 	udiv	r0, r3, r8
 8000974:	fb08 3310 	mls	r3, r8, r0, r3
 8000978:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800097c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000980:	45a6      	cmp	lr, r4
 8000982:	d909      	bls.n	8000998 <__udivmoddi4+0x8c>
 8000984:	193c      	adds	r4, r7, r4
 8000986:	f100 33ff 	add.w	r3, r0, #4294967295
 800098a:	f080 8105 	bcs.w	8000b98 <__udivmoddi4+0x28c>
 800098e:	45a6      	cmp	lr, r4
 8000990:	f240 8102 	bls.w	8000b98 <__udivmoddi4+0x28c>
 8000994:	3802      	subs	r0, #2
 8000996:	443c      	add	r4, r7
 8000998:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800099c:	eba4 040e 	sub.w	r4, r4, lr
 80009a0:	2600      	movs	r6, #0
 80009a2:	b11d      	cbz	r5, 80009ac <__udivmoddi4+0xa0>
 80009a4:	40d4      	lsrs	r4, r2
 80009a6:	2300      	movs	r3, #0
 80009a8:	e9c5 4300 	strd	r4, r3, [r5]
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	b902      	cbnz	r2, 80009b6 <__udivmoddi4+0xaa>
 80009b4:	deff      	udf	#255	; 0xff
 80009b6:	fab2 f282 	clz	r2, r2
 80009ba:	2a00      	cmp	r2, #0
 80009bc:	d150      	bne.n	8000a60 <__udivmoddi4+0x154>
 80009be:	1bcb      	subs	r3, r1, r7
 80009c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009c4:	fa1f f887 	uxth.w	r8, r7
 80009c8:	2601      	movs	r6, #1
 80009ca:	fbb3 fcfe 	udiv	ip, r3, lr
 80009ce:	0c21      	lsrs	r1, r4, #16
 80009d0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009d8:	fb08 f30c 	mul.w	r3, r8, ip
 80009dc:	428b      	cmp	r3, r1
 80009de:	d907      	bls.n	80009f0 <__udivmoddi4+0xe4>
 80009e0:	1879      	adds	r1, r7, r1
 80009e2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009e6:	d202      	bcs.n	80009ee <__udivmoddi4+0xe2>
 80009e8:	428b      	cmp	r3, r1
 80009ea:	f200 80e9 	bhi.w	8000bc0 <__udivmoddi4+0x2b4>
 80009ee:	4684      	mov	ip, r0
 80009f0:	1ac9      	subs	r1, r1, r3
 80009f2:	b2a3      	uxth	r3, r4
 80009f4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009f8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009fc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000a00:	fb08 f800 	mul.w	r8, r8, r0
 8000a04:	45a0      	cmp	r8, r4
 8000a06:	d907      	bls.n	8000a18 <__udivmoddi4+0x10c>
 8000a08:	193c      	adds	r4, r7, r4
 8000a0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a0e:	d202      	bcs.n	8000a16 <__udivmoddi4+0x10a>
 8000a10:	45a0      	cmp	r8, r4
 8000a12:	f200 80d9 	bhi.w	8000bc8 <__udivmoddi4+0x2bc>
 8000a16:	4618      	mov	r0, r3
 8000a18:	eba4 0408 	sub.w	r4, r4, r8
 8000a1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a20:	e7bf      	b.n	80009a2 <__udivmoddi4+0x96>
 8000a22:	428b      	cmp	r3, r1
 8000a24:	d909      	bls.n	8000a3a <__udivmoddi4+0x12e>
 8000a26:	2d00      	cmp	r5, #0
 8000a28:	f000 80b1 	beq.w	8000b8e <__udivmoddi4+0x282>
 8000a2c:	2600      	movs	r6, #0
 8000a2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a32:	4630      	mov	r0, r6
 8000a34:	4631      	mov	r1, r6
 8000a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a3a:	fab3 f683 	clz	r6, r3
 8000a3e:	2e00      	cmp	r6, #0
 8000a40:	d14a      	bne.n	8000ad8 <__udivmoddi4+0x1cc>
 8000a42:	428b      	cmp	r3, r1
 8000a44:	d302      	bcc.n	8000a4c <__udivmoddi4+0x140>
 8000a46:	4282      	cmp	r2, r0
 8000a48:	f200 80b8 	bhi.w	8000bbc <__udivmoddi4+0x2b0>
 8000a4c:	1a84      	subs	r4, r0, r2
 8000a4e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a52:	2001      	movs	r0, #1
 8000a54:	468c      	mov	ip, r1
 8000a56:	2d00      	cmp	r5, #0
 8000a58:	d0a8      	beq.n	80009ac <__udivmoddi4+0xa0>
 8000a5a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a5e:	e7a5      	b.n	80009ac <__udivmoddi4+0xa0>
 8000a60:	f1c2 0320 	rsb	r3, r2, #32
 8000a64:	fa20 f603 	lsr.w	r6, r0, r3
 8000a68:	4097      	lsls	r7, r2
 8000a6a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a6e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a72:	40d9      	lsrs	r1, r3
 8000a74:	4330      	orrs	r0, r6
 8000a76:	0c03      	lsrs	r3, r0, #16
 8000a78:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a7c:	fa1f f887 	uxth.w	r8, r7
 8000a80:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a88:	fb06 f108 	mul.w	r1, r6, r8
 8000a8c:	4299      	cmp	r1, r3
 8000a8e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a92:	d909      	bls.n	8000aa8 <__udivmoddi4+0x19c>
 8000a94:	18fb      	adds	r3, r7, r3
 8000a96:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a9a:	f080 808d 	bcs.w	8000bb8 <__udivmoddi4+0x2ac>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 808a 	bls.w	8000bb8 <__udivmoddi4+0x2ac>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	443b      	add	r3, r7
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b281      	uxth	r1, r0
 8000aac:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ab0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ab4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ab8:	fb00 f308 	mul.w	r3, r0, r8
 8000abc:	428b      	cmp	r3, r1
 8000abe:	d907      	bls.n	8000ad0 <__udivmoddi4+0x1c4>
 8000ac0:	1879      	adds	r1, r7, r1
 8000ac2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ac6:	d273      	bcs.n	8000bb0 <__udivmoddi4+0x2a4>
 8000ac8:	428b      	cmp	r3, r1
 8000aca:	d971      	bls.n	8000bb0 <__udivmoddi4+0x2a4>
 8000acc:	3802      	subs	r0, #2
 8000ace:	4439      	add	r1, r7
 8000ad0:	1acb      	subs	r3, r1, r3
 8000ad2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ad6:	e778      	b.n	80009ca <__udivmoddi4+0xbe>
 8000ad8:	f1c6 0c20 	rsb	ip, r6, #32
 8000adc:	fa03 f406 	lsl.w	r4, r3, r6
 8000ae0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ae4:	431c      	orrs	r4, r3
 8000ae6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000aea:	fa01 f306 	lsl.w	r3, r1, r6
 8000aee:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000af2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000af6:	431f      	orrs	r7, r3
 8000af8:	0c3b      	lsrs	r3, r7, #16
 8000afa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000afe:	fa1f f884 	uxth.w	r8, r4
 8000b02:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b06:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000b0a:	fb09 fa08 	mul.w	sl, r9, r8
 8000b0e:	458a      	cmp	sl, r1
 8000b10:	fa02 f206 	lsl.w	r2, r2, r6
 8000b14:	fa00 f306 	lsl.w	r3, r0, r6
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x220>
 8000b1a:	1861      	adds	r1, r4, r1
 8000b1c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b20:	d248      	bcs.n	8000bb4 <__udivmoddi4+0x2a8>
 8000b22:	458a      	cmp	sl, r1
 8000b24:	d946      	bls.n	8000bb4 <__udivmoddi4+0x2a8>
 8000b26:	f1a9 0902 	sub.w	r9, r9, #2
 8000b2a:	4421      	add	r1, r4
 8000b2c:	eba1 010a 	sub.w	r1, r1, sl
 8000b30:	b2bf      	uxth	r7, r7
 8000b32:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b36:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b3a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b3e:	fb00 f808 	mul.w	r8, r0, r8
 8000b42:	45b8      	cmp	r8, r7
 8000b44:	d907      	bls.n	8000b56 <__udivmoddi4+0x24a>
 8000b46:	19e7      	adds	r7, r4, r7
 8000b48:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b4c:	d22e      	bcs.n	8000bac <__udivmoddi4+0x2a0>
 8000b4e:	45b8      	cmp	r8, r7
 8000b50:	d92c      	bls.n	8000bac <__udivmoddi4+0x2a0>
 8000b52:	3802      	subs	r0, #2
 8000b54:	4427      	add	r7, r4
 8000b56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b5a:	eba7 0708 	sub.w	r7, r7, r8
 8000b5e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b62:	454f      	cmp	r7, r9
 8000b64:	46c6      	mov	lr, r8
 8000b66:	4649      	mov	r1, r9
 8000b68:	d31a      	bcc.n	8000ba0 <__udivmoddi4+0x294>
 8000b6a:	d017      	beq.n	8000b9c <__udivmoddi4+0x290>
 8000b6c:	b15d      	cbz	r5, 8000b86 <__udivmoddi4+0x27a>
 8000b6e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b72:	eb67 0701 	sbc.w	r7, r7, r1
 8000b76:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b7a:	40f2      	lsrs	r2, r6
 8000b7c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b80:	40f7      	lsrs	r7, r6
 8000b82:	e9c5 2700 	strd	r2, r7, [r5]
 8000b86:	2600      	movs	r6, #0
 8000b88:	4631      	mov	r1, r6
 8000b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8e:	462e      	mov	r6, r5
 8000b90:	4628      	mov	r0, r5
 8000b92:	e70b      	b.n	80009ac <__udivmoddi4+0xa0>
 8000b94:	4606      	mov	r6, r0
 8000b96:	e6e9      	b.n	800096c <__udivmoddi4+0x60>
 8000b98:	4618      	mov	r0, r3
 8000b9a:	e6fd      	b.n	8000998 <__udivmoddi4+0x8c>
 8000b9c:	4543      	cmp	r3, r8
 8000b9e:	d2e5      	bcs.n	8000b6c <__udivmoddi4+0x260>
 8000ba0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ba4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ba8:	3801      	subs	r0, #1
 8000baa:	e7df      	b.n	8000b6c <__udivmoddi4+0x260>
 8000bac:	4608      	mov	r0, r1
 8000bae:	e7d2      	b.n	8000b56 <__udivmoddi4+0x24a>
 8000bb0:	4660      	mov	r0, ip
 8000bb2:	e78d      	b.n	8000ad0 <__udivmoddi4+0x1c4>
 8000bb4:	4681      	mov	r9, r0
 8000bb6:	e7b9      	b.n	8000b2c <__udivmoddi4+0x220>
 8000bb8:	4666      	mov	r6, ip
 8000bba:	e775      	b.n	8000aa8 <__udivmoddi4+0x19c>
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	e74a      	b.n	8000a56 <__udivmoddi4+0x14a>
 8000bc0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bc4:	4439      	add	r1, r7
 8000bc6:	e713      	b.n	80009f0 <__udivmoddi4+0xe4>
 8000bc8:	3802      	subs	r0, #2
 8000bca:	443c      	add	r4, r7
 8000bcc:	e724      	b.n	8000a18 <__udivmoddi4+0x10c>
 8000bce:	bf00      	nop

08000bd0 <__aeabi_idiv0>:
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop

08000bd4 <SendTemp>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SendTemp()
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
	uint8_t str[15];
	sprintf((char *)str, "Temp = %d C\r\n", temp_ext);
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <SendTemp+0x48>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	463b      	mov	r3, r7
 8000be0:	490f      	ldr	r1, [pc, #60]	; (8000c20 <SendTemp+0x4c>)
 8000be2:	4618      	mov	r0, r3
 8000be4:	f002 fb86 	bl	80032f4 <siprintf>
	if (HAL_GetTick() - T >= SEND_TEMP_T) {
 8000be8:	f000 fc9a 	bl	8001520 <HAL_GetTick>
 8000bec:	4602      	mov	r2, r0
 8000bee:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <SendTemp+0x50>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	f241 3287 	movw	r2, #4999	; 0x1387
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d90a      	bls.n	8000c12 <SendTemp+0x3e>
		HAL_UART_Transmit(&huart3, str, sizeof(str), 10);
 8000bfc:	4639      	mov	r1, r7
 8000bfe:	230a      	movs	r3, #10
 8000c00:	220f      	movs	r2, #15
 8000c02:	4809      	ldr	r0, [pc, #36]	; (8000c28 <SendTemp+0x54>)
 8000c04:	f001 ffd9 	bl	8002bba <HAL_UART_Transmit>
		T = HAL_GetTick();
 8000c08:	f000 fc8a 	bl	8001520 <HAL_GetTick>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <SendTemp+0x50>)
 8000c10:	6013      	str	r3, [r2, #0]
	}
}
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000094 	.word	0x20000094
 8000c20:	08003b68 	.word	0x08003b68
 8000c24:	2000008c 	.word	0x2000008c
 8000c28:	200000a8 	.word	0x200000a8

08000c2c <ToggleLEDs>:

void ToggleLEDs(uint8_t led_number)
{
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b087      	sub	sp, #28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
	led_number = led_number - '0';
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	3b30      	subs	r3, #48	; 0x30
 8000c3a:	71fb      	strb	r3, [r7, #7]
	pinStates[led_number] = !pinStates[led_number];
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	4a49      	ldr	r2, [pc, #292]	; (8000d64 <ToggleLEDs+0x138>)
 8000c40:	5cd3      	ldrb	r3, [r2, r3]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	bf0c      	ite	eq
 8000c46:	2301      	moveq	r3, #1
 8000c48:	2300      	movne	r3, #0
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4a44      	ldr	r2, [pc, #272]	; (8000d64 <ToggleLEDs+0x138>)
 8000c52:	54d1      	strb	r1, [r2, r3]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 << led_number, pinStates[led_number]);
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	b299      	uxth	r1, r3
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	4a40      	ldr	r2, [pc, #256]	; (8000d64 <ToggleLEDs+0x138>)
 8000c64:	5cd3      	ldrb	r3, [r2, r3]
 8000c66:	461a      	mov	r2, r3
 8000c68:	483f      	ldr	r0, [pc, #252]	; (8000d68 <ToggleLEDs+0x13c>)
 8000c6a:	f001 fadf 	bl	800222c <HAL_GPIO_WritePin>
	uint8_t msg[16] = {0};
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	f107 030c 	add.w	r3, r7, #12
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
	switch (led_number) {
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2b03      	cmp	r3, #3
 8000c82:	d85b      	bhi.n	8000d3c <ToggleLEDs+0x110>
 8000c84:	a201      	add	r2, pc, #4	; (adr r2, 8000c8c <ToggleLEDs+0x60>)
 8000c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8a:	bf00      	nop
 8000c8c:	08000c9d 	.word	0x08000c9d
 8000c90:	08000cc7 	.word	0x08000cc7
 8000c94:	08000cef 	.word	0x08000cef
 8000c98:	08000d13 	.word	0x08000d13
	case 0:
		pinStates[0] ? strcpy((char *)msg, "Green ON\r\n") : strcpy((char *)msg, "Green OFF\r\n");
 8000c9c:	4b31      	ldr	r3, [pc, #196]	; (8000d64 <ToggleLEDs+0x138>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d009      	beq.n	8000cb8 <ToggleLEDs+0x8c>
 8000ca4:	f107 0308 	add.w	r3, r7, #8
 8000ca8:	4a30      	ldr	r2, [pc, #192]	; (8000d6c <ToggleLEDs+0x140>)
 8000caa:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cac:	c303      	stmia	r3!, {r0, r1}
 8000cae:	801a      	strh	r2, [r3, #0]
 8000cb0:	3302      	adds	r3, #2
 8000cb2:	0c12      	lsrs	r2, r2, #16
 8000cb4:	701a      	strb	r2, [r3, #0]
		break;
 8000cb6:	e04a      	b.n	8000d4e <ToggleLEDs+0x122>
		pinStates[0] ? strcpy((char *)msg, "Green ON\r\n") : strcpy((char *)msg, "Green OFF\r\n");
 8000cb8:	f107 0308 	add.w	r3, r7, #8
 8000cbc:	4a2c      	ldr	r2, [pc, #176]	; (8000d70 <ToggleLEDs+0x144>)
 8000cbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cc0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		break;
 8000cc4:	e043      	b.n	8000d4e <ToggleLEDs+0x122>
	case 1:
		pinStates[1] ? strcpy((char *)msg, "Orange ON\r\n") : strcpy((char *)msg, "Orange OFF\r\n");
 8000cc6:	4b27      	ldr	r3, [pc, #156]	; (8000d64 <ToggleLEDs+0x138>)
 8000cc8:	785b      	ldrb	r3, [r3, #1]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d006      	beq.n	8000cdc <ToggleLEDs+0xb0>
 8000cce:	f107 0308 	add.w	r3, r7, #8
 8000cd2:	4a28      	ldr	r2, [pc, #160]	; (8000d74 <ToggleLEDs+0x148>)
 8000cd4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		break;
 8000cda:	e038      	b.n	8000d4e <ToggleLEDs+0x122>
		pinStates[1] ? strcpy((char *)msg, "Orange ON\r\n") : strcpy((char *)msg, "Orange OFF\r\n");
 8000cdc:	f107 0308 	add.w	r3, r7, #8
 8000ce0:	4a25      	ldr	r2, [pc, #148]	; (8000d78 <ToggleLEDs+0x14c>)
 8000ce2:	461c      	mov	r4, r3
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ce8:	c407      	stmia	r4!, {r0, r1, r2}
 8000cea:	7023      	strb	r3, [r4, #0]
		break;
 8000cec:	e02f      	b.n	8000d4e <ToggleLEDs+0x122>
	case 2:
		pinStates[2] ? strcpy((char *)msg, "Red ON\r\n") : strcpy((char *)msg, "Red OFF\r\n");
 8000cee:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <ToggleLEDs+0x138>)
 8000cf0:	789b      	ldrb	r3, [r3, #2]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d006      	beq.n	8000d04 <ToggleLEDs+0xd8>
 8000cf6:	f107 0308 	add.w	r3, r7, #8
 8000cfa:	4a20      	ldr	r2, [pc, #128]	; (8000d7c <ToggleLEDs+0x150>)
 8000cfc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cfe:	c303      	stmia	r3!, {r0, r1}
 8000d00:	701a      	strb	r2, [r3, #0]
		break;
 8000d02:	e024      	b.n	8000d4e <ToggleLEDs+0x122>
		pinStates[2] ? strcpy((char *)msg, "Red ON\r\n") : strcpy((char *)msg, "Red OFF\r\n");
 8000d04:	f107 0308 	add.w	r3, r7, #8
 8000d08:	4a1d      	ldr	r2, [pc, #116]	; (8000d80 <ToggleLEDs+0x154>)
 8000d0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d0c:	c303      	stmia	r3!, {r0, r1}
 8000d0e:	801a      	strh	r2, [r3, #0]
		break;
 8000d10:	e01d      	b.n	8000d4e <ToggleLEDs+0x122>
	case 3:
		pinStates[3] ? strcpy((char *)msg, "Blue ON\r\n") : strcpy((char *)msg, "Blue OFF\r\n");
 8000d12:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <ToggleLEDs+0x138>)
 8000d14:	78db      	ldrb	r3, [r3, #3]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d006      	beq.n	8000d28 <ToggleLEDs+0xfc>
 8000d1a:	f107 0308 	add.w	r3, r7, #8
 8000d1e:	4a19      	ldr	r2, [pc, #100]	; (8000d84 <ToggleLEDs+0x158>)
 8000d20:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d22:	c303      	stmia	r3!, {r0, r1}
 8000d24:	801a      	strh	r2, [r3, #0]
		break;
 8000d26:	e012      	b.n	8000d4e <ToggleLEDs+0x122>
		pinStates[3] ? strcpy((char *)msg, "Blue ON\r\n") : strcpy((char *)msg, "Blue OFF\r\n");
 8000d28:	f107 0308 	add.w	r3, r7, #8
 8000d2c:	4a16      	ldr	r2, [pc, #88]	; (8000d88 <ToggleLEDs+0x15c>)
 8000d2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d30:	c303      	stmia	r3!, {r0, r1}
 8000d32:	801a      	strh	r2, [r3, #0]
 8000d34:	3302      	adds	r3, #2
 8000d36:	0c12      	lsrs	r2, r2, #16
 8000d38:	701a      	strb	r2, [r3, #0]
		break;
 8000d3a:	e008      	b.n	8000d4e <ToggleLEDs+0x122>
	default:
		strcpy((char *)msg, "Bad command\r\n");
 8000d3c:	f107 0308 	add.w	r3, r7, #8
 8000d40:	4a12      	ldr	r2, [pc, #72]	; (8000d8c <ToggleLEDs+0x160>)
 8000d42:	461c      	mov	r4, r3
 8000d44:	4613      	mov	r3, r2
 8000d46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d48:	c407      	stmia	r4!, {r0, r1, r2}
 8000d4a:	8023      	strh	r3, [r4, #0]
		break;
 8000d4c:	bf00      	nop
	}
	HAL_UART_Transmit(&huart3, msg, sizeof(msg), 10);
 8000d4e:	f107 0108 	add.w	r1, r7, #8
 8000d52:	230a      	movs	r3, #10
 8000d54:	2210      	movs	r2, #16
 8000d56:	480e      	ldr	r0, [pc, #56]	; (8000d90 <ToggleLEDs+0x164>)
 8000d58:	f001 ff2f 	bl	8002bba <HAL_UART_Transmit>
}
 8000d5c:	bf00      	nop
 8000d5e:	371c      	adds	r7, #28
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd90      	pop	{r4, r7, pc}
 8000d64:	20000098 	.word	0x20000098
 8000d68:	40020c00 	.word	0x40020c00
 8000d6c:	08003b78 	.word	0x08003b78
 8000d70:	08003b84 	.word	0x08003b84
 8000d74:	08003b90 	.word	0x08003b90
 8000d78:	08003b9c 	.word	0x08003b9c
 8000d7c:	08003bac 	.word	0x08003bac
 8000d80:	08003bb8 	.word	0x08003bb8
 8000d84:	08003bc4 	.word	0x08003bc4
 8000d88:	08003bd0 	.word	0x08003bd0
 8000d8c:	08003bdc 	.word	0x08003bdc
 8000d90:	200000a8 	.word	0x200000a8

08000d94 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	80fb      	strh	r3, [r7, #6]
    switch(GPIO_Pin)
 8000d9e:	88fb      	ldrh	r3, [r7, #6]
 8000da0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000da4:	d01a      	beq.n	8000ddc <HAL_GPIO_EXTI_Callback+0x48>
 8000da6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000daa:	dc1b      	bgt.n	8000de4 <HAL_GPIO_EXTI_Callback+0x50>
 8000dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000db0:	d010      	beq.n	8000dd4 <HAL_GPIO_EXTI_Callback+0x40>
 8000db2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000db6:	dc15      	bgt.n	8000de4 <HAL_GPIO_EXTI_Callback+0x50>
 8000db8:	2b40      	cmp	r3, #64	; 0x40
 8000dba:	d003      	beq.n	8000dc4 <HAL_GPIO_EXTI_Callback+0x30>
 8000dbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000dc0:	d004      	beq.n	8000dcc <HAL_GPIO_EXTI_Callback+0x38>
			break;
    	case GPIO_PIN_11:
			ToggleLEDs('3');
			break;
    }
}
 8000dc2:	e00f      	b.n	8000de4 <HAL_GPIO_EXTI_Callback+0x50>
    		ToggleLEDs('0');
 8000dc4:	2030      	movs	r0, #48	; 0x30
 8000dc6:	f7ff ff31 	bl	8000c2c <ToggleLEDs>
    		break;
 8000dca:	e00b      	b.n	8000de4 <HAL_GPIO_EXTI_Callback+0x50>
			ToggleLEDs('1');
 8000dcc:	2031      	movs	r0, #49	; 0x31
 8000dce:	f7ff ff2d 	bl	8000c2c <ToggleLEDs>
			break;
 8000dd2:	e007      	b.n	8000de4 <HAL_GPIO_EXTI_Callback+0x50>
			ToggleLEDs('2');
 8000dd4:	2032      	movs	r0, #50	; 0x32
 8000dd6:	f7ff ff29 	bl	8000c2c <ToggleLEDs>
			break;
 8000dda:	e003      	b.n	8000de4 <HAL_GPIO_EXTI_Callback+0x50>
			ToggleLEDs('3');
 8000ddc:	2033      	movs	r0, #51	; 0x33
 8000dde:	f7ff ff25 	bl	8000c2c <ToggleLEDs>
			break;
 8000de2:	bf00      	nop
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	0000      	movs	r0, r0
	...

08000df0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df6:	f000 fb2d 	bl	8001454 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dfa:	f000 f871 	bl	8000ee0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfe:	f000 f949 	bl	8001094 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000e02:	f000 f91d 	bl	8001040 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000e06:	f000 f8c9 	bl	8000f9c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  uint16_t adcVal = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	80fb      	strh	r3, [r7, #6]
  volatile HAL_StatusTypeDef adcPoolResult;

  HAL_ADC_Start(&hadc1);
 8000e0e:	482c      	ldr	r0, [pc, #176]	; (8000ec0 <main+0xd0>)
 8000e10:	f000 fbd6 	bl	80015c0 <HAL_ADC_Start>

  T = HAL_GetTick();
 8000e14:	f000 fb84 	bl	8001520 <HAL_GetTick>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	4a2a      	ldr	r2, [pc, #168]	; (8000ec4 <main+0xd4>)
 8000e1c:	6013      	str	r3, [r2, #0]
	while (1) {
		uint8_t rcvBuf[1];

		HAL_StatusTypeDef result;

		SendTemp();
 8000e1e:	f7ff fed9 	bl	8000bd4 <SendTemp>

		adcPoolResult = HAL_ADC_PollForConversion(&hadc1, 100);
 8000e22:	2164      	movs	r1, #100	; 0x64
 8000e24:	4826      	ldr	r0, [pc, #152]	; (8000ec0 <main+0xd0>)
 8000e26:	f000 fc9d 	bl	8001764 <HAL_ADC_PollForConversion>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	713b      	strb	r3, [r7, #4]

		if(adcPoolResult == HAL_OK)
 8000e2e:	793b      	ldrb	r3, [r7, #4]
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d104      	bne.n	8000e40 <main+0x50>
			adcVal = HAL_ADC_GetValue(&hadc1);
 8000e36:	4822      	ldr	r0, [pc, #136]	; (8000ec0 <main+0xd0>)
 8000e38:	f000 fd1f 	bl	800187a <HAL_ADC_GetValue>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	80fb      	strh	r3, [r7, #6]

		V_ext = ((float)adcVal/ADC_MAX_VALUE) * V_REF;
 8000e40:	88fb      	ldrh	r3, [r7, #6]
 8000e42:	ee07 3a90 	vmov	s15, r3
 8000e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e4a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000ec8 <main+0xd8>
 8000e4e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000e52:	ee16 0a90 	vmov	r0, s13
 8000e56:	f7ff fc99 	bl	800078c <__aeabi_f2d>
 8000e5a:	a317      	add	r3, pc, #92	; (adr r3, 8000eb8 <main+0xc8>)
 8000e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e60:	f7ff fa06 	bl	8000270 <__aeabi_dmul>
 8000e64:	4602      	mov	r2, r0
 8000e66:	460b      	mov	r3, r1
 8000e68:	4610      	mov	r0, r2
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f7ff fce6 	bl	800083c <__aeabi_d2f>
 8000e70:	4603      	mov	r3, r0
 8000e72:	4a16      	ldr	r2, [pc, #88]	; (8000ecc <main+0xdc>)
 8000e74:	6013      	str	r3, [r2, #0]
		temp_ext = 101-50*V_ext;
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <main+0xdc>)
 8000e78:	edd3 7a00 	vldr	s15, [r3]
 8000e7c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000ed0 <main+0xe0>
 8000e80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e84:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000ed4 <main+0xe4>
 8000e88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e90:	ee17 2a90 	vmov	r2, s15
 8000e94:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <main+0xe8>)
 8000e96:	601a      	str	r2, [r3, #0]

		result = HAL_UART_Receive(&huart3, rcvBuf, 1, 10);
 8000e98:	4639      	mov	r1, r7
 8000e9a:	230a      	movs	r3, #10
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	480f      	ldr	r0, [pc, #60]	; (8000edc <main+0xec>)
 8000ea0:	f001 ff1d 	bl	8002cde <HAL_UART_Receive>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	717b      	strb	r3, [r7, #5]
		if (result == HAL_OK) {
 8000ea8:	797b      	ldrb	r3, [r7, #5]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d1b7      	bne.n	8000e1e <main+0x2e>
			ToggleLEDs(rcvBuf[0]);
 8000eae:	783b      	ldrb	r3, [r7, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff febb 	bl	8000c2c <ToggleLEDs>
	while (1) {
 8000eb6:	e7b2      	b.n	8000e1e <main+0x2e>
 8000eb8:	3d70a3d7 	.word	0x3d70a3d7
 8000ebc:	4007d70a 	.word	0x4007d70a
 8000ec0:	200000ec 	.word	0x200000ec
 8000ec4:	2000008c 	.word	0x2000008c
 8000ec8:	457ff000 	.word	0x457ff000
 8000ecc:	20000090 	.word	0x20000090
 8000ed0:	42480000 	.word	0x42480000
 8000ed4:	42ca0000 	.word	0x42ca0000
 8000ed8:	20000094 	.word	0x20000094
 8000edc:	200000a8 	.word	0x200000a8

08000ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b094      	sub	sp, #80	; 0x50
 8000ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee6:	f107 0320 	add.w	r3, r7, #32
 8000eea:	2230      	movs	r2, #48	; 0x30
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f002 f9f8 	bl	80032e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f04:	2300      	movs	r3, #0
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <SystemClock_Config+0xb4>)
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	4a21      	ldr	r2, [pc, #132]	; (8000f94 <SystemClock_Config+0xb4>)
 8000f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f12:	6413      	str	r3, [r2, #64]	; 0x40
 8000f14:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <SystemClock_Config+0xb4>)
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f20:	2300      	movs	r3, #0
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <SystemClock_Config+0xb8>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a1b      	ldr	r2, [pc, #108]	; (8000f98 <SystemClock_Config+0xb8>)
 8000f2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <SystemClock_Config+0xb8>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f40:	2301      	movs	r3, #1
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f44:	2310      	movs	r3, #16
 8000f46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4c:	f107 0320 	add.w	r3, r7, #32
 8000f50:	4618      	mov	r0, r3
 8000f52:	f001 f99d 	bl	8002290 <HAL_RCC_OscConfig>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000f5c:	f000 f90c 	bl	8001178 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f60:	230f      	movs	r3, #15
 8000f62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f64:	2300      	movs	r3, #0
 8000f66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f74:	f107 030c 	add.w	r3, r7, #12
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f001 fc00 	bl	8002780 <HAL_RCC_ClockConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000f86:	f000 f8f7 	bl	8001178 <Error_Handler>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	3750      	adds	r7, #80	; 0x50
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40007000 	.word	0x40007000

08000f9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fae:	4b21      	ldr	r3, [pc, #132]	; (8001034 <MX_ADC1_Init+0x98>)
 8000fb0:	4a21      	ldr	r2, [pc, #132]	; (8001038 <MX_ADC1_Init+0x9c>)
 8000fb2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <MX_ADC1_Init+0x98>)
 8000fb6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <MX_ADC1_Init+0x98>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <MX_ADC1_Init+0x98>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <MX_ADC1_Init+0x98>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fce:	4b19      	ldr	r3, [pc, #100]	; (8001034 <MX_ADC1_Init+0x98>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fd6:	4b17      	ldr	r3, [pc, #92]	; (8001034 <MX_ADC1_Init+0x98>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <MX_ADC1_Init+0x98>)
 8000fde:	4a17      	ldr	r2, [pc, #92]	; (800103c <MX_ADC1_Init+0xa0>)
 8000fe0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fe2:	4b14      	ldr	r3, [pc, #80]	; (8001034 <MX_ADC1_Init+0x98>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <MX_ADC1_Init+0x98>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <MX_ADC1_Init+0x98>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <MX_ADC1_Init+0x98>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ffc:	480d      	ldr	r0, [pc, #52]	; (8001034 <MX_ADC1_Init+0x98>)
 8000ffe:	f000 fa9b 	bl	8001538 <HAL_ADC_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001008:	f000 f8b6 	bl	8001178 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800100c:	2309      	movs	r3, #9
 800100e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001010:	2301      	movs	r3, #1
 8001012:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001014:	2307      	movs	r3, #7
 8001016:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001018:	463b      	mov	r3, r7
 800101a:	4619      	mov	r1, r3
 800101c:	4805      	ldr	r0, [pc, #20]	; (8001034 <MX_ADC1_Init+0x98>)
 800101e:	f000 fc39 	bl	8001894 <HAL_ADC_ConfigChannel>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001028:	f000 f8a6 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200000ec 	.word	0x200000ec
 8001038:	40012000 	.word	0x40012000
 800103c:	0f000001 	.word	0x0f000001

08001040 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <MX_USART3_UART_Init+0x4c>)
 8001046:	4a12      	ldr	r2, [pc, #72]	; (8001090 <MX_USART3_UART_Init+0x50>)
 8001048:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <MX_USART3_UART_Init+0x4c>)
 800104c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001050:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <MX_USART3_UART_Init+0x4c>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <MX_USART3_UART_Init+0x4c>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800105e:	4b0b      	ldr	r3, [pc, #44]	; (800108c <MX_USART3_UART_Init+0x4c>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001064:	4b09      	ldr	r3, [pc, #36]	; (800108c <MX_USART3_UART_Init+0x4c>)
 8001066:	220c      	movs	r2, #12
 8001068:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106a:	4b08      	ldr	r3, [pc, #32]	; (800108c <MX_USART3_UART_Init+0x4c>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <MX_USART3_UART_Init+0x4c>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <MX_USART3_UART_Init+0x4c>)
 8001078:	f001 fd52 	bl	8002b20 <HAL_UART_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001082:	f000 f879 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200000a8 	.word	0x200000a8
 8001090:	40004800 	.word	0x40004800

08001094 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109a:	f107 030c 	add.w	r3, r7, #12
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	4b2f      	ldr	r3, [pc, #188]	; (800116c <MX_GPIO_Init+0xd8>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a2e      	ldr	r2, [pc, #184]	; (800116c <MX_GPIO_Init+0xd8>)
 80010b4:	f043 0302 	orr.w	r3, r3, #2
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b2c      	ldr	r3, [pc, #176]	; (800116c <MX_GPIO_Init+0xd8>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	4b28      	ldr	r3, [pc, #160]	; (800116c <MX_GPIO_Init+0xd8>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a27      	ldr	r2, [pc, #156]	; (800116c <MX_GPIO_Init+0xd8>)
 80010d0:	f043 0308 	orr.w	r3, r3, #8
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b25      	ldr	r3, [pc, #148]	; (800116c <MX_GPIO_Init+0xd8>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0308 	and.w	r3, r3, #8
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	603b      	str	r3, [r7, #0]
 80010e6:	4b21      	ldr	r3, [pc, #132]	; (800116c <MX_GPIO_Init+0xd8>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a20      	ldr	r2, [pc, #128]	; (800116c <MX_GPIO_Init+0xd8>)
 80010ec:	f043 0304 	orr.w	r3, r3, #4
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b1e      	ldr	r3, [pc, #120]	; (800116c <MX_GPIO_Init+0xd8>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0304 	and.w	r3, r3, #4
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001104:	481a      	ldr	r0, [pc, #104]	; (8001170 <MX_GPIO_Init+0xdc>)
 8001106:	f001 f891 	bl	800222c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800110a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800110e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001110:	2301      	movs	r3, #1
 8001112:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	4619      	mov	r1, r3
 8001122:	4813      	ldr	r0, [pc, #76]	; (8001170 <MX_GPIO_Init+0xdc>)
 8001124:	f000 fee6 	bl	8001ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 PC9 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 8001128:	f44f 6334 	mov.w	r3, #2880	; 0xb40
 800112c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800112e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001132:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	4619      	mov	r1, r3
 800113e:	480d      	ldr	r0, [pc, #52]	; (8001174 <MX_GPIO_Init+0xe0>)
 8001140:	f000 fed8 	bl	8001ef4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001144:	2200      	movs	r2, #0
 8001146:	2100      	movs	r1, #0
 8001148:	2017      	movs	r0, #23
 800114a:	f000 fe9c 	bl	8001e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800114e:	2017      	movs	r0, #23
 8001150:	f000 feb5 	bl	8001ebe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001154:	2200      	movs	r2, #0
 8001156:	2100      	movs	r1, #0
 8001158:	2028      	movs	r0, #40	; 0x28
 800115a:	f000 fe94 	bl	8001e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800115e:	2028      	movs	r0, #40	; 0x28
 8001160:	f000 fead 	bl	8001ebe <HAL_NVIC_EnableIRQ>

}
 8001164:	bf00      	nop
 8001166:	3720      	adds	r7, #32
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40023800 	.word	0x40023800
 8001170:	40020c00 	.word	0x40020c00
 8001174:	40020800 	.word	0x40020800

08001178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800117c:	b672      	cpsid	i
}
 800117e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001180:	e7fe      	b.n	8001180 <Error_Handler+0x8>
	...

08001184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <HAL_MspInit+0x4c>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	4a0f      	ldr	r2, [pc, #60]	; (80011d0 <HAL_MspInit+0x4c>)
 8001194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001198:	6453      	str	r3, [r2, #68]	; 0x44
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HAL_MspInit+0x4c>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <HAL_MspInit+0x4c>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	4a08      	ldr	r2, [pc, #32]	; (80011d0 <HAL_MspInit+0x4c>)
 80011b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b4:	6413      	str	r3, [r2, #64]	; 0x40
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_MspInit+0x4c>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800

080011d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a17      	ldr	r2, [pc, #92]	; (8001250 <HAL_ADC_MspInit+0x7c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d127      	bne.n	8001246 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	4b16      	ldr	r3, [pc, #88]	; (8001254 <HAL_ADC_MspInit+0x80>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	4a15      	ldr	r2, [pc, #84]	; (8001254 <HAL_ADC_MspInit+0x80>)
 8001200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001204:	6453      	str	r3, [r2, #68]	; 0x44
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <HAL_ADC_MspInit+0x80>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <HAL_ADC_MspInit+0x80>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a0e      	ldr	r2, [pc, #56]	; (8001254 <HAL_ADC_MspInit+0x80>)
 800121c:	f043 0302 	orr.w	r3, r3, #2
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <HAL_ADC_MspInit+0x80>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800122e:	2302      	movs	r3, #2
 8001230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001232:	2303      	movs	r3, #3
 8001234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4619      	mov	r1, r3
 8001240:	4805      	ldr	r0, [pc, #20]	; (8001258 <HAL_ADC_MspInit+0x84>)
 8001242:	f000 fe57 	bl	8001ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001246:	bf00      	nop
 8001248:	3728      	adds	r7, #40	; 0x28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40012000 	.word	0x40012000
 8001254:	40023800 	.word	0x40023800
 8001258:	40020400 	.word	0x40020400

0800125c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a19      	ldr	r2, [pc, #100]	; (80012e0 <HAL_UART_MspInit+0x84>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d12c      	bne.n	80012d8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <HAL_UART_MspInit+0x88>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	4a17      	ldr	r2, [pc, #92]	; (80012e4 <HAL_UART_MspInit+0x88>)
 8001288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800128c:	6413      	str	r3, [r2, #64]	; 0x40
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <HAL_UART_MspInit+0x88>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <HAL_UART_MspInit+0x88>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a10      	ldr	r2, [pc, #64]	; (80012e4 <HAL_UART_MspInit+0x88>)
 80012a4:	f043 0308 	orr.w	r3, r3, #8
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <HAL_UART_MspInit+0x88>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c4:	2303      	movs	r3, #3
 80012c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012c8:	2307      	movs	r3, #7
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	4619      	mov	r1, r3
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <HAL_UART_MspInit+0x8c>)
 80012d4:	f000 fe0e 	bl	8001ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012d8:	bf00      	nop
 80012da:	3728      	adds	r7, #40	; 0x28
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40004800 	.word	0x40004800
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40020c00 	.word	0x40020c00

080012ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <NMI_Handler+0x4>

080012f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <HardFault_Handler+0x4>

080012f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <MemManage_Handler+0x4>

080012fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <BusFault_Handler+0x4>

08001304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <UsageFault_Handler+0x4>

0800130a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001338:	f000 f8de 	bl	80014f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}

08001340 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001344:	2040      	movs	r0, #64	; 0x40
 8001346:	f000 ff8b 	bl	8002260 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800134a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800134e:	f000 ff87 	bl	8002260 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001352:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001356:	f000 ff83 	bl	8002260 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}

0800135e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001362:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001366:	f000 ff7b 	bl	8002260 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001378:	4a14      	ldr	r2, [pc, #80]	; (80013cc <_sbrk+0x5c>)
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <_sbrk+0x60>)
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001384:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <_sbrk+0x64>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d102      	bne.n	8001392 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <_sbrk+0x64>)
 800138e:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <_sbrk+0x68>)
 8001390:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <_sbrk+0x64>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	429a      	cmp	r2, r3
 800139e:	d207      	bcs.n	80013b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a0:	f001 ff76 	bl	8003290 <__errno>
 80013a4:	4603      	mov	r3, r0
 80013a6:	220c      	movs	r2, #12
 80013a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013aa:	f04f 33ff 	mov.w	r3, #4294967295
 80013ae:	e009      	b.n	80013c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <_sbrk+0x64>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013b6:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <_sbrk+0x64>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <_sbrk+0x64>)
 80013c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013c2:	68fb      	ldr	r3, [r7, #12]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20020000 	.word	0x20020000
 80013d0:	00000400 	.word	0x00000400
 80013d4:	2000009c 	.word	0x2000009c
 80013d8:	20000148 	.word	0x20000148

080013dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <SystemInit+0x20>)
 80013e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e6:	4a05      	ldr	r2, [pc, #20]	; (80013fc <SystemInit+0x20>)
 80013e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001400:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001438 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001404:	480d      	ldr	r0, [pc, #52]	; (800143c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001406:	490e      	ldr	r1, [pc, #56]	; (8001440 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001408:	4a0e      	ldr	r2, [pc, #56]	; (8001444 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800140a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800140c:	e002      	b.n	8001414 <LoopCopyDataInit>

0800140e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800140e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001412:	3304      	adds	r3, #4

08001414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001418:	d3f9      	bcc.n	800140e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800141a:	4a0b      	ldr	r2, [pc, #44]	; (8001448 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800141c:	4c0b      	ldr	r4, [pc, #44]	; (800144c <LoopFillZerobss+0x26>)
  movs r3, #0
 800141e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001420:	e001      	b.n	8001426 <LoopFillZerobss>

08001422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001424:	3204      	adds	r2, #4

08001426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001428:	d3fb      	bcc.n	8001422 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800142a:	f7ff ffd7 	bl	80013dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800142e:	f001 ff35 	bl	800329c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001432:	f7ff fcdd 	bl	8000df0 <main>
  bx  lr    
 8001436:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001438:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800143c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001440:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001444:	08003c48 	.word	0x08003c48
  ldr r2, =_sbss
 8001448:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800144c:	20000148 	.word	0x20000148

08001450 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001450:	e7fe      	b.n	8001450 <ADC_IRQHandler>
	...

08001454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001458:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <HAL_Init+0x40>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a0d      	ldr	r2, [pc, #52]	; (8001494 <HAL_Init+0x40>)
 800145e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001462:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001464:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <HAL_Init+0x40>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <HAL_Init+0x40>)
 800146a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800146e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <HAL_Init+0x40>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a07      	ldr	r2, [pc, #28]	; (8001494 <HAL_Init+0x40>)
 8001476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800147c:	2003      	movs	r0, #3
 800147e:	f000 fcf7 	bl	8001e70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001482:	200f      	movs	r0, #15
 8001484:	f000 f808 	bl	8001498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001488:	f7ff fe7c 	bl	8001184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40023c00 	.word	0x40023c00

08001498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_InitTick+0x54>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <HAL_InitTick+0x58>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	4619      	mov	r1, r3
 80014aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80014b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 fd0f 	bl	8001eda <HAL_SYSTICK_Config>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e00e      	b.n	80014e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b0f      	cmp	r3, #15
 80014ca:	d80a      	bhi.n	80014e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014cc:	2200      	movs	r2, #0
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295
 80014d4:	f000 fcd7 	bl	8001e86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d8:	4a06      	ldr	r2, [pc, #24]	; (80014f4 <HAL_InitTick+0x5c>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	e000      	b.n	80014e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000000 	.word	0x20000000
 80014f0:	20000008 	.word	0x20000008
 80014f4:	20000004 	.word	0x20000004

080014f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_IncTick+0x20>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	461a      	mov	r2, r3
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_IncTick+0x24>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4413      	add	r3, r2
 8001508:	4a04      	ldr	r2, [pc, #16]	; (800151c <HAL_IncTick+0x24>)
 800150a:	6013      	str	r3, [r2, #0]
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	20000008 	.word	0x20000008
 800151c:	20000134 	.word	0x20000134

08001520 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return uwTick;
 8001524:	4b03      	ldr	r3, [pc, #12]	; (8001534 <HAL_GetTick+0x14>)
 8001526:	681b      	ldr	r3, [r3, #0]
}
 8001528:	4618      	mov	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	20000134 	.word	0x20000134

08001538 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e033      	b.n	80015b6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	2b00      	cmp	r3, #0
 8001554:	d109      	bne.n	800156a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff fe3c 	bl	80011d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	f003 0310 	and.w	r3, r3, #16
 8001572:	2b00      	cmp	r3, #0
 8001574:	d118      	bne.n	80015a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800157e:	f023 0302 	bic.w	r3, r3, #2
 8001582:	f043 0202 	orr.w	r2, r3, #2
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f000 faa4 	bl	8001ad8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f023 0303 	bic.w	r3, r3, #3
 800159e:	f043 0201 	orr.w	r2, r3, #1
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	641a      	str	r2, [r3, #64]	; 0x40
 80015a6:	e001      	b.n	80015ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d101      	bne.n	80015da <HAL_ADC_Start+0x1a>
 80015d6:	2302      	movs	r3, #2
 80015d8:	e0b2      	b.n	8001740 <HAL_ADC_Start+0x180>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d018      	beq.n	8001622 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 0201 	orr.w	r2, r2, #1
 80015fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001600:	4b52      	ldr	r3, [pc, #328]	; (800174c <HAL_ADC_Start+0x18c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a52      	ldr	r2, [pc, #328]	; (8001750 <HAL_ADC_Start+0x190>)
 8001606:	fba2 2303 	umull	r2, r3, r2, r3
 800160a:	0c9a      	lsrs	r2, r3, #18
 800160c:	4613      	mov	r3, r2
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	4413      	add	r3, r2
 8001612:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001614:	e002      	b.n	800161c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	3b01      	subs	r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f9      	bne.n	8001616 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	2b01      	cmp	r3, #1
 800162e:	d17a      	bne.n	8001726 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001638:	f023 0301 	bic.w	r3, r3, #1
 800163c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800164e:	2b00      	cmp	r3, #0
 8001650:	d007      	beq.n	8001662 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800165a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800166a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800166e:	d106      	bne.n	800167e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001674:	f023 0206 	bic.w	r2, r3, #6
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	645a      	str	r2, [r3, #68]	; 0x44
 800167c:	e002      	b.n	8001684 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800168c:	4b31      	ldr	r3, [pc, #196]	; (8001754 <HAL_ADC_Start+0x194>)
 800168e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001698:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 031f 	and.w	r3, r3, #31
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d12a      	bne.n	80016fc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a2b      	ldr	r2, [pc, #172]	; (8001758 <HAL_ADC_Start+0x198>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d015      	beq.n	80016dc <HAL_ADC_Start+0x11c>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a29      	ldr	r2, [pc, #164]	; (800175c <HAL_ADC_Start+0x19c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d105      	bne.n	80016c6 <HAL_ADC_Start+0x106>
 80016ba:	4b26      	ldr	r3, [pc, #152]	; (8001754 <HAL_ADC_Start+0x194>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 031f 	and.w	r3, r3, #31
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d00a      	beq.n	80016dc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a25      	ldr	r2, [pc, #148]	; (8001760 <HAL_ADC_Start+0x1a0>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d136      	bne.n	800173e <HAL_ADC_Start+0x17e>
 80016d0:	4b20      	ldr	r3, [pc, #128]	; (8001754 <HAL_ADC_Start+0x194>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0310 	and.w	r3, r3, #16
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d130      	bne.n	800173e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d129      	bne.n	800173e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	e020      	b.n	800173e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a15      	ldr	r2, [pc, #84]	; (8001758 <HAL_ADC_Start+0x198>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d11b      	bne.n	800173e <HAL_ADC_Start+0x17e>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d114      	bne.n	800173e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	e00b      	b.n	800173e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f043 0210 	orr.w	r2, r3, #16
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	f043 0201 	orr.w	r2, r3, #1
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	20000000 	.word	0x20000000
 8001750:	431bde83 	.word	0x431bde83
 8001754:	40012300 	.word	0x40012300
 8001758:	40012000 	.word	0x40012000
 800175c:	40012100 	.word	0x40012100
 8001760:	40012200 	.word	0x40012200

08001764 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800177c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001780:	d113      	bne.n	80017aa <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800178c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001790:	d10b      	bne.n	80017aa <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f043 0220 	orr.w	r2, r3, #32
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e063      	b.n	8001872 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80017aa:	f7ff feb9 	bl	8001520 <HAL_GetTick>
 80017ae:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017b0:	e021      	b.n	80017f6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b8:	d01d      	beq.n	80017f6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d007      	beq.n	80017d0 <HAL_ADC_PollForConversion+0x6c>
 80017c0:	f7ff feae 	bl	8001520 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d212      	bcs.n	80017f6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d00b      	beq.n	80017f6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f043 0204 	orr.w	r2, r3, #4
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e03d      	b.n	8001872 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b02      	cmp	r3, #2
 8001802:	d1d6      	bne.n	80017b2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f06f 0212 	mvn.w	r2, #18
 800180c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d123      	bne.n	8001870 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800182c:	2b00      	cmp	r3, #0
 800182e:	d11f      	bne.n	8001870 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001836:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800183a:	2b00      	cmp	r3, #0
 800183c:	d006      	beq.n	800184c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001848:	2b00      	cmp	r3, #0
 800184a:	d111      	bne.n	8001870 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d105      	bne.n	8001870 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	f043 0201 	orr.w	r2, r3, #1
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800189e:	2300      	movs	r3, #0
 80018a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d101      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x1c>
 80018ac:	2302      	movs	r3, #2
 80018ae:	e105      	b.n	8001abc <HAL_ADC_ConfigChannel+0x228>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b09      	cmp	r3, #9
 80018be:	d925      	bls.n	800190c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68d9      	ldr	r1, [r3, #12]
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	461a      	mov	r2, r3
 80018ce:	4613      	mov	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4413      	add	r3, r2
 80018d4:	3b1e      	subs	r3, #30
 80018d6:	2207      	movs	r2, #7
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43da      	mvns	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	400a      	ands	r2, r1
 80018e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68d9      	ldr	r1, [r3, #12]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	4618      	mov	r0, r3
 80018f8:	4603      	mov	r3, r0
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4403      	add	r3, r0
 80018fe:	3b1e      	subs	r3, #30
 8001900:	409a      	lsls	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	e022      	b.n	8001952 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6919      	ldr	r1, [r3, #16]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	b29b      	uxth	r3, r3
 8001918:	461a      	mov	r2, r3
 800191a:	4613      	mov	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4413      	add	r3, r2
 8001920:	2207      	movs	r2, #7
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43da      	mvns	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	400a      	ands	r2, r1
 800192e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6919      	ldr	r1, [r3, #16]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	689a      	ldr	r2, [r3, #8]
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	b29b      	uxth	r3, r3
 8001940:	4618      	mov	r0, r3
 8001942:	4603      	mov	r3, r0
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4403      	add	r3, r0
 8001948:	409a      	lsls	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b06      	cmp	r3, #6
 8001958:	d824      	bhi.n	80019a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	3b05      	subs	r3, #5
 800196c:	221f      	movs	r2, #31
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43da      	mvns	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	400a      	ands	r2, r1
 800197a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	b29b      	uxth	r3, r3
 8001988:	4618      	mov	r0, r3
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	3b05      	subs	r3, #5
 8001996:	fa00 f203 	lsl.w	r2, r0, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	635a      	str	r2, [r3, #52]	; 0x34
 80019a2:	e04c      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b0c      	cmp	r3, #12
 80019aa:	d824      	bhi.n	80019f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	3b23      	subs	r3, #35	; 0x23
 80019be:	221f      	movs	r2, #31
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43da      	mvns	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	400a      	ands	r2, r1
 80019cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	3b23      	subs	r3, #35	; 0x23
 80019e8:	fa00 f203 	lsl.w	r2, r0, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	631a      	str	r2, [r3, #48]	; 0x30
 80019f4:	e023      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	3b41      	subs	r3, #65	; 0x41
 8001a08:	221f      	movs	r2, #31
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	400a      	ands	r2, r1
 8001a16:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	4618      	mov	r0, r3
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	3b41      	subs	r3, #65	; 0x41
 8001a32:	fa00 f203 	lsl.w	r2, r0, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a3e:	4b22      	ldr	r3, [pc, #136]	; (8001ac8 <HAL_ADC_ConfigChannel+0x234>)
 8001a40:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a21      	ldr	r2, [pc, #132]	; (8001acc <HAL_ADC_ConfigChannel+0x238>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d109      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x1cc>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b12      	cmp	r3, #18
 8001a52:	d105      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a19      	ldr	r2, [pc, #100]	; (8001acc <HAL_ADC_ConfigChannel+0x238>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d123      	bne.n	8001ab2 <HAL_ADC_ConfigChannel+0x21e>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2b10      	cmp	r3, #16
 8001a70:	d003      	beq.n	8001a7a <HAL_ADC_ConfigChannel+0x1e6>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b11      	cmp	r3, #17
 8001a78:	d11b      	bne.n	8001ab2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2b10      	cmp	r3, #16
 8001a8c:	d111      	bne.n	8001ab2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <HAL_ADC_ConfigChannel+0x23c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a10      	ldr	r2, [pc, #64]	; (8001ad4 <HAL_ADC_ConfigChannel+0x240>)
 8001a94:	fba2 2303 	umull	r2, r3, r2, r3
 8001a98:	0c9a      	lsrs	r2, r3, #18
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001aa4:	e002      	b.n	8001aac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f9      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	40012300 	.word	0x40012300
 8001acc:	40012000 	.word	0x40012000
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	431bde83 	.word	0x431bde83

08001ad8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ae0:	4b79      	ldr	r3, [pc, #484]	; (8001cc8 <ADC_Init+0x1f0>)
 8001ae2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	431a      	orrs	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6859      	ldr	r1, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	021a      	lsls	r2, r3, #8
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6859      	ldr	r1, [r3, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6899      	ldr	r1, [r3, #8]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6a:	4a58      	ldr	r2, [pc, #352]	; (8001ccc <ADC_Init+0x1f4>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d022      	beq.n	8001bb6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6899      	ldr	r1, [r3, #8]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ba0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6899      	ldr	r1, [r3, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	e00f      	b.n	8001bd6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bd4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0202 	bic.w	r2, r2, #2
 8001be4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6899      	ldr	r1, [r3, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	7e1b      	ldrb	r3, [r3, #24]
 8001bf0:	005a      	lsls	r2, r3, #1
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d01b      	beq.n	8001c3c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c12:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c22:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6859      	ldr	r1, [r3, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	035a      	lsls	r2, r3, #13
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	e007      	b.n	8001c4c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	051a      	lsls	r2, r3, #20
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6899      	ldr	r1, [r3, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c8e:	025a      	lsls	r2, r3, #9
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ca6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6899      	ldr	r1, [r3, #8]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	029a      	lsls	r2, r3, #10
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	609a      	str	r2, [r3, #8]
}
 8001cbc:	bf00      	nop
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	40012300 	.word	0x40012300
 8001ccc:	0f000001 	.word	0x0f000001

08001cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cec:	4013      	ands	r3, r2
 8001cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d02:	4a04      	ldr	r2, [pc, #16]	; (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	60d3      	str	r3, [r2, #12]
}
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d1c:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <__NVIC_GetPriorityGrouping+0x18>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	f003 0307 	and.w	r3, r3, #7
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	db0b      	blt.n	8001d5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	f003 021f 	and.w	r2, r3, #31
 8001d4c:	4907      	ldr	r1, [pc, #28]	; (8001d6c <__NVIC_EnableIRQ+0x38>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	2001      	movs	r0, #1
 8001d56:	fa00 f202 	lsl.w	r2, r0, r2
 8001d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000e100 	.word	0xe000e100

08001d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	6039      	str	r1, [r7, #0]
 8001d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	db0a      	blt.n	8001d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	490c      	ldr	r1, [pc, #48]	; (8001dbc <__NVIC_SetPriority+0x4c>)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	0112      	lsls	r2, r2, #4
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	440b      	add	r3, r1
 8001d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d98:	e00a      	b.n	8001db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4908      	ldr	r1, [pc, #32]	; (8001dc0 <__NVIC_SetPriority+0x50>)
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	3b04      	subs	r3, #4
 8001da8:	0112      	lsls	r2, r2, #4
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	440b      	add	r3, r1
 8001dae:	761a      	strb	r2, [r3, #24]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000e100 	.word	0xe000e100
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b089      	sub	sp, #36	; 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f1c3 0307 	rsb	r3, r3, #7
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	bf28      	it	cs
 8001de2:	2304      	movcs	r3, #4
 8001de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3304      	adds	r3, #4
 8001dea:	2b06      	cmp	r3, #6
 8001dec:	d902      	bls.n	8001df4 <NVIC_EncodePriority+0x30>
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3b03      	subs	r3, #3
 8001df2:	e000      	b.n	8001df6 <NVIC_EncodePriority+0x32>
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43da      	mvns	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	401a      	ands	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa01 f303 	lsl.w	r3, r1, r3
 8001e16:	43d9      	mvns	r1, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	4313      	orrs	r3, r2
         );
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3724      	adds	r7, #36	; 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e3c:	d301      	bcc.n	8001e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e00f      	b.n	8001e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e42:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <SysTick_Config+0x40>)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4a:	210f      	movs	r1, #15
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e50:	f7ff ff8e 	bl	8001d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <SysTick_Config+0x40>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5a:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <SysTick_Config+0x40>)
 8001e5c:	2207      	movs	r2, #7
 8001e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	e000e010 	.word	0xe000e010

08001e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ff29 	bl	8001cd0 <__NVIC_SetPriorityGrouping>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e98:	f7ff ff3e 	bl	8001d18 <__NVIC_GetPriorityGrouping>
 8001e9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	6978      	ldr	r0, [r7, #20]
 8001ea4:	f7ff ff8e 	bl	8001dc4 <NVIC_EncodePriority>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff5d 	bl	8001d70 <__NVIC_SetPriority>
}
 8001eb6:	bf00      	nop
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff31 	bl	8001d34 <__NVIC_EnableIRQ>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff ffa2 	bl	8001e2c <SysTick_Config>
 8001ee8:	4603      	mov	r3, r0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b089      	sub	sp, #36	; 0x24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
 8001f0e:	e16b      	b.n	80021e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f10:	2201      	movs	r2, #1
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	4013      	ands	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	f040 815a 	bne.w	80021e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d005      	beq.n	8001f46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d130      	bne.n	8001fa8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	2203      	movs	r2, #3
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	091b      	lsrs	r3, r3, #4
 8001f92:	f003 0201 	and.w	r2, r3, #1
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	d017      	beq.n	8001fe4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 0303 	and.w	r3, r3, #3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d123      	bne.n	8002038 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	08da      	lsrs	r2, r3, #3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3208      	adds	r2, #8
 8001ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	220f      	movs	r2, #15
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	691a      	ldr	r2, [r3, #16]
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	08da      	lsrs	r2, r3, #3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3208      	adds	r2, #8
 8002032:	69b9      	ldr	r1, [r7, #24]
 8002034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	2203      	movs	r2, #3
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4013      	ands	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 0203 	and.w	r2, r3, #3
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4313      	orrs	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 80b4 	beq.w	80021e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	4b60      	ldr	r3, [pc, #384]	; (8002200 <HAL_GPIO_Init+0x30c>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	4a5f      	ldr	r2, [pc, #380]	; (8002200 <HAL_GPIO_Init+0x30c>)
 8002084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002088:	6453      	str	r3, [r2, #68]	; 0x44
 800208a:	4b5d      	ldr	r3, [pc, #372]	; (8002200 <HAL_GPIO_Init+0x30c>)
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002096:	4a5b      	ldr	r2, [pc, #364]	; (8002204 <HAL_GPIO_Init+0x310>)
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	089b      	lsrs	r3, r3, #2
 800209c:	3302      	adds	r3, #2
 800209e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	220f      	movs	r2, #15
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a52      	ldr	r2, [pc, #328]	; (8002208 <HAL_GPIO_Init+0x314>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d02b      	beq.n	800211a <HAL_GPIO_Init+0x226>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a51      	ldr	r2, [pc, #324]	; (800220c <HAL_GPIO_Init+0x318>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d025      	beq.n	8002116 <HAL_GPIO_Init+0x222>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a50      	ldr	r2, [pc, #320]	; (8002210 <HAL_GPIO_Init+0x31c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d01f      	beq.n	8002112 <HAL_GPIO_Init+0x21e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a4f      	ldr	r2, [pc, #316]	; (8002214 <HAL_GPIO_Init+0x320>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d019      	beq.n	800210e <HAL_GPIO_Init+0x21a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a4e      	ldr	r2, [pc, #312]	; (8002218 <HAL_GPIO_Init+0x324>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d013      	beq.n	800210a <HAL_GPIO_Init+0x216>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a4d      	ldr	r2, [pc, #308]	; (800221c <HAL_GPIO_Init+0x328>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d00d      	beq.n	8002106 <HAL_GPIO_Init+0x212>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a4c      	ldr	r2, [pc, #304]	; (8002220 <HAL_GPIO_Init+0x32c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d007      	beq.n	8002102 <HAL_GPIO_Init+0x20e>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a4b      	ldr	r2, [pc, #300]	; (8002224 <HAL_GPIO_Init+0x330>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d101      	bne.n	80020fe <HAL_GPIO_Init+0x20a>
 80020fa:	2307      	movs	r3, #7
 80020fc:	e00e      	b.n	800211c <HAL_GPIO_Init+0x228>
 80020fe:	2308      	movs	r3, #8
 8002100:	e00c      	b.n	800211c <HAL_GPIO_Init+0x228>
 8002102:	2306      	movs	r3, #6
 8002104:	e00a      	b.n	800211c <HAL_GPIO_Init+0x228>
 8002106:	2305      	movs	r3, #5
 8002108:	e008      	b.n	800211c <HAL_GPIO_Init+0x228>
 800210a:	2304      	movs	r3, #4
 800210c:	e006      	b.n	800211c <HAL_GPIO_Init+0x228>
 800210e:	2303      	movs	r3, #3
 8002110:	e004      	b.n	800211c <HAL_GPIO_Init+0x228>
 8002112:	2302      	movs	r3, #2
 8002114:	e002      	b.n	800211c <HAL_GPIO_Init+0x228>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <HAL_GPIO_Init+0x228>
 800211a:	2300      	movs	r3, #0
 800211c:	69fa      	ldr	r2, [r7, #28]
 800211e:	f002 0203 	and.w	r2, r2, #3
 8002122:	0092      	lsls	r2, r2, #2
 8002124:	4093      	lsls	r3, r2
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800212c:	4935      	ldr	r1, [pc, #212]	; (8002204 <HAL_GPIO_Init+0x310>)
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	089b      	lsrs	r3, r3, #2
 8002132:	3302      	adds	r3, #2
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800213a:	4b3b      	ldr	r3, [pc, #236]	; (8002228 <HAL_GPIO_Init+0x334>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	43db      	mvns	r3, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4013      	ands	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800215e:	4a32      	ldr	r2, [pc, #200]	; (8002228 <HAL_GPIO_Init+0x334>)
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002164:	4b30      	ldr	r3, [pc, #192]	; (8002228 <HAL_GPIO_Init+0x334>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002188:	4a27      	ldr	r2, [pc, #156]	; (8002228 <HAL_GPIO_Init+0x334>)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800218e:	4b26      	ldr	r3, [pc, #152]	; (8002228 <HAL_GPIO_Init+0x334>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	43db      	mvns	r3, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4013      	ands	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021b2:	4a1d      	ldr	r2, [pc, #116]	; (8002228 <HAL_GPIO_Init+0x334>)
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021b8:	4b1b      	ldr	r3, [pc, #108]	; (8002228 <HAL_GPIO_Init+0x334>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021dc:	4a12      	ldr	r2, [pc, #72]	; (8002228 <HAL_GPIO_Init+0x334>)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	3301      	adds	r3, #1
 80021e6:	61fb      	str	r3, [r7, #28]
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	2b0f      	cmp	r3, #15
 80021ec:	f67f ae90 	bls.w	8001f10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021f0:	bf00      	nop
 80021f2:	bf00      	nop
 80021f4:	3724      	adds	r7, #36	; 0x24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40023800 	.word	0x40023800
 8002204:	40013800 	.word	0x40013800
 8002208:	40020000 	.word	0x40020000
 800220c:	40020400 	.word	0x40020400
 8002210:	40020800 	.word	0x40020800
 8002214:	40020c00 	.word	0x40020c00
 8002218:	40021000 	.word	0x40021000
 800221c:	40021400 	.word	0x40021400
 8002220:	40021800 	.word	0x40021800
 8002224:	40021c00 	.word	0x40021c00
 8002228:	40013c00 	.word	0x40013c00

0800222c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	460b      	mov	r3, r1
 8002236:	807b      	strh	r3, [r7, #2]
 8002238:	4613      	mov	r3, r2
 800223a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800223c:	787b      	ldrb	r3, [r7, #1]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002242:	887a      	ldrh	r2, [r7, #2]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002248:	e003      	b.n	8002252 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800224a:	887b      	ldrh	r3, [r7, #2]
 800224c:	041a      	lsls	r2, r3, #16
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	619a      	str	r2, [r3, #24]
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800226a:	4b08      	ldr	r3, [pc, #32]	; (800228c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800226c:	695a      	ldr	r2, [r3, #20]
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	4013      	ands	r3, r2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d006      	beq.n	8002284 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002276:	4a05      	ldr	r2, [pc, #20]	; (800228c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002278:	88fb      	ldrh	r3, [r7, #6]
 800227a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800227c:	88fb      	ldrh	r3, [r7, #6]
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe fd88 	bl	8000d94 <HAL_GPIO_EXTI_Callback>
  }
}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40013c00 	.word	0x40013c00

08002290 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e264      	b.n	800276c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d075      	beq.n	800239a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022ae:	4ba3      	ldr	r3, [pc, #652]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d00c      	beq.n	80022d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ba:	4ba0      	ldr	r3, [pc, #640]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d112      	bne.n	80022ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022c6:	4b9d      	ldr	r3, [pc, #628]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022d2:	d10b      	bne.n	80022ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d4:	4b99      	ldr	r3, [pc, #612]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d05b      	beq.n	8002398 <HAL_RCC_OscConfig+0x108>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d157      	bne.n	8002398 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e23f      	b.n	800276c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f4:	d106      	bne.n	8002304 <HAL_RCC_OscConfig+0x74>
 80022f6:	4b91      	ldr	r3, [pc, #580]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a90      	ldr	r2, [pc, #576]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 80022fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	e01d      	b.n	8002340 <HAL_RCC_OscConfig+0xb0>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800230c:	d10c      	bne.n	8002328 <HAL_RCC_OscConfig+0x98>
 800230e:	4b8b      	ldr	r3, [pc, #556]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a8a      	ldr	r2, [pc, #552]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 8002314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	4b88      	ldr	r3, [pc, #544]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a87      	ldr	r2, [pc, #540]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 8002320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	e00b      	b.n	8002340 <HAL_RCC_OscConfig+0xb0>
 8002328:	4b84      	ldr	r3, [pc, #528]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a83      	ldr	r2, [pc, #524]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 800232e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	4b81      	ldr	r3, [pc, #516]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a80      	ldr	r2, [pc, #512]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 800233a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800233e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d013      	beq.n	8002370 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7ff f8ea 	bl	8001520 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002350:	f7ff f8e6 	bl	8001520 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	; 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e204      	b.n	800276c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002362:	4b76      	ldr	r3, [pc, #472]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0xc0>
 800236e:	e014      	b.n	800239a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002370:	f7ff f8d6 	bl	8001520 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002378:	f7ff f8d2 	bl	8001520 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b64      	cmp	r3, #100	; 0x64
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e1f0      	b.n	800276c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238a:	4b6c      	ldr	r3, [pc, #432]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0xe8>
 8002396:	e000      	b.n	800239a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d063      	beq.n	800246e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023a6:	4b65      	ldr	r3, [pc, #404]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00b      	beq.n	80023ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023b2:	4b62      	ldr	r3, [pc, #392]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d11c      	bne.n	80023f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023be:	4b5f      	ldr	r3, [pc, #380]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d116      	bne.n	80023f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ca:	4b5c      	ldr	r3, [pc, #368]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d005      	beq.n	80023e2 <HAL_RCC_OscConfig+0x152>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d001      	beq.n	80023e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e1c4      	b.n	800276c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e2:	4b56      	ldr	r3, [pc, #344]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4952      	ldr	r1, [pc, #328]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f6:	e03a      	b.n	800246e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d020      	beq.n	8002442 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002400:	4b4f      	ldr	r3, [pc, #316]	; (8002540 <HAL_RCC_OscConfig+0x2b0>)
 8002402:	2201      	movs	r2, #1
 8002404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002406:	f7ff f88b 	bl	8001520 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800240e:	f7ff f887 	bl	8001520 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e1a5      	b.n	800276c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002420:	4b46      	ldr	r3, [pc, #280]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f0      	beq.n	800240e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242c:	4b43      	ldr	r3, [pc, #268]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4940      	ldr	r1, [pc, #256]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 800243c:	4313      	orrs	r3, r2
 800243e:	600b      	str	r3, [r1, #0]
 8002440:	e015      	b.n	800246e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002442:	4b3f      	ldr	r3, [pc, #252]	; (8002540 <HAL_RCC_OscConfig+0x2b0>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002448:	f7ff f86a 	bl	8001520 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002450:	f7ff f866 	bl	8001520 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e184      	b.n	800276c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002462:	4b36      	ldr	r3, [pc, #216]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d030      	beq.n	80024dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d016      	beq.n	80024b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002482:	4b30      	ldr	r3, [pc, #192]	; (8002544 <HAL_RCC_OscConfig+0x2b4>)
 8002484:	2201      	movs	r2, #1
 8002486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002488:	f7ff f84a 	bl	8001520 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002490:	f7ff f846 	bl	8001520 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e164      	b.n	800276c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a2:	4b26      	ldr	r3, [pc, #152]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 80024a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0x200>
 80024ae:	e015      	b.n	80024dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024b0:	4b24      	ldr	r3, [pc, #144]	; (8002544 <HAL_RCC_OscConfig+0x2b4>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b6:	f7ff f833 	bl	8001520 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024be:	f7ff f82f 	bl	8001520 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e14d      	b.n	800276c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d0:	4b1a      	ldr	r3, [pc, #104]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 80024d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1f0      	bne.n	80024be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 80a0 	beq.w	800262a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ea:	2300      	movs	r3, #0
 80024ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ee:	4b13      	ldr	r3, [pc, #76]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10f      	bne.n	800251a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	4b0f      	ldr	r3, [pc, #60]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	4a0e      	ldr	r2, [pc, #56]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 8002504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002508:	6413      	str	r3, [r2, #64]	; 0x40
 800250a:	4b0c      	ldr	r3, [pc, #48]	; (800253c <HAL_RCC_OscConfig+0x2ac>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002512:	60bb      	str	r3, [r7, #8]
 8002514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002516:	2301      	movs	r3, #1
 8002518:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800251a:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <HAL_RCC_OscConfig+0x2b8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002522:	2b00      	cmp	r3, #0
 8002524:	d121      	bne.n	800256a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002526:	4b08      	ldr	r3, [pc, #32]	; (8002548 <HAL_RCC_OscConfig+0x2b8>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a07      	ldr	r2, [pc, #28]	; (8002548 <HAL_RCC_OscConfig+0x2b8>)
 800252c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002530:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002532:	f7fe fff5 	bl	8001520 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002538:	e011      	b.n	800255e <HAL_RCC_OscConfig+0x2ce>
 800253a:	bf00      	nop
 800253c:	40023800 	.word	0x40023800
 8002540:	42470000 	.word	0x42470000
 8002544:	42470e80 	.word	0x42470e80
 8002548:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800254c:	f7fe ffe8 	bl	8001520 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e106      	b.n	800276c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255e:	4b85      	ldr	r3, [pc, #532]	; (8002774 <HAL_RCC_OscConfig+0x4e4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0f0      	beq.n	800254c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d106      	bne.n	8002580 <HAL_RCC_OscConfig+0x2f0>
 8002572:	4b81      	ldr	r3, [pc, #516]	; (8002778 <HAL_RCC_OscConfig+0x4e8>)
 8002574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002576:	4a80      	ldr	r2, [pc, #512]	; (8002778 <HAL_RCC_OscConfig+0x4e8>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6713      	str	r3, [r2, #112]	; 0x70
 800257e:	e01c      	b.n	80025ba <HAL_RCC_OscConfig+0x32a>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b05      	cmp	r3, #5
 8002586:	d10c      	bne.n	80025a2 <HAL_RCC_OscConfig+0x312>
 8002588:	4b7b      	ldr	r3, [pc, #492]	; (8002778 <HAL_RCC_OscConfig+0x4e8>)
 800258a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258c:	4a7a      	ldr	r2, [pc, #488]	; (8002778 <HAL_RCC_OscConfig+0x4e8>)
 800258e:	f043 0304 	orr.w	r3, r3, #4
 8002592:	6713      	str	r3, [r2, #112]	; 0x70
 8002594:	4b78      	ldr	r3, [pc, #480]	; (8002778 <HAL_RCC_OscConfig+0x4e8>)
 8002596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002598:	4a77      	ldr	r2, [pc, #476]	; (8002778 <HAL_RCC_OscConfig+0x4e8>)
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	6713      	str	r3, [r2, #112]	; 0x70
 80025a0:	e00b      	b.n	80025ba <HAL_RCC_OscConfig+0x32a>
 80025a2:	4b75      	ldr	r3, [pc, #468]	; (8002778 <HAL_RCC_OscConfig+0x4e8>)
 80025a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a6:	4a74      	ldr	r2, [pc, #464]	; (8002778 <HAL_RCC_OscConfig+0x4e8>)
 80025a8:	f023 0301 	bic.w	r3, r3, #1
 80025ac:	6713      	str	r3, [r2, #112]	; 0x70
 80025ae:	4b72      	ldr	r3, [pc, #456]	; (8002778 <HAL_RCC_OscConfig+0x4e8>)
 80025b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b2:	4a71      	ldr	r2, [pc, #452]	; (8002778 <HAL_RCC_OscConfig+0x4e8>)
 80025b4:	f023 0304 	bic.w	r3, r3, #4
 80025b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d015      	beq.n	80025ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c2:	f7fe ffad 	bl	8001520 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c8:	e00a      	b.n	80025e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ca:	f7fe ffa9 	bl	8001520 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d8:	4293      	cmp	r3, r2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e0c5      	b.n	800276c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e0:	4b65      	ldr	r3, [pc, #404]	; (8002778 <HAL_RCC_OscConfig+0x4e8>)
 80025e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0ee      	beq.n	80025ca <HAL_RCC_OscConfig+0x33a>
 80025ec:	e014      	b.n	8002618 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ee:	f7fe ff97 	bl	8001520 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f4:	e00a      	b.n	800260c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025f6:	f7fe ff93 	bl	8001520 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	f241 3288 	movw	r2, #5000	; 0x1388
 8002604:	4293      	cmp	r3, r2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e0af      	b.n	800276c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800260c:	4b5a      	ldr	r3, [pc, #360]	; (8002778 <HAL_RCC_OscConfig+0x4e8>)
 800260e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1ee      	bne.n	80025f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002618:	7dfb      	ldrb	r3, [r7, #23]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d105      	bne.n	800262a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800261e:	4b56      	ldr	r3, [pc, #344]	; (8002778 <HAL_RCC_OscConfig+0x4e8>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	4a55      	ldr	r2, [pc, #340]	; (8002778 <HAL_RCC_OscConfig+0x4e8>)
 8002624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002628:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 809b 	beq.w	800276a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002634:	4b50      	ldr	r3, [pc, #320]	; (8002778 <HAL_RCC_OscConfig+0x4e8>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 030c 	and.w	r3, r3, #12
 800263c:	2b08      	cmp	r3, #8
 800263e:	d05c      	beq.n	80026fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	2b02      	cmp	r3, #2
 8002646:	d141      	bne.n	80026cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002648:	4b4c      	ldr	r3, [pc, #304]	; (800277c <HAL_RCC_OscConfig+0x4ec>)
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264e:	f7fe ff67 	bl	8001520 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002656:	f7fe ff63 	bl	8001520 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e081      	b.n	800276c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002668:	4b43      	ldr	r3, [pc, #268]	; (8002778 <HAL_RCC_OscConfig+0x4e8>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f0      	bne.n	8002656 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69da      	ldr	r2, [r3, #28]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	431a      	orrs	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	019b      	lsls	r3, r3, #6
 8002684:	431a      	orrs	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268a:	085b      	lsrs	r3, r3, #1
 800268c:	3b01      	subs	r3, #1
 800268e:	041b      	lsls	r3, r3, #16
 8002690:	431a      	orrs	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002696:	061b      	lsls	r3, r3, #24
 8002698:	4937      	ldr	r1, [pc, #220]	; (8002778 <HAL_RCC_OscConfig+0x4e8>)
 800269a:	4313      	orrs	r3, r2
 800269c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800269e:	4b37      	ldr	r3, [pc, #220]	; (800277c <HAL_RCC_OscConfig+0x4ec>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7fe ff3c 	bl	8001520 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ac:	f7fe ff38 	bl	8001520 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e056      	b.n	800276c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026be:	4b2e      	ldr	r3, [pc, #184]	; (8002778 <HAL_RCC_OscConfig+0x4e8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x41c>
 80026ca:	e04e      	b.n	800276a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026cc:	4b2b      	ldr	r3, [pc, #172]	; (800277c <HAL_RCC_OscConfig+0x4ec>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d2:	f7fe ff25 	bl	8001520 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026da:	f7fe ff21 	bl	8001520 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e03f      	b.n	800276c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ec:	4b22      	ldr	r3, [pc, #136]	; (8002778 <HAL_RCC_OscConfig+0x4e8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f0      	bne.n	80026da <HAL_RCC_OscConfig+0x44a>
 80026f8:	e037      	b.n	800276a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e032      	b.n	800276c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002706:	4b1c      	ldr	r3, [pc, #112]	; (8002778 <HAL_RCC_OscConfig+0x4e8>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d028      	beq.n	8002766 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800271e:	429a      	cmp	r2, r3
 8002720:	d121      	bne.n	8002766 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800272c:	429a      	cmp	r2, r3
 800272e:	d11a      	bne.n	8002766 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002736:	4013      	ands	r3, r2
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800273c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800273e:	4293      	cmp	r3, r2
 8002740:	d111      	bne.n	8002766 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274c:	085b      	lsrs	r3, r3, #1
 800274e:	3b01      	subs	r3, #1
 8002750:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002752:	429a      	cmp	r2, r3
 8002754:	d107      	bne.n	8002766 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002760:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002762:	429a      	cmp	r2, r3
 8002764:	d001      	beq.n	800276a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40007000 	.word	0x40007000
 8002778:	40023800 	.word	0x40023800
 800277c:	42470060 	.word	0x42470060

08002780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e0cc      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002794:	4b68      	ldr	r3, [pc, #416]	; (8002938 <HAL_RCC_ClockConfig+0x1b8>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d90c      	bls.n	80027bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a2:	4b65      	ldr	r3, [pc, #404]	; (8002938 <HAL_RCC_ClockConfig+0x1b8>)
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027aa:	4b63      	ldr	r3, [pc, #396]	; (8002938 <HAL_RCC_ClockConfig+0x1b8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d001      	beq.n	80027bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0b8      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d020      	beq.n	800280a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027d4:	4b59      	ldr	r3, [pc, #356]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	4a58      	ldr	r2, [pc, #352]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80027da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027ec:	4b53      	ldr	r3, [pc, #332]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	4a52      	ldr	r2, [pc, #328]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80027f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f8:	4b50      	ldr	r3, [pc, #320]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	494d      	ldr	r1, [pc, #308]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	4313      	orrs	r3, r2
 8002808:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d044      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d107      	bne.n	800282e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281e:	4b47      	ldr	r3, [pc, #284]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d119      	bne.n	800285e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e07f      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d003      	beq.n	800283e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800283a:	2b03      	cmp	r3, #3
 800283c:	d107      	bne.n	800284e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800283e:	4b3f      	ldr	r3, [pc, #252]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d109      	bne.n	800285e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e06f      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284e:	4b3b      	ldr	r3, [pc, #236]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e067      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800285e:	4b37      	ldr	r3, [pc, #220]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f023 0203 	bic.w	r2, r3, #3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	4934      	ldr	r1, [pc, #208]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 800286c:	4313      	orrs	r3, r2
 800286e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002870:	f7fe fe56 	bl	8001520 <HAL_GetTick>
 8002874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002876:	e00a      	b.n	800288e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002878:	f7fe fe52 	bl	8001520 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	f241 3288 	movw	r2, #5000	; 0x1388
 8002886:	4293      	cmp	r3, r2
 8002888:	d901      	bls.n	800288e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e04f      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288e:	4b2b      	ldr	r3, [pc, #172]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 020c 	and.w	r2, r3, #12
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	429a      	cmp	r2, r3
 800289e:	d1eb      	bne.n	8002878 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028a0:	4b25      	ldr	r3, [pc, #148]	; (8002938 <HAL_RCC_ClockConfig+0x1b8>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d20c      	bcs.n	80028c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ae:	4b22      	ldr	r3, [pc, #136]	; (8002938 <HAL_RCC_ClockConfig+0x1b8>)
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b6:	4b20      	ldr	r3, [pc, #128]	; (8002938 <HAL_RCC_ClockConfig+0x1b8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e032      	b.n	800292e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d008      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028d4:	4b19      	ldr	r3, [pc, #100]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	4916      	ldr	r1, [pc, #88]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d009      	beq.n	8002906 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028f2:	4b12      	ldr	r3, [pc, #72]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	490e      	ldr	r1, [pc, #56]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	4313      	orrs	r3, r2
 8002904:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002906:	f000 f821 	bl	800294c <HAL_RCC_GetSysClockFreq>
 800290a:	4602      	mov	r2, r0
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	091b      	lsrs	r3, r3, #4
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	490a      	ldr	r1, [pc, #40]	; (8002940 <HAL_RCC_ClockConfig+0x1c0>)
 8002918:	5ccb      	ldrb	r3, [r1, r3]
 800291a:	fa22 f303 	lsr.w	r3, r2, r3
 800291e:	4a09      	ldr	r2, [pc, #36]	; (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 8002920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002922:	4b09      	ldr	r3, [pc, #36]	; (8002948 <HAL_RCC_ClockConfig+0x1c8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe fdb6 	bl	8001498 <HAL_InitTick>

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40023c00 	.word	0x40023c00
 800293c:	40023800 	.word	0x40023800
 8002940:	08003bec 	.word	0x08003bec
 8002944:	20000000 	.word	0x20000000
 8002948:	20000004 	.word	0x20000004

0800294c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800294c:	b5b0      	push	{r4, r5, r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002952:	2100      	movs	r1, #0
 8002954:	6079      	str	r1, [r7, #4]
 8002956:	2100      	movs	r1, #0
 8002958:	60f9      	str	r1, [r7, #12]
 800295a:	2100      	movs	r1, #0
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800295e:	2100      	movs	r1, #0
 8002960:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002962:	4952      	ldr	r1, [pc, #328]	; (8002aac <HAL_RCC_GetSysClockFreq+0x160>)
 8002964:	6889      	ldr	r1, [r1, #8]
 8002966:	f001 010c 	and.w	r1, r1, #12
 800296a:	2908      	cmp	r1, #8
 800296c:	d00d      	beq.n	800298a <HAL_RCC_GetSysClockFreq+0x3e>
 800296e:	2908      	cmp	r1, #8
 8002970:	f200 8094 	bhi.w	8002a9c <HAL_RCC_GetSysClockFreq+0x150>
 8002974:	2900      	cmp	r1, #0
 8002976:	d002      	beq.n	800297e <HAL_RCC_GetSysClockFreq+0x32>
 8002978:	2904      	cmp	r1, #4
 800297a:	d003      	beq.n	8002984 <HAL_RCC_GetSysClockFreq+0x38>
 800297c:	e08e      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800297e:	4b4c      	ldr	r3, [pc, #304]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x164>)
 8002980:	60bb      	str	r3, [r7, #8]
       break;
 8002982:	e08e      	b.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002984:	4b4b      	ldr	r3, [pc, #300]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x168>)
 8002986:	60bb      	str	r3, [r7, #8]
      break;
 8002988:	e08b      	b.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800298a:	4948      	ldr	r1, [pc, #288]	; (8002aac <HAL_RCC_GetSysClockFreq+0x160>)
 800298c:	6849      	ldr	r1, [r1, #4]
 800298e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002992:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002994:	4945      	ldr	r1, [pc, #276]	; (8002aac <HAL_RCC_GetSysClockFreq+0x160>)
 8002996:	6849      	ldr	r1, [r1, #4]
 8002998:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800299c:	2900      	cmp	r1, #0
 800299e:	d024      	beq.n	80029ea <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029a0:	4942      	ldr	r1, [pc, #264]	; (8002aac <HAL_RCC_GetSysClockFreq+0x160>)
 80029a2:	6849      	ldr	r1, [r1, #4]
 80029a4:	0989      	lsrs	r1, r1, #6
 80029a6:	4608      	mov	r0, r1
 80029a8:	f04f 0100 	mov.w	r1, #0
 80029ac:	f240 14ff 	movw	r4, #511	; 0x1ff
 80029b0:	f04f 0500 	mov.w	r5, #0
 80029b4:	ea00 0204 	and.w	r2, r0, r4
 80029b8:	ea01 0305 	and.w	r3, r1, r5
 80029bc:	493d      	ldr	r1, [pc, #244]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x168>)
 80029be:	fb01 f003 	mul.w	r0, r1, r3
 80029c2:	2100      	movs	r1, #0
 80029c4:	fb01 f102 	mul.w	r1, r1, r2
 80029c8:	1844      	adds	r4, r0, r1
 80029ca:	493a      	ldr	r1, [pc, #232]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x168>)
 80029cc:	fba2 0101 	umull	r0, r1, r2, r1
 80029d0:	1863      	adds	r3, r4, r1
 80029d2:	4619      	mov	r1, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	461a      	mov	r2, r3
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	f7fd ff7e 	bl	80008dc <__aeabi_uldivmod>
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	4613      	mov	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	e04a      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ea:	4b30      	ldr	r3, [pc, #192]	; (8002aac <HAL_RCC_GetSysClockFreq+0x160>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	099b      	lsrs	r3, r3, #6
 80029f0:	461a      	mov	r2, r3
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029fa:	f04f 0100 	mov.w	r1, #0
 80029fe:	ea02 0400 	and.w	r4, r2, r0
 8002a02:	ea03 0501 	and.w	r5, r3, r1
 8002a06:	4620      	mov	r0, r4
 8002a08:	4629      	mov	r1, r5
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	014b      	lsls	r3, r1, #5
 8002a14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a18:	0142      	lsls	r2, r0, #5
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	1b00      	subs	r0, r0, r4
 8002a20:	eb61 0105 	sbc.w	r1, r1, r5
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	018b      	lsls	r3, r1, #6
 8002a2e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a32:	0182      	lsls	r2, r0, #6
 8002a34:	1a12      	subs	r2, r2, r0
 8002a36:	eb63 0301 	sbc.w	r3, r3, r1
 8002a3a:	f04f 0000 	mov.w	r0, #0
 8002a3e:	f04f 0100 	mov.w	r1, #0
 8002a42:	00d9      	lsls	r1, r3, #3
 8002a44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a48:	00d0      	lsls	r0, r2, #3
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	1912      	adds	r2, r2, r4
 8002a50:	eb45 0303 	adc.w	r3, r5, r3
 8002a54:	f04f 0000 	mov.w	r0, #0
 8002a58:	f04f 0100 	mov.w	r1, #0
 8002a5c:	0299      	lsls	r1, r3, #10
 8002a5e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a62:	0290      	lsls	r0, r2, #10
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4610      	mov	r0, r2
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	f04f 0300 	mov.w	r3, #0
 8002a74:	f7fd ff32 	bl	80008dc <__aeabi_uldivmod>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a80:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <HAL_RCC_GetSysClockFreq+0x160>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	0c1b      	lsrs	r3, r3, #16
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a98:	60bb      	str	r3, [r7, #8]
      break;
 8002a9a:	e002      	b.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a9c:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x164>)
 8002a9e:	60bb      	str	r3, [r7, #8]
      break;
 8002aa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bdb0      	pop	{r4, r5, r7, pc}
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	00f42400 	.word	0x00f42400
 8002ab4:	017d7840 	.word	0x017d7840

08002ab8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002abc:	4b03      	ldr	r3, [pc, #12]	; (8002acc <HAL_RCC_GetHCLKFreq+0x14>)
 8002abe:	681b      	ldr	r3, [r3, #0]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	20000000 	.word	0x20000000

08002ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ad4:	f7ff fff0 	bl	8002ab8 <HAL_RCC_GetHCLKFreq>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	0a9b      	lsrs	r3, r3, #10
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	4903      	ldr	r1, [pc, #12]	; (8002af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ae6:	5ccb      	ldrb	r3, [r1, r3]
 8002ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40023800 	.word	0x40023800
 8002af4:	08003bfc 	.word	0x08003bfc

08002af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002afc:	f7ff ffdc 	bl	8002ab8 <HAL_RCC_GetHCLKFreq>
 8002b00:	4602      	mov	r2, r0
 8002b02:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	0b5b      	lsrs	r3, r3, #13
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	4903      	ldr	r1, [pc, #12]	; (8002b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b0e:	5ccb      	ldrb	r3, [r1, r3]
 8002b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	08003bfc 	.word	0x08003bfc

08002b20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e03f      	b.n	8002bb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d106      	bne.n	8002b4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7fe fb88 	bl	800125c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2224      	movs	r2, #36	; 0x24
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f9cb 	bl	8002f00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	691a      	ldr	r2, [r3, #16]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695a      	ldr	r2, [r3, #20]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b08a      	sub	sp, #40	; 0x28
 8002bbe:	af02      	add	r7, sp, #8
 8002bc0:	60f8      	str	r0, [r7, #12]
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	603b      	str	r3, [r7, #0]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b20      	cmp	r3, #32
 8002bd8:	d17c      	bne.n	8002cd4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d002      	beq.n	8002be6 <HAL_UART_Transmit+0x2c>
 8002be0:	88fb      	ldrh	r3, [r7, #6]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e075      	b.n	8002cd6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <HAL_UART_Transmit+0x3e>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	e06e      	b.n	8002cd6 <HAL_UART_Transmit+0x11c>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2221      	movs	r2, #33	; 0x21
 8002c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c0e:	f7fe fc87 	bl	8001520 <HAL_GetTick>
 8002c12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	88fa      	ldrh	r2, [r7, #6]
 8002c18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	88fa      	ldrh	r2, [r7, #6]
 8002c1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c28:	d108      	bne.n	8002c3c <HAL_UART_Transmit+0x82>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d104      	bne.n	8002c3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	61bb      	str	r3, [r7, #24]
 8002c3a:	e003      	b.n	8002c44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c4c:	e02a      	b.n	8002ca4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	2200      	movs	r2, #0
 8002c56:	2180      	movs	r1, #128	; 0x80
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 f8e2 	bl	8002e22 <UART_WaitOnFlagUntilTimeout>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e036      	b.n	8002cd6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10b      	bne.n	8002c86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	3302      	adds	r3, #2
 8002c82:	61bb      	str	r3, [r7, #24]
 8002c84:	e007      	b.n	8002c96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	781a      	ldrb	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	3301      	adds	r3, #1
 8002c94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1cf      	bne.n	8002c4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2140      	movs	r1, #64	; 0x40
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 f8b2 	bl	8002e22 <UART_WaitOnFlagUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e006      	b.n	8002cd6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	e000      	b.n	8002cd6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002cd4:	2302      	movs	r3, #2
  }
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3720      	adds	r7, #32
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b08a      	sub	sp, #40	; 0x28
 8002ce2:	af02      	add	r7, sp, #8
 8002ce4:	60f8      	str	r0, [r7, #12]
 8002ce6:	60b9      	str	r1, [r7, #8]
 8002ce8:	603b      	str	r3, [r7, #0]
 8002cea:	4613      	mov	r3, r2
 8002cec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b20      	cmp	r3, #32
 8002cfc:	f040 808c 	bne.w	8002e18 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d002      	beq.n	8002d0c <HAL_UART_Receive+0x2e>
 8002d06:	88fb      	ldrh	r3, [r7, #6]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e084      	b.n	8002e1a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_UART_Receive+0x40>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e07d      	b.n	8002e1a <HAL_UART_Receive+0x13c>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2222      	movs	r2, #34	; 0x22
 8002d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d3a:	f7fe fbf1 	bl	8001520 <HAL_GetTick>
 8002d3e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	88fa      	ldrh	r2, [r7, #6]
 8002d44:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	88fa      	ldrh	r2, [r7, #6]
 8002d4a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d54:	d108      	bne.n	8002d68 <HAL_UART_Receive+0x8a>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d104      	bne.n	8002d68 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	61bb      	str	r3, [r7, #24]
 8002d66:	e003      	b.n	8002d70 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002d78:	e043      	b.n	8002e02 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2200      	movs	r2, #0
 8002d82:	2120      	movs	r1, #32
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 f84c 	bl	8002e22 <UART_WaitOnFlagUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e042      	b.n	8002e1a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10c      	bne.n	8002db4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	3302      	adds	r3, #2
 8002db0:	61bb      	str	r3, [r7, #24]
 8002db2:	e01f      	b.n	8002df4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dbc:	d007      	beq.n	8002dce <HAL_UART_Receive+0xf0>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10a      	bne.n	8002ddc <HAL_UART_Receive+0xfe>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	701a      	strb	r2, [r3, #0]
 8002dda:	e008      	b.n	8002dee <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	3301      	adds	r3, #1
 8002df2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1b6      	bne.n	8002d7a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002e14:	2300      	movs	r3, #0
 8002e16:	e000      	b.n	8002e1a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002e18:	2302      	movs	r3, #2
  }
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3720      	adds	r7, #32
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b090      	sub	sp, #64	; 0x40
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	603b      	str	r3, [r7, #0]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e32:	e050      	b.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3a:	d04c      	beq.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d007      	beq.n	8002e52 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e42:	f7fe fb6d 	bl	8001520 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d241      	bcs.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	330c      	adds	r3, #12
 8002e58:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5c:	e853 3f00 	ldrex	r3, [r3]
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	330c      	adds	r3, #12
 8002e70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e72:	637a      	str	r2, [r7, #52]	; 0x34
 8002e74:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e7a:	e841 2300 	strex	r3, r2, [r1]
 8002e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1e5      	bne.n	8002e52 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	3314      	adds	r3, #20
 8002e8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	e853 3f00 	ldrex	r3, [r3]
 8002e94:	613b      	str	r3, [r7, #16]
   return(result);
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	f023 0301 	bic.w	r3, r3, #1
 8002e9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	3314      	adds	r3, #20
 8002ea4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ea6:	623a      	str	r2, [r7, #32]
 8002ea8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eaa:	69f9      	ldr	r1, [r7, #28]
 8002eac:	6a3a      	ldr	r2, [r7, #32]
 8002eae:	e841 2300 	strex	r3, r2, [r1]
 8002eb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1e5      	bne.n	8002e86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e00f      	b.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	bf0c      	ite	eq
 8002ee6:	2301      	moveq	r3, #1
 8002ee8:	2300      	movne	r3, #0
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	461a      	mov	r2, r3
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d09f      	beq.n	8002e34 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3740      	adds	r7, #64	; 0x40
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f04:	b09f      	sub	sp, #124	; 0x7c
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f16:	68d9      	ldr	r1, [r3, #12]
 8002f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	ea40 0301 	orr.w	r3, r0, r1
 8002f20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	431a      	orrs	r2, r3
 8002f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f44:	f021 010c 	bic.w	r1, r1, #12
 8002f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f4e:	430b      	orrs	r3, r1
 8002f50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f5e:	6999      	ldr	r1, [r3, #24]
 8002f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	ea40 0301 	orr.w	r3, r0, r1
 8002f68:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	4bc5      	ldr	r3, [pc, #788]	; (8003284 <UART_SetConfig+0x384>)
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d004      	beq.n	8002f7e <UART_SetConfig+0x7e>
 8002f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	4bc3      	ldr	r3, [pc, #780]	; (8003288 <UART_SetConfig+0x388>)
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d103      	bne.n	8002f86 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f7e:	f7ff fdbb 	bl	8002af8 <HAL_RCC_GetPCLK2Freq>
 8002f82:	6778      	str	r0, [r7, #116]	; 0x74
 8002f84:	e002      	b.n	8002f8c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f86:	f7ff fda3 	bl	8002ad0 <HAL_RCC_GetPCLK1Freq>
 8002f8a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f94:	f040 80b6 	bne.w	8003104 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f9a:	461c      	mov	r4, r3
 8002f9c:	f04f 0500 	mov.w	r5, #0
 8002fa0:	4622      	mov	r2, r4
 8002fa2:	462b      	mov	r3, r5
 8002fa4:	1891      	adds	r1, r2, r2
 8002fa6:	6439      	str	r1, [r7, #64]	; 0x40
 8002fa8:	415b      	adcs	r3, r3
 8002faa:	647b      	str	r3, [r7, #68]	; 0x44
 8002fac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002fb0:	1912      	adds	r2, r2, r4
 8002fb2:	eb45 0303 	adc.w	r3, r5, r3
 8002fb6:	f04f 0000 	mov.w	r0, #0
 8002fba:	f04f 0100 	mov.w	r1, #0
 8002fbe:	00d9      	lsls	r1, r3, #3
 8002fc0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fc4:	00d0      	lsls	r0, r2, #3
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	1911      	adds	r1, r2, r4
 8002fcc:	6639      	str	r1, [r7, #96]	; 0x60
 8002fce:	416b      	adcs	r3, r5
 8002fd0:	667b      	str	r3, [r7, #100]	; 0x64
 8002fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	f04f 0300 	mov.w	r3, #0
 8002fdc:	1891      	adds	r1, r2, r2
 8002fde:	63b9      	str	r1, [r7, #56]	; 0x38
 8002fe0:	415b      	adcs	r3, r3
 8002fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fe4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002fe8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002fec:	f7fd fc76 	bl	80008dc <__aeabi_uldivmod>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4ba5      	ldr	r3, [pc, #660]	; (800328c <UART_SetConfig+0x38c>)
 8002ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	011e      	lsls	r6, r3, #4
 8002ffe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003000:	461c      	mov	r4, r3
 8003002:	f04f 0500 	mov.w	r5, #0
 8003006:	4622      	mov	r2, r4
 8003008:	462b      	mov	r3, r5
 800300a:	1891      	adds	r1, r2, r2
 800300c:	6339      	str	r1, [r7, #48]	; 0x30
 800300e:	415b      	adcs	r3, r3
 8003010:	637b      	str	r3, [r7, #52]	; 0x34
 8003012:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003016:	1912      	adds	r2, r2, r4
 8003018:	eb45 0303 	adc.w	r3, r5, r3
 800301c:	f04f 0000 	mov.w	r0, #0
 8003020:	f04f 0100 	mov.w	r1, #0
 8003024:	00d9      	lsls	r1, r3, #3
 8003026:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800302a:	00d0      	lsls	r0, r2, #3
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	1911      	adds	r1, r2, r4
 8003032:	65b9      	str	r1, [r7, #88]	; 0x58
 8003034:	416b      	adcs	r3, r5
 8003036:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	461a      	mov	r2, r3
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	1891      	adds	r1, r2, r2
 8003044:	62b9      	str	r1, [r7, #40]	; 0x28
 8003046:	415b      	adcs	r3, r3
 8003048:	62fb      	str	r3, [r7, #44]	; 0x2c
 800304a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800304e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003052:	f7fd fc43 	bl	80008dc <__aeabi_uldivmod>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	4b8c      	ldr	r3, [pc, #560]	; (800328c <UART_SetConfig+0x38c>)
 800305c:	fba3 1302 	umull	r1, r3, r3, r2
 8003060:	095b      	lsrs	r3, r3, #5
 8003062:	2164      	movs	r1, #100	; 0x64
 8003064:	fb01 f303 	mul.w	r3, r1, r3
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	3332      	adds	r3, #50	; 0x32
 800306e:	4a87      	ldr	r2, [pc, #540]	; (800328c <UART_SetConfig+0x38c>)
 8003070:	fba2 2303 	umull	r2, r3, r2, r3
 8003074:	095b      	lsrs	r3, r3, #5
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800307c:	441e      	add	r6, r3
 800307e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003080:	4618      	mov	r0, r3
 8003082:	f04f 0100 	mov.w	r1, #0
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	1894      	adds	r4, r2, r2
 800308c:	623c      	str	r4, [r7, #32]
 800308e:	415b      	adcs	r3, r3
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
 8003092:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003096:	1812      	adds	r2, r2, r0
 8003098:	eb41 0303 	adc.w	r3, r1, r3
 800309c:	f04f 0400 	mov.w	r4, #0
 80030a0:	f04f 0500 	mov.w	r5, #0
 80030a4:	00dd      	lsls	r5, r3, #3
 80030a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80030aa:	00d4      	lsls	r4, r2, #3
 80030ac:	4622      	mov	r2, r4
 80030ae:	462b      	mov	r3, r5
 80030b0:	1814      	adds	r4, r2, r0
 80030b2:	653c      	str	r4, [r7, #80]	; 0x50
 80030b4:	414b      	adcs	r3, r1
 80030b6:	657b      	str	r3, [r7, #84]	; 0x54
 80030b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	461a      	mov	r2, r3
 80030be:	f04f 0300 	mov.w	r3, #0
 80030c2:	1891      	adds	r1, r2, r2
 80030c4:	61b9      	str	r1, [r7, #24]
 80030c6:	415b      	adcs	r3, r3
 80030c8:	61fb      	str	r3, [r7, #28]
 80030ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030ce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80030d2:	f7fd fc03 	bl	80008dc <__aeabi_uldivmod>
 80030d6:	4602      	mov	r2, r0
 80030d8:	460b      	mov	r3, r1
 80030da:	4b6c      	ldr	r3, [pc, #432]	; (800328c <UART_SetConfig+0x38c>)
 80030dc:	fba3 1302 	umull	r1, r3, r3, r2
 80030e0:	095b      	lsrs	r3, r3, #5
 80030e2:	2164      	movs	r1, #100	; 0x64
 80030e4:	fb01 f303 	mul.w	r3, r1, r3
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	3332      	adds	r3, #50	; 0x32
 80030ee:	4a67      	ldr	r2, [pc, #412]	; (800328c <UART_SetConfig+0x38c>)
 80030f0:	fba2 2303 	umull	r2, r3, r2, r3
 80030f4:	095b      	lsrs	r3, r3, #5
 80030f6:	f003 0207 	and.w	r2, r3, #7
 80030fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4432      	add	r2, r6
 8003100:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003102:	e0b9      	b.n	8003278 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003104:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003106:	461c      	mov	r4, r3
 8003108:	f04f 0500 	mov.w	r5, #0
 800310c:	4622      	mov	r2, r4
 800310e:	462b      	mov	r3, r5
 8003110:	1891      	adds	r1, r2, r2
 8003112:	6139      	str	r1, [r7, #16]
 8003114:	415b      	adcs	r3, r3
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800311c:	1912      	adds	r2, r2, r4
 800311e:	eb45 0303 	adc.w	r3, r5, r3
 8003122:	f04f 0000 	mov.w	r0, #0
 8003126:	f04f 0100 	mov.w	r1, #0
 800312a:	00d9      	lsls	r1, r3, #3
 800312c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003130:	00d0      	lsls	r0, r2, #3
 8003132:	4602      	mov	r2, r0
 8003134:	460b      	mov	r3, r1
 8003136:	eb12 0804 	adds.w	r8, r2, r4
 800313a:	eb43 0905 	adc.w	r9, r3, r5
 800313e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	4618      	mov	r0, r3
 8003144:	f04f 0100 	mov.w	r1, #0
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	008b      	lsls	r3, r1, #2
 8003152:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003156:	0082      	lsls	r2, r0, #2
 8003158:	4640      	mov	r0, r8
 800315a:	4649      	mov	r1, r9
 800315c:	f7fd fbbe 	bl	80008dc <__aeabi_uldivmod>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4b49      	ldr	r3, [pc, #292]	; (800328c <UART_SetConfig+0x38c>)
 8003166:	fba3 2302 	umull	r2, r3, r3, r2
 800316a:	095b      	lsrs	r3, r3, #5
 800316c:	011e      	lsls	r6, r3, #4
 800316e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003170:	4618      	mov	r0, r3
 8003172:	f04f 0100 	mov.w	r1, #0
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	1894      	adds	r4, r2, r2
 800317c:	60bc      	str	r4, [r7, #8]
 800317e:	415b      	adcs	r3, r3
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003186:	1812      	adds	r2, r2, r0
 8003188:	eb41 0303 	adc.w	r3, r1, r3
 800318c:	f04f 0400 	mov.w	r4, #0
 8003190:	f04f 0500 	mov.w	r5, #0
 8003194:	00dd      	lsls	r5, r3, #3
 8003196:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800319a:	00d4      	lsls	r4, r2, #3
 800319c:	4622      	mov	r2, r4
 800319e:	462b      	mov	r3, r5
 80031a0:	1814      	adds	r4, r2, r0
 80031a2:	64bc      	str	r4, [r7, #72]	; 0x48
 80031a4:	414b      	adcs	r3, r1
 80031a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f04f 0100 	mov.w	r1, #0
 80031b2:	f04f 0200 	mov.w	r2, #0
 80031b6:	f04f 0300 	mov.w	r3, #0
 80031ba:	008b      	lsls	r3, r1, #2
 80031bc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80031c0:	0082      	lsls	r2, r0, #2
 80031c2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80031c6:	f7fd fb89 	bl	80008dc <__aeabi_uldivmod>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	4b2f      	ldr	r3, [pc, #188]	; (800328c <UART_SetConfig+0x38c>)
 80031d0:	fba3 1302 	umull	r1, r3, r3, r2
 80031d4:	095b      	lsrs	r3, r3, #5
 80031d6:	2164      	movs	r1, #100	; 0x64
 80031d8:	fb01 f303 	mul.w	r3, r1, r3
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	3332      	adds	r3, #50	; 0x32
 80031e2:	4a2a      	ldr	r2, [pc, #168]	; (800328c <UART_SetConfig+0x38c>)
 80031e4:	fba2 2303 	umull	r2, r3, r2, r3
 80031e8:	095b      	lsrs	r3, r3, #5
 80031ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031ee:	441e      	add	r6, r3
 80031f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031f2:	4618      	mov	r0, r3
 80031f4:	f04f 0100 	mov.w	r1, #0
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	1894      	adds	r4, r2, r2
 80031fe:	603c      	str	r4, [r7, #0]
 8003200:	415b      	adcs	r3, r3
 8003202:	607b      	str	r3, [r7, #4]
 8003204:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003208:	1812      	adds	r2, r2, r0
 800320a:	eb41 0303 	adc.w	r3, r1, r3
 800320e:	f04f 0400 	mov.w	r4, #0
 8003212:	f04f 0500 	mov.w	r5, #0
 8003216:	00dd      	lsls	r5, r3, #3
 8003218:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800321c:	00d4      	lsls	r4, r2, #3
 800321e:	4622      	mov	r2, r4
 8003220:	462b      	mov	r3, r5
 8003222:	eb12 0a00 	adds.w	sl, r2, r0
 8003226:	eb43 0b01 	adc.w	fp, r3, r1
 800322a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	4618      	mov	r0, r3
 8003230:	f04f 0100 	mov.w	r1, #0
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	008b      	lsls	r3, r1, #2
 800323e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003242:	0082      	lsls	r2, r0, #2
 8003244:	4650      	mov	r0, sl
 8003246:	4659      	mov	r1, fp
 8003248:	f7fd fb48 	bl	80008dc <__aeabi_uldivmod>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4b0e      	ldr	r3, [pc, #56]	; (800328c <UART_SetConfig+0x38c>)
 8003252:	fba3 1302 	umull	r1, r3, r3, r2
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	2164      	movs	r1, #100	; 0x64
 800325a:	fb01 f303 	mul.w	r3, r1, r3
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	3332      	adds	r3, #50	; 0x32
 8003264:	4a09      	ldr	r2, [pc, #36]	; (800328c <UART_SetConfig+0x38c>)
 8003266:	fba2 2303 	umull	r2, r3, r2, r3
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	f003 020f 	and.w	r2, r3, #15
 8003270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4432      	add	r2, r6
 8003276:	609a      	str	r2, [r3, #8]
}
 8003278:	bf00      	nop
 800327a:	377c      	adds	r7, #124	; 0x7c
 800327c:	46bd      	mov	sp, r7
 800327e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003282:	bf00      	nop
 8003284:	40011000 	.word	0x40011000
 8003288:	40011400 	.word	0x40011400
 800328c:	51eb851f 	.word	0x51eb851f

08003290 <__errno>:
 8003290:	4b01      	ldr	r3, [pc, #4]	; (8003298 <__errno+0x8>)
 8003292:	6818      	ldr	r0, [r3, #0]
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	2000000c 	.word	0x2000000c

0800329c <__libc_init_array>:
 800329c:	b570      	push	{r4, r5, r6, lr}
 800329e:	4d0d      	ldr	r5, [pc, #52]	; (80032d4 <__libc_init_array+0x38>)
 80032a0:	4c0d      	ldr	r4, [pc, #52]	; (80032d8 <__libc_init_array+0x3c>)
 80032a2:	1b64      	subs	r4, r4, r5
 80032a4:	10a4      	asrs	r4, r4, #2
 80032a6:	2600      	movs	r6, #0
 80032a8:	42a6      	cmp	r6, r4
 80032aa:	d109      	bne.n	80032c0 <__libc_init_array+0x24>
 80032ac:	4d0b      	ldr	r5, [pc, #44]	; (80032dc <__libc_init_array+0x40>)
 80032ae:	4c0c      	ldr	r4, [pc, #48]	; (80032e0 <__libc_init_array+0x44>)
 80032b0:	f000 fc4e 	bl	8003b50 <_init>
 80032b4:	1b64      	subs	r4, r4, r5
 80032b6:	10a4      	asrs	r4, r4, #2
 80032b8:	2600      	movs	r6, #0
 80032ba:	42a6      	cmp	r6, r4
 80032bc:	d105      	bne.n	80032ca <__libc_init_array+0x2e>
 80032be:	bd70      	pop	{r4, r5, r6, pc}
 80032c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c4:	4798      	blx	r3
 80032c6:	3601      	adds	r6, #1
 80032c8:	e7ee      	b.n	80032a8 <__libc_init_array+0xc>
 80032ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ce:	4798      	blx	r3
 80032d0:	3601      	adds	r6, #1
 80032d2:	e7f2      	b.n	80032ba <__libc_init_array+0x1e>
 80032d4:	08003c40 	.word	0x08003c40
 80032d8:	08003c40 	.word	0x08003c40
 80032dc:	08003c40 	.word	0x08003c40
 80032e0:	08003c44 	.word	0x08003c44

080032e4 <memset>:
 80032e4:	4402      	add	r2, r0
 80032e6:	4603      	mov	r3, r0
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d100      	bne.n	80032ee <memset+0xa>
 80032ec:	4770      	bx	lr
 80032ee:	f803 1b01 	strb.w	r1, [r3], #1
 80032f2:	e7f9      	b.n	80032e8 <memset+0x4>

080032f4 <siprintf>:
 80032f4:	b40e      	push	{r1, r2, r3}
 80032f6:	b500      	push	{lr}
 80032f8:	b09c      	sub	sp, #112	; 0x70
 80032fa:	ab1d      	add	r3, sp, #116	; 0x74
 80032fc:	9002      	str	r0, [sp, #8]
 80032fe:	9006      	str	r0, [sp, #24]
 8003300:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003304:	4809      	ldr	r0, [pc, #36]	; (800332c <siprintf+0x38>)
 8003306:	9107      	str	r1, [sp, #28]
 8003308:	9104      	str	r1, [sp, #16]
 800330a:	4909      	ldr	r1, [pc, #36]	; (8003330 <siprintf+0x3c>)
 800330c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003310:	9105      	str	r1, [sp, #20]
 8003312:	6800      	ldr	r0, [r0, #0]
 8003314:	9301      	str	r3, [sp, #4]
 8003316:	a902      	add	r1, sp, #8
 8003318:	f000 f868 	bl	80033ec <_svfiprintf_r>
 800331c:	9b02      	ldr	r3, [sp, #8]
 800331e:	2200      	movs	r2, #0
 8003320:	701a      	strb	r2, [r3, #0]
 8003322:	b01c      	add	sp, #112	; 0x70
 8003324:	f85d eb04 	ldr.w	lr, [sp], #4
 8003328:	b003      	add	sp, #12
 800332a:	4770      	bx	lr
 800332c:	2000000c 	.word	0x2000000c
 8003330:	ffff0208 	.word	0xffff0208

08003334 <__ssputs_r>:
 8003334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003338:	688e      	ldr	r6, [r1, #8]
 800333a:	429e      	cmp	r6, r3
 800333c:	4682      	mov	sl, r0
 800333e:	460c      	mov	r4, r1
 8003340:	4690      	mov	r8, r2
 8003342:	461f      	mov	r7, r3
 8003344:	d838      	bhi.n	80033b8 <__ssputs_r+0x84>
 8003346:	898a      	ldrh	r2, [r1, #12]
 8003348:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800334c:	d032      	beq.n	80033b4 <__ssputs_r+0x80>
 800334e:	6825      	ldr	r5, [r4, #0]
 8003350:	6909      	ldr	r1, [r1, #16]
 8003352:	eba5 0901 	sub.w	r9, r5, r1
 8003356:	6965      	ldr	r5, [r4, #20]
 8003358:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800335c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003360:	3301      	adds	r3, #1
 8003362:	444b      	add	r3, r9
 8003364:	106d      	asrs	r5, r5, #1
 8003366:	429d      	cmp	r5, r3
 8003368:	bf38      	it	cc
 800336a:	461d      	movcc	r5, r3
 800336c:	0553      	lsls	r3, r2, #21
 800336e:	d531      	bpl.n	80033d4 <__ssputs_r+0xa0>
 8003370:	4629      	mov	r1, r5
 8003372:	f000 fb47 	bl	8003a04 <_malloc_r>
 8003376:	4606      	mov	r6, r0
 8003378:	b950      	cbnz	r0, 8003390 <__ssputs_r+0x5c>
 800337a:	230c      	movs	r3, #12
 800337c:	f8ca 3000 	str.w	r3, [sl]
 8003380:	89a3      	ldrh	r3, [r4, #12]
 8003382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003386:	81a3      	strh	r3, [r4, #12]
 8003388:	f04f 30ff 	mov.w	r0, #4294967295
 800338c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003390:	6921      	ldr	r1, [r4, #16]
 8003392:	464a      	mov	r2, r9
 8003394:	f000 fabe 	bl	8003914 <memcpy>
 8003398:	89a3      	ldrh	r3, [r4, #12]
 800339a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800339e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033a2:	81a3      	strh	r3, [r4, #12]
 80033a4:	6126      	str	r6, [r4, #16]
 80033a6:	6165      	str	r5, [r4, #20]
 80033a8:	444e      	add	r6, r9
 80033aa:	eba5 0509 	sub.w	r5, r5, r9
 80033ae:	6026      	str	r6, [r4, #0]
 80033b0:	60a5      	str	r5, [r4, #8]
 80033b2:	463e      	mov	r6, r7
 80033b4:	42be      	cmp	r6, r7
 80033b6:	d900      	bls.n	80033ba <__ssputs_r+0x86>
 80033b8:	463e      	mov	r6, r7
 80033ba:	4632      	mov	r2, r6
 80033bc:	6820      	ldr	r0, [r4, #0]
 80033be:	4641      	mov	r1, r8
 80033c0:	f000 fab6 	bl	8003930 <memmove>
 80033c4:	68a3      	ldr	r3, [r4, #8]
 80033c6:	6822      	ldr	r2, [r4, #0]
 80033c8:	1b9b      	subs	r3, r3, r6
 80033ca:	4432      	add	r2, r6
 80033cc:	60a3      	str	r3, [r4, #8]
 80033ce:	6022      	str	r2, [r4, #0]
 80033d0:	2000      	movs	r0, #0
 80033d2:	e7db      	b.n	800338c <__ssputs_r+0x58>
 80033d4:	462a      	mov	r2, r5
 80033d6:	f000 fb6f 	bl	8003ab8 <_realloc_r>
 80033da:	4606      	mov	r6, r0
 80033dc:	2800      	cmp	r0, #0
 80033de:	d1e1      	bne.n	80033a4 <__ssputs_r+0x70>
 80033e0:	6921      	ldr	r1, [r4, #16]
 80033e2:	4650      	mov	r0, sl
 80033e4:	f000 fabe 	bl	8003964 <_free_r>
 80033e8:	e7c7      	b.n	800337a <__ssputs_r+0x46>
	...

080033ec <_svfiprintf_r>:
 80033ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033f0:	4698      	mov	r8, r3
 80033f2:	898b      	ldrh	r3, [r1, #12]
 80033f4:	061b      	lsls	r3, r3, #24
 80033f6:	b09d      	sub	sp, #116	; 0x74
 80033f8:	4607      	mov	r7, r0
 80033fa:	460d      	mov	r5, r1
 80033fc:	4614      	mov	r4, r2
 80033fe:	d50e      	bpl.n	800341e <_svfiprintf_r+0x32>
 8003400:	690b      	ldr	r3, [r1, #16]
 8003402:	b963      	cbnz	r3, 800341e <_svfiprintf_r+0x32>
 8003404:	2140      	movs	r1, #64	; 0x40
 8003406:	f000 fafd 	bl	8003a04 <_malloc_r>
 800340a:	6028      	str	r0, [r5, #0]
 800340c:	6128      	str	r0, [r5, #16]
 800340e:	b920      	cbnz	r0, 800341a <_svfiprintf_r+0x2e>
 8003410:	230c      	movs	r3, #12
 8003412:	603b      	str	r3, [r7, #0]
 8003414:	f04f 30ff 	mov.w	r0, #4294967295
 8003418:	e0d1      	b.n	80035be <_svfiprintf_r+0x1d2>
 800341a:	2340      	movs	r3, #64	; 0x40
 800341c:	616b      	str	r3, [r5, #20]
 800341e:	2300      	movs	r3, #0
 8003420:	9309      	str	r3, [sp, #36]	; 0x24
 8003422:	2320      	movs	r3, #32
 8003424:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003428:	f8cd 800c 	str.w	r8, [sp, #12]
 800342c:	2330      	movs	r3, #48	; 0x30
 800342e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80035d8 <_svfiprintf_r+0x1ec>
 8003432:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003436:	f04f 0901 	mov.w	r9, #1
 800343a:	4623      	mov	r3, r4
 800343c:	469a      	mov	sl, r3
 800343e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003442:	b10a      	cbz	r2, 8003448 <_svfiprintf_r+0x5c>
 8003444:	2a25      	cmp	r2, #37	; 0x25
 8003446:	d1f9      	bne.n	800343c <_svfiprintf_r+0x50>
 8003448:	ebba 0b04 	subs.w	fp, sl, r4
 800344c:	d00b      	beq.n	8003466 <_svfiprintf_r+0x7a>
 800344e:	465b      	mov	r3, fp
 8003450:	4622      	mov	r2, r4
 8003452:	4629      	mov	r1, r5
 8003454:	4638      	mov	r0, r7
 8003456:	f7ff ff6d 	bl	8003334 <__ssputs_r>
 800345a:	3001      	adds	r0, #1
 800345c:	f000 80aa 	beq.w	80035b4 <_svfiprintf_r+0x1c8>
 8003460:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003462:	445a      	add	r2, fp
 8003464:	9209      	str	r2, [sp, #36]	; 0x24
 8003466:	f89a 3000 	ldrb.w	r3, [sl]
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 80a2 	beq.w	80035b4 <_svfiprintf_r+0x1c8>
 8003470:	2300      	movs	r3, #0
 8003472:	f04f 32ff 	mov.w	r2, #4294967295
 8003476:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800347a:	f10a 0a01 	add.w	sl, sl, #1
 800347e:	9304      	str	r3, [sp, #16]
 8003480:	9307      	str	r3, [sp, #28]
 8003482:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003486:	931a      	str	r3, [sp, #104]	; 0x68
 8003488:	4654      	mov	r4, sl
 800348a:	2205      	movs	r2, #5
 800348c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003490:	4851      	ldr	r0, [pc, #324]	; (80035d8 <_svfiprintf_r+0x1ec>)
 8003492:	f7fc fe9d 	bl	80001d0 <memchr>
 8003496:	9a04      	ldr	r2, [sp, #16]
 8003498:	b9d8      	cbnz	r0, 80034d2 <_svfiprintf_r+0xe6>
 800349a:	06d0      	lsls	r0, r2, #27
 800349c:	bf44      	itt	mi
 800349e:	2320      	movmi	r3, #32
 80034a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034a4:	0711      	lsls	r1, r2, #28
 80034a6:	bf44      	itt	mi
 80034a8:	232b      	movmi	r3, #43	; 0x2b
 80034aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034ae:	f89a 3000 	ldrb.w	r3, [sl]
 80034b2:	2b2a      	cmp	r3, #42	; 0x2a
 80034b4:	d015      	beq.n	80034e2 <_svfiprintf_r+0xf6>
 80034b6:	9a07      	ldr	r2, [sp, #28]
 80034b8:	4654      	mov	r4, sl
 80034ba:	2000      	movs	r0, #0
 80034bc:	f04f 0c0a 	mov.w	ip, #10
 80034c0:	4621      	mov	r1, r4
 80034c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034c6:	3b30      	subs	r3, #48	; 0x30
 80034c8:	2b09      	cmp	r3, #9
 80034ca:	d94e      	bls.n	800356a <_svfiprintf_r+0x17e>
 80034cc:	b1b0      	cbz	r0, 80034fc <_svfiprintf_r+0x110>
 80034ce:	9207      	str	r2, [sp, #28]
 80034d0:	e014      	b.n	80034fc <_svfiprintf_r+0x110>
 80034d2:	eba0 0308 	sub.w	r3, r0, r8
 80034d6:	fa09 f303 	lsl.w	r3, r9, r3
 80034da:	4313      	orrs	r3, r2
 80034dc:	9304      	str	r3, [sp, #16]
 80034de:	46a2      	mov	sl, r4
 80034e0:	e7d2      	b.n	8003488 <_svfiprintf_r+0x9c>
 80034e2:	9b03      	ldr	r3, [sp, #12]
 80034e4:	1d19      	adds	r1, r3, #4
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	9103      	str	r1, [sp, #12]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	bfbb      	ittet	lt
 80034ee:	425b      	neglt	r3, r3
 80034f0:	f042 0202 	orrlt.w	r2, r2, #2
 80034f4:	9307      	strge	r3, [sp, #28]
 80034f6:	9307      	strlt	r3, [sp, #28]
 80034f8:	bfb8      	it	lt
 80034fa:	9204      	strlt	r2, [sp, #16]
 80034fc:	7823      	ldrb	r3, [r4, #0]
 80034fe:	2b2e      	cmp	r3, #46	; 0x2e
 8003500:	d10c      	bne.n	800351c <_svfiprintf_r+0x130>
 8003502:	7863      	ldrb	r3, [r4, #1]
 8003504:	2b2a      	cmp	r3, #42	; 0x2a
 8003506:	d135      	bne.n	8003574 <_svfiprintf_r+0x188>
 8003508:	9b03      	ldr	r3, [sp, #12]
 800350a:	1d1a      	adds	r2, r3, #4
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	9203      	str	r2, [sp, #12]
 8003510:	2b00      	cmp	r3, #0
 8003512:	bfb8      	it	lt
 8003514:	f04f 33ff 	movlt.w	r3, #4294967295
 8003518:	3402      	adds	r4, #2
 800351a:	9305      	str	r3, [sp, #20]
 800351c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80035e8 <_svfiprintf_r+0x1fc>
 8003520:	7821      	ldrb	r1, [r4, #0]
 8003522:	2203      	movs	r2, #3
 8003524:	4650      	mov	r0, sl
 8003526:	f7fc fe53 	bl	80001d0 <memchr>
 800352a:	b140      	cbz	r0, 800353e <_svfiprintf_r+0x152>
 800352c:	2340      	movs	r3, #64	; 0x40
 800352e:	eba0 000a 	sub.w	r0, r0, sl
 8003532:	fa03 f000 	lsl.w	r0, r3, r0
 8003536:	9b04      	ldr	r3, [sp, #16]
 8003538:	4303      	orrs	r3, r0
 800353a:	3401      	adds	r4, #1
 800353c:	9304      	str	r3, [sp, #16]
 800353e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003542:	4826      	ldr	r0, [pc, #152]	; (80035dc <_svfiprintf_r+0x1f0>)
 8003544:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003548:	2206      	movs	r2, #6
 800354a:	f7fc fe41 	bl	80001d0 <memchr>
 800354e:	2800      	cmp	r0, #0
 8003550:	d038      	beq.n	80035c4 <_svfiprintf_r+0x1d8>
 8003552:	4b23      	ldr	r3, [pc, #140]	; (80035e0 <_svfiprintf_r+0x1f4>)
 8003554:	bb1b      	cbnz	r3, 800359e <_svfiprintf_r+0x1b2>
 8003556:	9b03      	ldr	r3, [sp, #12]
 8003558:	3307      	adds	r3, #7
 800355a:	f023 0307 	bic.w	r3, r3, #7
 800355e:	3308      	adds	r3, #8
 8003560:	9303      	str	r3, [sp, #12]
 8003562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003564:	4433      	add	r3, r6
 8003566:	9309      	str	r3, [sp, #36]	; 0x24
 8003568:	e767      	b.n	800343a <_svfiprintf_r+0x4e>
 800356a:	fb0c 3202 	mla	r2, ip, r2, r3
 800356e:	460c      	mov	r4, r1
 8003570:	2001      	movs	r0, #1
 8003572:	e7a5      	b.n	80034c0 <_svfiprintf_r+0xd4>
 8003574:	2300      	movs	r3, #0
 8003576:	3401      	adds	r4, #1
 8003578:	9305      	str	r3, [sp, #20]
 800357a:	4619      	mov	r1, r3
 800357c:	f04f 0c0a 	mov.w	ip, #10
 8003580:	4620      	mov	r0, r4
 8003582:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003586:	3a30      	subs	r2, #48	; 0x30
 8003588:	2a09      	cmp	r2, #9
 800358a:	d903      	bls.n	8003594 <_svfiprintf_r+0x1a8>
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0c5      	beq.n	800351c <_svfiprintf_r+0x130>
 8003590:	9105      	str	r1, [sp, #20]
 8003592:	e7c3      	b.n	800351c <_svfiprintf_r+0x130>
 8003594:	fb0c 2101 	mla	r1, ip, r1, r2
 8003598:	4604      	mov	r4, r0
 800359a:	2301      	movs	r3, #1
 800359c:	e7f0      	b.n	8003580 <_svfiprintf_r+0x194>
 800359e:	ab03      	add	r3, sp, #12
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	462a      	mov	r2, r5
 80035a4:	4b0f      	ldr	r3, [pc, #60]	; (80035e4 <_svfiprintf_r+0x1f8>)
 80035a6:	a904      	add	r1, sp, #16
 80035a8:	4638      	mov	r0, r7
 80035aa:	f3af 8000 	nop.w
 80035ae:	1c42      	adds	r2, r0, #1
 80035b0:	4606      	mov	r6, r0
 80035b2:	d1d6      	bne.n	8003562 <_svfiprintf_r+0x176>
 80035b4:	89ab      	ldrh	r3, [r5, #12]
 80035b6:	065b      	lsls	r3, r3, #25
 80035b8:	f53f af2c 	bmi.w	8003414 <_svfiprintf_r+0x28>
 80035bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035be:	b01d      	add	sp, #116	; 0x74
 80035c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035c4:	ab03      	add	r3, sp, #12
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	462a      	mov	r2, r5
 80035ca:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <_svfiprintf_r+0x1f8>)
 80035cc:	a904      	add	r1, sp, #16
 80035ce:	4638      	mov	r0, r7
 80035d0:	f000 f87a 	bl	80036c8 <_printf_i>
 80035d4:	e7eb      	b.n	80035ae <_svfiprintf_r+0x1c2>
 80035d6:	bf00      	nop
 80035d8:	08003c04 	.word	0x08003c04
 80035dc:	08003c0e 	.word	0x08003c0e
 80035e0:	00000000 	.word	0x00000000
 80035e4:	08003335 	.word	0x08003335
 80035e8:	08003c0a 	.word	0x08003c0a

080035ec <_printf_common>:
 80035ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035f0:	4616      	mov	r6, r2
 80035f2:	4699      	mov	r9, r3
 80035f4:	688a      	ldr	r2, [r1, #8]
 80035f6:	690b      	ldr	r3, [r1, #16]
 80035f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035fc:	4293      	cmp	r3, r2
 80035fe:	bfb8      	it	lt
 8003600:	4613      	movlt	r3, r2
 8003602:	6033      	str	r3, [r6, #0]
 8003604:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003608:	4607      	mov	r7, r0
 800360a:	460c      	mov	r4, r1
 800360c:	b10a      	cbz	r2, 8003612 <_printf_common+0x26>
 800360e:	3301      	adds	r3, #1
 8003610:	6033      	str	r3, [r6, #0]
 8003612:	6823      	ldr	r3, [r4, #0]
 8003614:	0699      	lsls	r1, r3, #26
 8003616:	bf42      	ittt	mi
 8003618:	6833      	ldrmi	r3, [r6, #0]
 800361a:	3302      	addmi	r3, #2
 800361c:	6033      	strmi	r3, [r6, #0]
 800361e:	6825      	ldr	r5, [r4, #0]
 8003620:	f015 0506 	ands.w	r5, r5, #6
 8003624:	d106      	bne.n	8003634 <_printf_common+0x48>
 8003626:	f104 0a19 	add.w	sl, r4, #25
 800362a:	68e3      	ldr	r3, [r4, #12]
 800362c:	6832      	ldr	r2, [r6, #0]
 800362e:	1a9b      	subs	r3, r3, r2
 8003630:	42ab      	cmp	r3, r5
 8003632:	dc26      	bgt.n	8003682 <_printf_common+0x96>
 8003634:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003638:	1e13      	subs	r3, r2, #0
 800363a:	6822      	ldr	r2, [r4, #0]
 800363c:	bf18      	it	ne
 800363e:	2301      	movne	r3, #1
 8003640:	0692      	lsls	r2, r2, #26
 8003642:	d42b      	bmi.n	800369c <_printf_common+0xb0>
 8003644:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003648:	4649      	mov	r1, r9
 800364a:	4638      	mov	r0, r7
 800364c:	47c0      	blx	r8
 800364e:	3001      	adds	r0, #1
 8003650:	d01e      	beq.n	8003690 <_printf_common+0xa4>
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	68e5      	ldr	r5, [r4, #12]
 8003656:	6832      	ldr	r2, [r6, #0]
 8003658:	f003 0306 	and.w	r3, r3, #6
 800365c:	2b04      	cmp	r3, #4
 800365e:	bf08      	it	eq
 8003660:	1aad      	subeq	r5, r5, r2
 8003662:	68a3      	ldr	r3, [r4, #8]
 8003664:	6922      	ldr	r2, [r4, #16]
 8003666:	bf0c      	ite	eq
 8003668:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800366c:	2500      	movne	r5, #0
 800366e:	4293      	cmp	r3, r2
 8003670:	bfc4      	itt	gt
 8003672:	1a9b      	subgt	r3, r3, r2
 8003674:	18ed      	addgt	r5, r5, r3
 8003676:	2600      	movs	r6, #0
 8003678:	341a      	adds	r4, #26
 800367a:	42b5      	cmp	r5, r6
 800367c:	d11a      	bne.n	80036b4 <_printf_common+0xc8>
 800367e:	2000      	movs	r0, #0
 8003680:	e008      	b.n	8003694 <_printf_common+0xa8>
 8003682:	2301      	movs	r3, #1
 8003684:	4652      	mov	r2, sl
 8003686:	4649      	mov	r1, r9
 8003688:	4638      	mov	r0, r7
 800368a:	47c0      	blx	r8
 800368c:	3001      	adds	r0, #1
 800368e:	d103      	bne.n	8003698 <_printf_common+0xac>
 8003690:	f04f 30ff 	mov.w	r0, #4294967295
 8003694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003698:	3501      	adds	r5, #1
 800369a:	e7c6      	b.n	800362a <_printf_common+0x3e>
 800369c:	18e1      	adds	r1, r4, r3
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	2030      	movs	r0, #48	; 0x30
 80036a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036a6:	4422      	add	r2, r4
 80036a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036b0:	3302      	adds	r3, #2
 80036b2:	e7c7      	b.n	8003644 <_printf_common+0x58>
 80036b4:	2301      	movs	r3, #1
 80036b6:	4622      	mov	r2, r4
 80036b8:	4649      	mov	r1, r9
 80036ba:	4638      	mov	r0, r7
 80036bc:	47c0      	blx	r8
 80036be:	3001      	adds	r0, #1
 80036c0:	d0e6      	beq.n	8003690 <_printf_common+0xa4>
 80036c2:	3601      	adds	r6, #1
 80036c4:	e7d9      	b.n	800367a <_printf_common+0x8e>
	...

080036c8 <_printf_i>:
 80036c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036cc:	460c      	mov	r4, r1
 80036ce:	4691      	mov	r9, r2
 80036d0:	7e27      	ldrb	r7, [r4, #24]
 80036d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80036d4:	2f78      	cmp	r7, #120	; 0x78
 80036d6:	4680      	mov	r8, r0
 80036d8:	469a      	mov	sl, r3
 80036da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036de:	d807      	bhi.n	80036f0 <_printf_i+0x28>
 80036e0:	2f62      	cmp	r7, #98	; 0x62
 80036e2:	d80a      	bhi.n	80036fa <_printf_i+0x32>
 80036e4:	2f00      	cmp	r7, #0
 80036e6:	f000 80d8 	beq.w	800389a <_printf_i+0x1d2>
 80036ea:	2f58      	cmp	r7, #88	; 0x58
 80036ec:	f000 80a3 	beq.w	8003836 <_printf_i+0x16e>
 80036f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80036f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036f8:	e03a      	b.n	8003770 <_printf_i+0xa8>
 80036fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036fe:	2b15      	cmp	r3, #21
 8003700:	d8f6      	bhi.n	80036f0 <_printf_i+0x28>
 8003702:	a001      	add	r0, pc, #4	; (adr r0, 8003708 <_printf_i+0x40>)
 8003704:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003708:	08003761 	.word	0x08003761
 800370c:	08003775 	.word	0x08003775
 8003710:	080036f1 	.word	0x080036f1
 8003714:	080036f1 	.word	0x080036f1
 8003718:	080036f1 	.word	0x080036f1
 800371c:	080036f1 	.word	0x080036f1
 8003720:	08003775 	.word	0x08003775
 8003724:	080036f1 	.word	0x080036f1
 8003728:	080036f1 	.word	0x080036f1
 800372c:	080036f1 	.word	0x080036f1
 8003730:	080036f1 	.word	0x080036f1
 8003734:	08003881 	.word	0x08003881
 8003738:	080037a5 	.word	0x080037a5
 800373c:	08003863 	.word	0x08003863
 8003740:	080036f1 	.word	0x080036f1
 8003744:	080036f1 	.word	0x080036f1
 8003748:	080038a3 	.word	0x080038a3
 800374c:	080036f1 	.word	0x080036f1
 8003750:	080037a5 	.word	0x080037a5
 8003754:	080036f1 	.word	0x080036f1
 8003758:	080036f1 	.word	0x080036f1
 800375c:	0800386b 	.word	0x0800386b
 8003760:	680b      	ldr	r3, [r1, #0]
 8003762:	1d1a      	adds	r2, r3, #4
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	600a      	str	r2, [r1, #0]
 8003768:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800376c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003770:	2301      	movs	r3, #1
 8003772:	e0a3      	b.n	80038bc <_printf_i+0x1f4>
 8003774:	6825      	ldr	r5, [r4, #0]
 8003776:	6808      	ldr	r0, [r1, #0]
 8003778:	062e      	lsls	r6, r5, #24
 800377a:	f100 0304 	add.w	r3, r0, #4
 800377e:	d50a      	bpl.n	8003796 <_printf_i+0xce>
 8003780:	6805      	ldr	r5, [r0, #0]
 8003782:	600b      	str	r3, [r1, #0]
 8003784:	2d00      	cmp	r5, #0
 8003786:	da03      	bge.n	8003790 <_printf_i+0xc8>
 8003788:	232d      	movs	r3, #45	; 0x2d
 800378a:	426d      	negs	r5, r5
 800378c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003790:	485e      	ldr	r0, [pc, #376]	; (800390c <_printf_i+0x244>)
 8003792:	230a      	movs	r3, #10
 8003794:	e019      	b.n	80037ca <_printf_i+0x102>
 8003796:	f015 0f40 	tst.w	r5, #64	; 0x40
 800379a:	6805      	ldr	r5, [r0, #0]
 800379c:	600b      	str	r3, [r1, #0]
 800379e:	bf18      	it	ne
 80037a0:	b22d      	sxthne	r5, r5
 80037a2:	e7ef      	b.n	8003784 <_printf_i+0xbc>
 80037a4:	680b      	ldr	r3, [r1, #0]
 80037a6:	6825      	ldr	r5, [r4, #0]
 80037a8:	1d18      	adds	r0, r3, #4
 80037aa:	6008      	str	r0, [r1, #0]
 80037ac:	0628      	lsls	r0, r5, #24
 80037ae:	d501      	bpl.n	80037b4 <_printf_i+0xec>
 80037b0:	681d      	ldr	r5, [r3, #0]
 80037b2:	e002      	b.n	80037ba <_printf_i+0xf2>
 80037b4:	0669      	lsls	r1, r5, #25
 80037b6:	d5fb      	bpl.n	80037b0 <_printf_i+0xe8>
 80037b8:	881d      	ldrh	r5, [r3, #0]
 80037ba:	4854      	ldr	r0, [pc, #336]	; (800390c <_printf_i+0x244>)
 80037bc:	2f6f      	cmp	r7, #111	; 0x6f
 80037be:	bf0c      	ite	eq
 80037c0:	2308      	moveq	r3, #8
 80037c2:	230a      	movne	r3, #10
 80037c4:	2100      	movs	r1, #0
 80037c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037ca:	6866      	ldr	r6, [r4, #4]
 80037cc:	60a6      	str	r6, [r4, #8]
 80037ce:	2e00      	cmp	r6, #0
 80037d0:	bfa2      	ittt	ge
 80037d2:	6821      	ldrge	r1, [r4, #0]
 80037d4:	f021 0104 	bicge.w	r1, r1, #4
 80037d8:	6021      	strge	r1, [r4, #0]
 80037da:	b90d      	cbnz	r5, 80037e0 <_printf_i+0x118>
 80037dc:	2e00      	cmp	r6, #0
 80037de:	d04d      	beq.n	800387c <_printf_i+0x1b4>
 80037e0:	4616      	mov	r6, r2
 80037e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80037e6:	fb03 5711 	mls	r7, r3, r1, r5
 80037ea:	5dc7      	ldrb	r7, [r0, r7]
 80037ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80037f0:	462f      	mov	r7, r5
 80037f2:	42bb      	cmp	r3, r7
 80037f4:	460d      	mov	r5, r1
 80037f6:	d9f4      	bls.n	80037e2 <_printf_i+0x11a>
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d10b      	bne.n	8003814 <_printf_i+0x14c>
 80037fc:	6823      	ldr	r3, [r4, #0]
 80037fe:	07df      	lsls	r7, r3, #31
 8003800:	d508      	bpl.n	8003814 <_printf_i+0x14c>
 8003802:	6923      	ldr	r3, [r4, #16]
 8003804:	6861      	ldr	r1, [r4, #4]
 8003806:	4299      	cmp	r1, r3
 8003808:	bfde      	ittt	le
 800380a:	2330      	movle	r3, #48	; 0x30
 800380c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003810:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003814:	1b92      	subs	r2, r2, r6
 8003816:	6122      	str	r2, [r4, #16]
 8003818:	f8cd a000 	str.w	sl, [sp]
 800381c:	464b      	mov	r3, r9
 800381e:	aa03      	add	r2, sp, #12
 8003820:	4621      	mov	r1, r4
 8003822:	4640      	mov	r0, r8
 8003824:	f7ff fee2 	bl	80035ec <_printf_common>
 8003828:	3001      	adds	r0, #1
 800382a:	d14c      	bne.n	80038c6 <_printf_i+0x1fe>
 800382c:	f04f 30ff 	mov.w	r0, #4294967295
 8003830:	b004      	add	sp, #16
 8003832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003836:	4835      	ldr	r0, [pc, #212]	; (800390c <_printf_i+0x244>)
 8003838:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800383c:	6823      	ldr	r3, [r4, #0]
 800383e:	680e      	ldr	r6, [r1, #0]
 8003840:	061f      	lsls	r7, r3, #24
 8003842:	f856 5b04 	ldr.w	r5, [r6], #4
 8003846:	600e      	str	r6, [r1, #0]
 8003848:	d514      	bpl.n	8003874 <_printf_i+0x1ac>
 800384a:	07d9      	lsls	r1, r3, #31
 800384c:	bf44      	itt	mi
 800384e:	f043 0320 	orrmi.w	r3, r3, #32
 8003852:	6023      	strmi	r3, [r4, #0]
 8003854:	b91d      	cbnz	r5, 800385e <_printf_i+0x196>
 8003856:	6823      	ldr	r3, [r4, #0]
 8003858:	f023 0320 	bic.w	r3, r3, #32
 800385c:	6023      	str	r3, [r4, #0]
 800385e:	2310      	movs	r3, #16
 8003860:	e7b0      	b.n	80037c4 <_printf_i+0xfc>
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	f043 0320 	orr.w	r3, r3, #32
 8003868:	6023      	str	r3, [r4, #0]
 800386a:	2378      	movs	r3, #120	; 0x78
 800386c:	4828      	ldr	r0, [pc, #160]	; (8003910 <_printf_i+0x248>)
 800386e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003872:	e7e3      	b.n	800383c <_printf_i+0x174>
 8003874:	065e      	lsls	r6, r3, #25
 8003876:	bf48      	it	mi
 8003878:	b2ad      	uxthmi	r5, r5
 800387a:	e7e6      	b.n	800384a <_printf_i+0x182>
 800387c:	4616      	mov	r6, r2
 800387e:	e7bb      	b.n	80037f8 <_printf_i+0x130>
 8003880:	680b      	ldr	r3, [r1, #0]
 8003882:	6826      	ldr	r6, [r4, #0]
 8003884:	6960      	ldr	r0, [r4, #20]
 8003886:	1d1d      	adds	r5, r3, #4
 8003888:	600d      	str	r5, [r1, #0]
 800388a:	0635      	lsls	r5, r6, #24
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	d501      	bpl.n	8003894 <_printf_i+0x1cc>
 8003890:	6018      	str	r0, [r3, #0]
 8003892:	e002      	b.n	800389a <_printf_i+0x1d2>
 8003894:	0671      	lsls	r1, r6, #25
 8003896:	d5fb      	bpl.n	8003890 <_printf_i+0x1c8>
 8003898:	8018      	strh	r0, [r3, #0]
 800389a:	2300      	movs	r3, #0
 800389c:	6123      	str	r3, [r4, #16]
 800389e:	4616      	mov	r6, r2
 80038a0:	e7ba      	b.n	8003818 <_printf_i+0x150>
 80038a2:	680b      	ldr	r3, [r1, #0]
 80038a4:	1d1a      	adds	r2, r3, #4
 80038a6:	600a      	str	r2, [r1, #0]
 80038a8:	681e      	ldr	r6, [r3, #0]
 80038aa:	6862      	ldr	r2, [r4, #4]
 80038ac:	2100      	movs	r1, #0
 80038ae:	4630      	mov	r0, r6
 80038b0:	f7fc fc8e 	bl	80001d0 <memchr>
 80038b4:	b108      	cbz	r0, 80038ba <_printf_i+0x1f2>
 80038b6:	1b80      	subs	r0, r0, r6
 80038b8:	6060      	str	r0, [r4, #4]
 80038ba:	6863      	ldr	r3, [r4, #4]
 80038bc:	6123      	str	r3, [r4, #16]
 80038be:	2300      	movs	r3, #0
 80038c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038c4:	e7a8      	b.n	8003818 <_printf_i+0x150>
 80038c6:	6923      	ldr	r3, [r4, #16]
 80038c8:	4632      	mov	r2, r6
 80038ca:	4649      	mov	r1, r9
 80038cc:	4640      	mov	r0, r8
 80038ce:	47d0      	blx	sl
 80038d0:	3001      	adds	r0, #1
 80038d2:	d0ab      	beq.n	800382c <_printf_i+0x164>
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	079b      	lsls	r3, r3, #30
 80038d8:	d413      	bmi.n	8003902 <_printf_i+0x23a>
 80038da:	68e0      	ldr	r0, [r4, #12]
 80038dc:	9b03      	ldr	r3, [sp, #12]
 80038de:	4298      	cmp	r0, r3
 80038e0:	bfb8      	it	lt
 80038e2:	4618      	movlt	r0, r3
 80038e4:	e7a4      	b.n	8003830 <_printf_i+0x168>
 80038e6:	2301      	movs	r3, #1
 80038e8:	4632      	mov	r2, r6
 80038ea:	4649      	mov	r1, r9
 80038ec:	4640      	mov	r0, r8
 80038ee:	47d0      	blx	sl
 80038f0:	3001      	adds	r0, #1
 80038f2:	d09b      	beq.n	800382c <_printf_i+0x164>
 80038f4:	3501      	adds	r5, #1
 80038f6:	68e3      	ldr	r3, [r4, #12]
 80038f8:	9903      	ldr	r1, [sp, #12]
 80038fa:	1a5b      	subs	r3, r3, r1
 80038fc:	42ab      	cmp	r3, r5
 80038fe:	dcf2      	bgt.n	80038e6 <_printf_i+0x21e>
 8003900:	e7eb      	b.n	80038da <_printf_i+0x212>
 8003902:	2500      	movs	r5, #0
 8003904:	f104 0619 	add.w	r6, r4, #25
 8003908:	e7f5      	b.n	80038f6 <_printf_i+0x22e>
 800390a:	bf00      	nop
 800390c:	08003c15 	.word	0x08003c15
 8003910:	08003c26 	.word	0x08003c26

08003914 <memcpy>:
 8003914:	440a      	add	r2, r1
 8003916:	4291      	cmp	r1, r2
 8003918:	f100 33ff 	add.w	r3, r0, #4294967295
 800391c:	d100      	bne.n	8003920 <memcpy+0xc>
 800391e:	4770      	bx	lr
 8003920:	b510      	push	{r4, lr}
 8003922:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003926:	f803 4f01 	strb.w	r4, [r3, #1]!
 800392a:	4291      	cmp	r1, r2
 800392c:	d1f9      	bne.n	8003922 <memcpy+0xe>
 800392e:	bd10      	pop	{r4, pc}

08003930 <memmove>:
 8003930:	4288      	cmp	r0, r1
 8003932:	b510      	push	{r4, lr}
 8003934:	eb01 0402 	add.w	r4, r1, r2
 8003938:	d902      	bls.n	8003940 <memmove+0x10>
 800393a:	4284      	cmp	r4, r0
 800393c:	4623      	mov	r3, r4
 800393e:	d807      	bhi.n	8003950 <memmove+0x20>
 8003940:	1e43      	subs	r3, r0, #1
 8003942:	42a1      	cmp	r1, r4
 8003944:	d008      	beq.n	8003958 <memmove+0x28>
 8003946:	f811 2b01 	ldrb.w	r2, [r1], #1
 800394a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800394e:	e7f8      	b.n	8003942 <memmove+0x12>
 8003950:	4402      	add	r2, r0
 8003952:	4601      	mov	r1, r0
 8003954:	428a      	cmp	r2, r1
 8003956:	d100      	bne.n	800395a <memmove+0x2a>
 8003958:	bd10      	pop	{r4, pc}
 800395a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800395e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003962:	e7f7      	b.n	8003954 <memmove+0x24>

08003964 <_free_r>:
 8003964:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003966:	2900      	cmp	r1, #0
 8003968:	d048      	beq.n	80039fc <_free_r+0x98>
 800396a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800396e:	9001      	str	r0, [sp, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	f1a1 0404 	sub.w	r4, r1, #4
 8003976:	bfb8      	it	lt
 8003978:	18e4      	addlt	r4, r4, r3
 800397a:	f000 f8d3 	bl	8003b24 <__malloc_lock>
 800397e:	4a20      	ldr	r2, [pc, #128]	; (8003a00 <_free_r+0x9c>)
 8003980:	9801      	ldr	r0, [sp, #4]
 8003982:	6813      	ldr	r3, [r2, #0]
 8003984:	4615      	mov	r5, r2
 8003986:	b933      	cbnz	r3, 8003996 <_free_r+0x32>
 8003988:	6063      	str	r3, [r4, #4]
 800398a:	6014      	str	r4, [r2, #0]
 800398c:	b003      	add	sp, #12
 800398e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003992:	f000 b8cd 	b.w	8003b30 <__malloc_unlock>
 8003996:	42a3      	cmp	r3, r4
 8003998:	d90b      	bls.n	80039b2 <_free_r+0x4e>
 800399a:	6821      	ldr	r1, [r4, #0]
 800399c:	1862      	adds	r2, r4, r1
 800399e:	4293      	cmp	r3, r2
 80039a0:	bf04      	itt	eq
 80039a2:	681a      	ldreq	r2, [r3, #0]
 80039a4:	685b      	ldreq	r3, [r3, #4]
 80039a6:	6063      	str	r3, [r4, #4]
 80039a8:	bf04      	itt	eq
 80039aa:	1852      	addeq	r2, r2, r1
 80039ac:	6022      	streq	r2, [r4, #0]
 80039ae:	602c      	str	r4, [r5, #0]
 80039b0:	e7ec      	b.n	800398c <_free_r+0x28>
 80039b2:	461a      	mov	r2, r3
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	b10b      	cbz	r3, 80039bc <_free_r+0x58>
 80039b8:	42a3      	cmp	r3, r4
 80039ba:	d9fa      	bls.n	80039b2 <_free_r+0x4e>
 80039bc:	6811      	ldr	r1, [r2, #0]
 80039be:	1855      	adds	r5, r2, r1
 80039c0:	42a5      	cmp	r5, r4
 80039c2:	d10b      	bne.n	80039dc <_free_r+0x78>
 80039c4:	6824      	ldr	r4, [r4, #0]
 80039c6:	4421      	add	r1, r4
 80039c8:	1854      	adds	r4, r2, r1
 80039ca:	42a3      	cmp	r3, r4
 80039cc:	6011      	str	r1, [r2, #0]
 80039ce:	d1dd      	bne.n	800398c <_free_r+0x28>
 80039d0:	681c      	ldr	r4, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	6053      	str	r3, [r2, #4]
 80039d6:	4421      	add	r1, r4
 80039d8:	6011      	str	r1, [r2, #0]
 80039da:	e7d7      	b.n	800398c <_free_r+0x28>
 80039dc:	d902      	bls.n	80039e4 <_free_r+0x80>
 80039de:	230c      	movs	r3, #12
 80039e0:	6003      	str	r3, [r0, #0]
 80039e2:	e7d3      	b.n	800398c <_free_r+0x28>
 80039e4:	6825      	ldr	r5, [r4, #0]
 80039e6:	1961      	adds	r1, r4, r5
 80039e8:	428b      	cmp	r3, r1
 80039ea:	bf04      	itt	eq
 80039ec:	6819      	ldreq	r1, [r3, #0]
 80039ee:	685b      	ldreq	r3, [r3, #4]
 80039f0:	6063      	str	r3, [r4, #4]
 80039f2:	bf04      	itt	eq
 80039f4:	1949      	addeq	r1, r1, r5
 80039f6:	6021      	streq	r1, [r4, #0]
 80039f8:	6054      	str	r4, [r2, #4]
 80039fa:	e7c7      	b.n	800398c <_free_r+0x28>
 80039fc:	b003      	add	sp, #12
 80039fe:	bd30      	pop	{r4, r5, pc}
 8003a00:	200000a0 	.word	0x200000a0

08003a04 <_malloc_r>:
 8003a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a06:	1ccd      	adds	r5, r1, #3
 8003a08:	f025 0503 	bic.w	r5, r5, #3
 8003a0c:	3508      	adds	r5, #8
 8003a0e:	2d0c      	cmp	r5, #12
 8003a10:	bf38      	it	cc
 8003a12:	250c      	movcc	r5, #12
 8003a14:	2d00      	cmp	r5, #0
 8003a16:	4606      	mov	r6, r0
 8003a18:	db01      	blt.n	8003a1e <_malloc_r+0x1a>
 8003a1a:	42a9      	cmp	r1, r5
 8003a1c:	d903      	bls.n	8003a26 <_malloc_r+0x22>
 8003a1e:	230c      	movs	r3, #12
 8003a20:	6033      	str	r3, [r6, #0]
 8003a22:	2000      	movs	r0, #0
 8003a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a26:	f000 f87d 	bl	8003b24 <__malloc_lock>
 8003a2a:	4921      	ldr	r1, [pc, #132]	; (8003ab0 <_malloc_r+0xac>)
 8003a2c:	680a      	ldr	r2, [r1, #0]
 8003a2e:	4614      	mov	r4, r2
 8003a30:	b99c      	cbnz	r4, 8003a5a <_malloc_r+0x56>
 8003a32:	4f20      	ldr	r7, [pc, #128]	; (8003ab4 <_malloc_r+0xb0>)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	b923      	cbnz	r3, 8003a42 <_malloc_r+0x3e>
 8003a38:	4621      	mov	r1, r4
 8003a3a:	4630      	mov	r0, r6
 8003a3c:	f000 f862 	bl	8003b04 <_sbrk_r>
 8003a40:	6038      	str	r0, [r7, #0]
 8003a42:	4629      	mov	r1, r5
 8003a44:	4630      	mov	r0, r6
 8003a46:	f000 f85d 	bl	8003b04 <_sbrk_r>
 8003a4a:	1c43      	adds	r3, r0, #1
 8003a4c:	d123      	bne.n	8003a96 <_malloc_r+0x92>
 8003a4e:	230c      	movs	r3, #12
 8003a50:	6033      	str	r3, [r6, #0]
 8003a52:	4630      	mov	r0, r6
 8003a54:	f000 f86c 	bl	8003b30 <__malloc_unlock>
 8003a58:	e7e3      	b.n	8003a22 <_malloc_r+0x1e>
 8003a5a:	6823      	ldr	r3, [r4, #0]
 8003a5c:	1b5b      	subs	r3, r3, r5
 8003a5e:	d417      	bmi.n	8003a90 <_malloc_r+0x8c>
 8003a60:	2b0b      	cmp	r3, #11
 8003a62:	d903      	bls.n	8003a6c <_malloc_r+0x68>
 8003a64:	6023      	str	r3, [r4, #0]
 8003a66:	441c      	add	r4, r3
 8003a68:	6025      	str	r5, [r4, #0]
 8003a6a:	e004      	b.n	8003a76 <_malloc_r+0x72>
 8003a6c:	6863      	ldr	r3, [r4, #4]
 8003a6e:	42a2      	cmp	r2, r4
 8003a70:	bf0c      	ite	eq
 8003a72:	600b      	streq	r3, [r1, #0]
 8003a74:	6053      	strne	r3, [r2, #4]
 8003a76:	4630      	mov	r0, r6
 8003a78:	f000 f85a 	bl	8003b30 <__malloc_unlock>
 8003a7c:	f104 000b 	add.w	r0, r4, #11
 8003a80:	1d23      	adds	r3, r4, #4
 8003a82:	f020 0007 	bic.w	r0, r0, #7
 8003a86:	1ac2      	subs	r2, r0, r3
 8003a88:	d0cc      	beq.n	8003a24 <_malloc_r+0x20>
 8003a8a:	1a1b      	subs	r3, r3, r0
 8003a8c:	50a3      	str	r3, [r4, r2]
 8003a8e:	e7c9      	b.n	8003a24 <_malloc_r+0x20>
 8003a90:	4622      	mov	r2, r4
 8003a92:	6864      	ldr	r4, [r4, #4]
 8003a94:	e7cc      	b.n	8003a30 <_malloc_r+0x2c>
 8003a96:	1cc4      	adds	r4, r0, #3
 8003a98:	f024 0403 	bic.w	r4, r4, #3
 8003a9c:	42a0      	cmp	r0, r4
 8003a9e:	d0e3      	beq.n	8003a68 <_malloc_r+0x64>
 8003aa0:	1a21      	subs	r1, r4, r0
 8003aa2:	4630      	mov	r0, r6
 8003aa4:	f000 f82e 	bl	8003b04 <_sbrk_r>
 8003aa8:	3001      	adds	r0, #1
 8003aaa:	d1dd      	bne.n	8003a68 <_malloc_r+0x64>
 8003aac:	e7cf      	b.n	8003a4e <_malloc_r+0x4a>
 8003aae:	bf00      	nop
 8003ab0:	200000a0 	.word	0x200000a0
 8003ab4:	200000a4 	.word	0x200000a4

08003ab8 <_realloc_r>:
 8003ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aba:	4607      	mov	r7, r0
 8003abc:	4614      	mov	r4, r2
 8003abe:	460e      	mov	r6, r1
 8003ac0:	b921      	cbnz	r1, 8003acc <_realloc_r+0x14>
 8003ac2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	f7ff bf9c 	b.w	8003a04 <_malloc_r>
 8003acc:	b922      	cbnz	r2, 8003ad8 <_realloc_r+0x20>
 8003ace:	f7ff ff49 	bl	8003964 <_free_r>
 8003ad2:	4625      	mov	r5, r4
 8003ad4:	4628      	mov	r0, r5
 8003ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ad8:	f000 f830 	bl	8003b3c <_malloc_usable_size_r>
 8003adc:	42a0      	cmp	r0, r4
 8003ade:	d20f      	bcs.n	8003b00 <_realloc_r+0x48>
 8003ae0:	4621      	mov	r1, r4
 8003ae2:	4638      	mov	r0, r7
 8003ae4:	f7ff ff8e 	bl	8003a04 <_malloc_r>
 8003ae8:	4605      	mov	r5, r0
 8003aea:	2800      	cmp	r0, #0
 8003aec:	d0f2      	beq.n	8003ad4 <_realloc_r+0x1c>
 8003aee:	4631      	mov	r1, r6
 8003af0:	4622      	mov	r2, r4
 8003af2:	f7ff ff0f 	bl	8003914 <memcpy>
 8003af6:	4631      	mov	r1, r6
 8003af8:	4638      	mov	r0, r7
 8003afa:	f7ff ff33 	bl	8003964 <_free_r>
 8003afe:	e7e9      	b.n	8003ad4 <_realloc_r+0x1c>
 8003b00:	4635      	mov	r5, r6
 8003b02:	e7e7      	b.n	8003ad4 <_realloc_r+0x1c>

08003b04 <_sbrk_r>:
 8003b04:	b538      	push	{r3, r4, r5, lr}
 8003b06:	4d06      	ldr	r5, [pc, #24]	; (8003b20 <_sbrk_r+0x1c>)
 8003b08:	2300      	movs	r3, #0
 8003b0a:	4604      	mov	r4, r0
 8003b0c:	4608      	mov	r0, r1
 8003b0e:	602b      	str	r3, [r5, #0]
 8003b10:	f7fd fc2e 	bl	8001370 <_sbrk>
 8003b14:	1c43      	adds	r3, r0, #1
 8003b16:	d102      	bne.n	8003b1e <_sbrk_r+0x1a>
 8003b18:	682b      	ldr	r3, [r5, #0]
 8003b1a:	b103      	cbz	r3, 8003b1e <_sbrk_r+0x1a>
 8003b1c:	6023      	str	r3, [r4, #0]
 8003b1e:	bd38      	pop	{r3, r4, r5, pc}
 8003b20:	20000138 	.word	0x20000138

08003b24 <__malloc_lock>:
 8003b24:	4801      	ldr	r0, [pc, #4]	; (8003b2c <__malloc_lock+0x8>)
 8003b26:	f000 b811 	b.w	8003b4c <__retarget_lock_acquire_recursive>
 8003b2a:	bf00      	nop
 8003b2c:	20000140 	.word	0x20000140

08003b30 <__malloc_unlock>:
 8003b30:	4801      	ldr	r0, [pc, #4]	; (8003b38 <__malloc_unlock+0x8>)
 8003b32:	f000 b80c 	b.w	8003b4e <__retarget_lock_release_recursive>
 8003b36:	bf00      	nop
 8003b38:	20000140 	.word	0x20000140

08003b3c <_malloc_usable_size_r>:
 8003b3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b40:	1f18      	subs	r0, r3, #4
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	bfbc      	itt	lt
 8003b46:	580b      	ldrlt	r3, [r1, r0]
 8003b48:	18c0      	addlt	r0, r0, r3
 8003b4a:	4770      	bx	lr

08003b4c <__retarget_lock_acquire_recursive>:
 8003b4c:	4770      	bx	lr

08003b4e <__retarget_lock_release_recursive>:
 8003b4e:	4770      	bx	lr

08003b50 <_init>:
 8003b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b52:	bf00      	nop
 8003b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b56:	bc08      	pop	{r3}
 8003b58:	469e      	mov	lr, r3
 8003b5a:	4770      	bx	lr

08003b5c <_fini>:
 8003b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5e:	bf00      	nop
 8003b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b62:	bc08      	pop	{r3}
 8003b64:	469e      	mov	lr, r3
 8003b66:	4770      	bx	lr
